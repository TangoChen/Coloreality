<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Vuforia.UnityExtensions.Editor</name>
  </assembly>
  <members>
    <member name="T:Vuforia.SharpZipLib.Checksum.Adler32">
      <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
      <see cref="T:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream" />
      <see cref="T:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.Adler32.Reset">
      <summary>
            Resets the Adler32 data checksum as if no update was ever called.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Checksum.Adler32.Value">
      <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.Adler32.Update(System.Int32)">
      <summary>
            Updates the checksum with the byte b.
            </summary>
      <param name="bval">
            The data value to add. The high byte of the int is ignored.
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.Adler32.Update(System.Byte[])">
      <summary>
            Updates the Adler32 data checksum with the bytes taken from 
            a block of data.
            </summary>
      <param name="buffer">Contains the data to update the checksum with.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Update Adler32 data checksum based on a portion of a block of data
            </summary>
      <param name="buffer">Contains the data to update the CRC with.</param>
      <param name="offset">The offset into the buffer where the data starts</param>
      <param name="count">The number of data bytes to update the CRC with.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Checksum.BZip2Crc">
      <summary>
             CRC-32 with unreversed data and reversed output
             </summary>
      <remarks>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x^1+x^0.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.BZip2Crc.Reset">
      <summary>
            Resets the CRC data checksum as if no update was ever called.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Checksum.BZip2Crc.Value">
      <summary>
            Returns the CRC data checksum computed so far.
            </summary>
      <remarks>Reversed Out = true</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.BZip2Crc.Update(System.Int32)">
      <summary>
            Updates the checksum with the int bval.
            </summary>
      <param name="bval">
            the byte is taken as the lower 8 bits of bval
            </param>
      <remarks>Reversed Data = false</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.BZip2Crc.Update(System.Byte[])">
      <summary>
            Updates the CRC data checksum with the bytes taken from 
            a block of data.
            </summary>
      <param name="buffer">Contains the data to update the CRC with.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.BZip2Crc.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Update CRC data checksum based on a portion of a block of data
            </summary>
      <param name="buffer">Contains the data to update the CRC with.</param>
      <param name="offset">The offset into the buffer where the data starts</param>
      <param name="count">The number of data bytes to update the CRC with.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Checksum.Crc32">
      <summary>
             CRC-32 with reversed data and unreversed output
             </summary>
      <remarks>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x^1+x^0.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.Crc32.Reset">
      <summary>
            Resets the CRC data checksum as if no update was ever called.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Checksum.Crc32.Value">
      <summary>
            Returns the CRC data checksum computed so far.
            </summary>
      <remarks>Reversed Out = false</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.Crc32.Update(System.Int32)">
      <summary>
            Updates the checksum with the int bval.
            </summary>
      <param name="bval">
            the byte is taken as the lower 8 bits of bval
            </param>
      <remarks>Reversed Data = true</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.Crc32.Update(System.Byte[])">
      <summary>
            Updates the CRC data checksum with the bytes taken from 
            a block of data.
            </summary>
      <param name="buffer">Contains the data to update the CRC with.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Update CRC data checksum based on a portion of a block of data
            </summary>
      <param name="buffer">Contains the data to update the CRC with.</param>
      <param name="offset">The offset into the buffer where the data starts</param>
      <param name="count">The number of data bytes to update the CRC with.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Checksum.IChecksum">
      <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.IChecksum.Reset">
      <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Checksum.IChecksum.Value">
      <summary>
            Returns the data checksum computed so far.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.IChecksum.Update(System.Int32)">
      <summary>
            Adds one byte to the data checksum.
            </summary>
      <param name="bval">
            the data value to add. The high byte of the int is ignored.
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.IChecksum.Update(System.Byte[])">
      <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
      <param name="buffer">
            buffer an array of bytes
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Checksum.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds the byte array to the data checksum.
            </summary>
      <param name="buffer">
            The buffer which contains the data
            </param>
      <param name="offset">
            The offset in the buffer where the data starts
            </param>
      <param name="count">
            the number of data bytes to add.
            </param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.ScanEventArgs">
      <summary>
            Event arguments for scanning.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ScanEventArgs.Name">
      <summary>
            The file or directory name for this event.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ScanEventArgs.ContinueRunning">
      <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.ProgressEventArgs">
      <summary>
            Event arguments during processing of a single file or directory.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ProgressEventArgs.Name">
      <summary>
            The name for this event if known.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ProgressEventArgs.ContinueRunning">
      <summary>
            Get set a value indicating wether scanning should continue or not.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ProgressEventArgs.PercentComplete">
      <summary>
            Get a percentage representing how much of the <see cref="P:Vuforia.SharpZipLib.Core.ProgressEventArgs.Target"></see> has been processed
            </summary>
      <value>0.0 to 100.0 percent; 0 if target is not known.</value>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ProgressEventArgs.Processed">
      <summary>
            The number of bytes processed so far
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ProgressEventArgs.Target">
      <summary>
            The number of bytes to process.
            </summary>
      <remarks>Target may be 0 or negative if the value isnt known.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.DirectoryEventArgs">
      <summary>
            Event arguments for directories.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.DirectoryEventArgs.HasMatchingFiles">
      <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.ScanFailureEventArgs">
      <summary>
            Arguments passed when scan failures are detected.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ScanFailureEventArgs.Name">
      <summary>
            The applicable name.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ScanFailureEventArgs.Exception">
      <summary>
            The applicable exception.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ScanFailureEventArgs.ContinueRunning">
      <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.ProcessFileHandler">
      <summary>
            Delegate invoked before starting to process a file.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.ProgressHandler">
      <summary>
            Delegate invoked during processing of a file or directory
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.CompletedFileHandler">
      <summary>
            Delegate invoked when a file has been completely processed.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.DirectoryFailureHandler">
      <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.FileFailureHandler">
      <summary>
            Delegate invoked when a file failure is detected.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.FileSystemScanner">
      <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
    </member>
    <member name="E:Vuforia.SharpZipLib.Core.FileSystemScanner.ProcessDirectory">
      <summary>
            Delegate to invoke when a directory is processed.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Core.FileSystemScanner.ProcessFile">
      <summary>
            Delegate to invoke when a file is processed.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Core.FileSystemScanner.CompletedFile">
      <summary>
            Delegate to invoke when processing for a file has finished.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Core.FileSystemScanner.DirectoryFailure">
      <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Core.FileSystemScanner.FileFailure">
      <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
      <summary>
            Scan a directory.
            </summary>
      <param name="directory">The base directory to scan.</param>
      <param name="recurse">True to recurse subdirectories, false to scan a single directory.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.INameTransform">
      <summary>
            INameTransform defines how file system names are transformed for use with archives, or vice versa.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.INameTransform.TransformFile(System.String)">
      <summary>
            Given a file name determine the transformed value.
            </summary>
      <param name="name">The name to transform.</param>
      <returns>The transformed file name.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.INameTransform.TransformDirectory(System.String)">
      <summary>
            Given a directory name determine the transformed value.
            </summary>
      <param name="name">The name to transform.</param>
      <returns>The transformed directory name</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.IScanFilter">
      <summary>
            Scanning filters support filtering of names.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.IScanFilter.IsMatch(System.String)">
      <summary>
            Test a name to see if it 'matches' the filter.
            </summary>
      <param name="name">The name to test.</param>
      <returns>Returns true if the name matches the filter, false if it does not match.</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.NameFilter">
      <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see> separated by semi-colons ';'.
            To include a semi-colon it may be quoted as in \;. Each expression can be prefixed by a plus '+' sign or
            a minus '-' sign to denote the expression is intended to include or exclude names.
            If neither a plus or minus sign is found include is the default.
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
      <example>The following expression includes all name ending in '.dat' with the exception of 'dummy.dat'
            "+\.dat$;-^dummy\.dat$"
            </example>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.NameFilter.IsValidExpression(System.String)">
      <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
      <param name="expression">The expression to test.</param>
      <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex" /> false otherwise.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.NameFilter.IsValidFilterExpression(System.String)">
      <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
      <param name="toTest">The filter expression to test.</param>
      <returns>True if the expression is valid, false otherwise.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.NameFilter.SplitQuoted(System.String)">
      <summary>
            Split a string into its component pieces
            </summary>
      <param name="original">The original string</param>
      <returns>Returns an array of <see cref="T:System.String" /> values containing the individual filter elements.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.NameFilter.ToString">
      <summary>
            Convert this filter to its string equivalent.
            </summary>
      <returns>The string equivalent for this filter.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.NameFilter.IsIncluded(System.String)">
      <summary>
            Test a value to see if it is included by the filter.
            </summary>
      <param name="name">The value to test.</param>
      <returns>True if the value is included, false otherwise.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.NameFilter.IsExcluded(System.String)">
      <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
      <param name="name">The value to test.</param>
      <returns>True if the value is excluded, false otherwise.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.NameFilter.IsMatch(System.String)">
      <summary>
            Test a value to see if it matches the filter.
            </summary>
      <param name="name">The value to test.</param>
      <returns>True if the value matches, false otherwise.</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.PathFilter">
      <summary>
            PathFilter filters directories and files using a form of <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see>
            by full path name.
            See <see cref="T:Vuforia.SharpZipLib.Core.NameFilter">NameFilter</see> for more detail on filtering.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.PathFilter.IsMatch(System.String)">
      <summary>
            Test a name to see if it matches the filter.
            </summary>
      <param name="name">The name to test.</param>
      <returns>True if the name matches, false otherwise.</returns>
      <remarks>
        <see cref="M:System.IO.Path.GetFullPath(System.String)" /> is used to get the full path before matching.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.ExtendedPathFilter">
      <summary>
            ExtendedPathFilter filters based on name, file size, and the last write time of the file.
            </summary>
      <remarks>Provides an example of how to customise filtering.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.ExtendedPathFilter.IsMatch(System.String)">
      <summary>
            Test a filename to see if it matches the filter.
            </summary>
      <param name="name">The filename to test.</param>
      <returns>True if the filter matches, false otherwise.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The <see paramref="fileName" /> doesnt exist</exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ExtendedPathFilter.MinSize">
      <summary>
            Get/set the minimum size/length for a file that will match this filter.
            </summary>
      <remarks>The default value is zero.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero; greater than <see cref="P:Vuforia.SharpZipLib.Core.ExtendedPathFilter.MaxSize" /></exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ExtendedPathFilter.MaxSize">
      <summary>
            Get/set the maximum size/length for a file that will match this filter.
            </summary>
      <remarks>The default value is <see cref="F:System.Int64.MaxValue" /></remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero or less than <see cref="P:Vuforia.SharpZipLib.Core.ExtendedPathFilter.MinSize" /></exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ExtendedPathFilter.MinDate">
      <summary>
            Get/set the minimum <see cref="T:System.DateTime" /> value that will match for this filter.
            </summary>
      <remarks>Files with a LastWrite time less than this value are excluded by the filter.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.ExtendedPathFilter.MaxDate">
      <summary>
            Get/set the maximum <see cref="T:System.DateTime" /> value that will match for this filter.
            </summary>
      <remarks>Files with a LastWrite time greater than this value are excluded by the filter.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.NameAndSizeFilter">
      <summary>
            NameAndSizeFilter filters based on name and file size.
            </summary>
      <remarks>A sample showing how filters might be extended.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.NameAndSizeFilter.IsMatch(System.String)">
      <summary>
            Test a filename to see if it matches the filter.
            </summary>
      <param name="name">The filename to test.</param>
      <returns>True if the filter matches, false otherwise.</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.NameAndSizeFilter.MinSize">
      <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Core.NameAndSizeFilter.MaxSize">
      <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.StreamUtils">
      <summary>
            Provides simple <see cref="T:System.IO.Stream" />" utilities.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[])">
      <summary>
            Read from a <see cref="T:System.IO.Stream" /> ensuring all the required data is read.
            </summary>
      <param name="stream">The stream to read.</param>
      <param name="buffer">The buffer to fill.</param>
      <seealso cref="M:Vuforia.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read from a <see cref="T:System.IO.Stream" />" ensuring all the required data is read.
            </summary>
      <param name="stream">The stream to read data from.</param>
      <param name="buffer">The buffer to store data in.</param>
      <param name="offset">The offset at which to begin storing data.</param>
      <param name="count">The number of bytes of data to store.</param>
      <exception cref="T:System.ArgumentNullException">Required parameter is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> and or <paramref name="count" /> are invalid.</exception>
      <exception cref="T:System.IO.EndOfStreamException">End of stream is encountered before all the data has been read.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
      <summary>
            Copy the contents of one <see cref="T:System.IO.Stream" /> to another.
            </summary>
      <param name="source">The stream to source data from.</param>
      <param name="destination">The stream to write data to.</param>
      <param name="buffer">The buffer to use during copying.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],Vuforia.SharpZipLib.Core.ProgressHandler,System.TimeSpan,System.Object,System.String)">
      <summary>
            Copy the contents of one <see cref="T:System.IO.Stream" /> to another.
            </summary>
      <param name="source">The stream to source data from.</param>
      <param name="destination">The stream to write data to.</param>
      <param name="buffer">The buffer to use during copying.</param>
      <param name="progressHandler">The <see cref="T:Vuforia.SharpZipLib.Core.ProgressHandler">progress handler delegate</see> to use.</param>
      <param name="updateInterval">The minimum <see cref="T:System.TimeSpan" /> between progress updates.</param>
      <param name="sender">The source for this event.</param>
      <param name="name">The name to use with the event.</param>
      <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],Vuforia.SharpZipLib.Core.ProgressHandler,System.TimeSpan,System.Object,System.String,System.Int64)">
      <summary>
            Copy the contents of one <see cref="T:System.IO.Stream" /> to another.
            </summary>
      <param name="source">The stream to source data from.</param>
      <param name="destination">The stream to write data to.</param>
      <param name="buffer">The buffer to use during copying.</param>
      <param name="progressHandler">The <see cref="T:Vuforia.SharpZipLib.Core.ProgressHandler">progress handler delegate</see> to use.</param>
      <param name="updateInterval">The minimum <see cref="T:System.TimeSpan" /> between progress updates.</param>
      <param name="sender">The source for this event.</param>
      <param name="name">The name to use with the event.</param>
      <param name="fixedTarget">A predetermined fixed target value to use with progress updates.
            If the value is negative the target is calculated by looking at the stream.</param>
      <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Core.WindowsPathUtils">
      <summary>
            WindowsPathUtils provides simple utilities for handling windows paths.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Core.WindowsPathUtils.DropPathRoot(System.String)">
      <summary>
            Remove any path root present in the path
            </summary>
      <param name="path">A <see cref="T:System.String" /> containing path information.</param>
      <returns>The path with the root removed if it was present; path otherwise.</returns>
      <remarks>Unlike the <see cref="T:System.IO.Path" /> class the path isnt otherwise checked for validity.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.SharpZipBaseException">
      <summary>
            SharpZipBaseException is the base exception class for SharpZipLib.
            All library exceptions are derived from this.
            </summary>
      <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.Deflater">
      <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
      <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
      <summary>
            The worst but fastest compression level.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
      <summary>
            The default compression level.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
      <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
      <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.Reset">
      <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Deflater.Adler">
      <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Deflater.TotalIn">
      <summary>
            Gets the number of input bytes processed so far.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Deflater.TotalOut">
      <summary>
            Gets the number of output bytes so far.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.Flush">
      <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.Finish">
      <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Deflater.IsFinished">
      <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
      <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
      <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
      <param name="input">
            the buffer containing the input data.
            </param>
      <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
      <param name="input">
            the buffer containing the input data.
            </param>
      <param name="offset">
            the start of the data.
            </param>
      <param name="count">
            the number of data bytes of input.
            </param>
      <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
      <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
      <param name="level">
            the new compression level.
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.GetLevel">
      <summary>
            Get current compression level
            </summary>
      <returns>Returns the current compression level</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.SetStrategy(Vuforia.SharpZipLib.Zip.Compression.DeflateStrategy)">
      <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
      <param name="strategy">
            The new compression strategy.
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
      <summary>
            Deflates the current input block with to the given array.
            </summary>
      <param name="output">
            The buffer where compressed data is stored
            </param>
      <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Deflates the current input block to the given array.
            </summary>
      <param name="output">
            Buffer to store the compressed data.
            </param>
      <param name="offset">
            Offset into the output array.
            </param>
      <param name="length">
            The maximum number of bytes that may be stored.
            </param>
      <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
      <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
      <param name="dictionary">
            the dictionary.
            </param>
      <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
      <param name="dictionary">
            The dictionary data
            </param>
      <param name="index">
            The index where dictionary information commences.
            </param>
      <param name="count">
            The number of bytes in the dictionary.
            </param>
      <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants">
      <summary>
            This class contains constants used for deflation.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
      <summary>
            Set to true to enable debugging
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
      <summary>
            Written to Zip file to identify a stored block
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
      <summary>
            Identifies static tree in Zip file
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
      <summary>
            Identifies dynamic tree in Zip file
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
      <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
      <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
      <summary>
            Internal compression engine constant
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.DeflateStrategy">
      <summary>
            Strategies for deflater
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
      <summary>
            The default strategy
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
      <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
      <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine">
      <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
      <summary>
            Deflate drives actual compression of data
            </summary>
      <param name="flush">True to flush input buffers</param>
      <param name="finish">Finish deflation with the current input.</param>
      <returns>Returns true if progress has been made.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
      <param name="buffer">The buffer containing input data.</param>
      <param name="offset">The offset of the first byte of data.</param>
      <param name="count">The number of bytes of data to use as input.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
      <summary>
            Determines if more <see cref="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>
      <returns>Return true if input is needed via <see cref="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Set compression dictionary
            </summary>
      <param name="buffer">The buffer containing the dictionary data</param>
      <param name="offset">The offset in the buffer for the first byte of data</param>
      <param name="length">The length of the dictionary data.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
      <summary>
            Reset internal state
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
      <summary>
            Reset Adler checksum
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
      <summary>
            Get current value of Adler checksum
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
      <summary>
            Total data processed
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
      <summary>
            Get/set the <see cref="T:Vuforia.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see></summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
      <summary>
            Set the deflate level (0-9)
            </summary>
      <param name="level">The value to set the level to.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
      <summary>
            Fill the window
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman">
      <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
      <summary>
            Pending buffer to use
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
      <summary>
            Reset internal state
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
      <summary>
            Write all trees to pending buffer
            </summary>
      <param name="blTreeCodes">The number/rank of treecodes to send.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
      <summary>
            Compress current buffer writing data to pending buffer
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
            Flush block to output with no compression
            </summary>
      <param name="stored">Data to write</param>
      <param name="storedOffset">Index of first byte to write</param>
      <param name="storedLength">Count of bytes to write</param>
      <param name="lastBlock">True if this is the last block</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
            Flush block to output with compression
            </summary>
      <param name="stored">Data to flush</param>
      <param name="storedOffset">Index of first byte to flush</param>
      <param name="storedLength">Count of bytes to flush</param>
      <param name="lastBlock">True if this is the last block</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
      <summary>
            Get value indicating if internal buffer is full
            </summary>
      <returns>true if buffer is full</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
      <summary>
            Add literal to buffer
            </summary>
      <param name="literal">Literal value to add to buffer.</param>
      <returns>Value indicating internal buffer is full</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
      <summary>
            Add distance code and length to literal and distance trees
            </summary>
      <param name="distance">Distance code</param>
      <param name="length">Length</param>
      <returns>Value indicating if internal buffer is full</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
      <summary>
            Reverse the bits of a 16 bit value.
            </summary>
      <param name="toReverse">Value to reverse bits</param>
      <returns>Value with bits reversed</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.DeflaterPending">
      <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.Inflater">
      <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul><li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li><li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li><li>IsFinished returns true, the inflater has finished.</li></ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Inflater.Reset">
      <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
      <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
      <param name="buffer">
            The dictionary.
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
      <param name="buffer">
            The dictionary.
            </param>
      <param name="index">
            The index into buffer where the dictionary starts.
            </param>
      <param name="count">
            The number of bytes in the dictionary.
            </param>
      <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
      <exception cref="T:Vuforia.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
      <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
      <param name="buffer">
            the input.
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
      <param name="buffer">
            The source of input data
            </param>
      <param name="index">
            The index into buffer where the input starts.
            </param>
      <param name="count">
            The number of bytes of input to use.
            </param>
      <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
      <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
      <param name="buffer">
            the output buffer.
            </param>
      <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
      <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
      <param name="buffer">
            the output buffer.
            </param>
      <param name="offset">
            the offset in buffer where storing starts.
            </param>
      <param name="count">
            the maximum number of bytes to output.
            </param>
      <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
      <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
      <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
      <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Inflater.IsFinished">
      <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Inflater.Adler">
      <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
      <returns>
            the adler checksum.
            </returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Inflater.TotalOut">
      <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
      <returns>
            the total number of output bytes.
            </returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Inflater.TotalIn">
      <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
      <returns>
            The total number of bytes of processed input bytes.
            </returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
      <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
      <returns>
            The number of bytes of the input which have not been processed.
            </returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
      <summary>
            Huffman tree used for inflation
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
      <summary>
            Literal length tree
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
      <summary>
            Distance tree
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
      <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
      <param name="input">
            input the input source.
            </param>
      <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer">
      <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
      <summary>
            Clear internal state/buffers
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
      <summary>
            Write a byte to buffer
            </summary>
      <param name="value">
            The value to write
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
      <summary>
            Write a short value to buffer LSB first
            </summary>
      <param name="value">
            The value to write.
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
      <summary>
            write an integer LSB first
            </summary>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Write a block of data to buffer
            </summary>
      <param name="block">data to write</param>
      <param name="offset">offset of first byte to write</param>
      <param name="length">number of bytes to write</param>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
      <summary>
            The number of bits written to the buffer
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
      <summary>
            Align internal buffer on a byte boundary
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
      <summary>
            Write bits to internal buffer
            </summary>
      <param name="b">source of bits</param>
      <param name="count">number of bits to write</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
      <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
      <param name="s">value to write</param>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
      <summary>
            Indicates if buffer has been flushed
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
      <param name="output">The output array.</param>
      <param name="offset">The offset into output array.</param>
      <param name="length">The maximum number of bytes to store.</param>
      <returns>The number of bytes flushed.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
      <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
      <returns>
            The internal buffer contents converted to a byte array.
            </returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
      <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br />
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
      <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
      <exception cref="T:Vuforia.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
      <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="!:Close"></see> will close the underlying stream also.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
      <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
      <summary>
            Get/set the password used for encryption.
            </summary>
      <remarks>When set to null or if the password is empty no encryption is performed</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
      <summary>
            Gets value indicating stream can be read from
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
      <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
      <summary>
            Get value indicating if this stream supports writing
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
      <summary>
            Get current length of stream
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
      <summary>
            Gets the current position within the stream.
            </summary>
      <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
      <param name="offset">The offset relative to the <paramref name="origin" /> to seek.</param>
      <param name="origin">The <see cref="T:System.IO.SeekOrigin" /> to seek from.</param>
      <returns>The new position in the stream.</returns>
      <exception cref="T:System.NotSupportedException">Any access</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
      <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
      <param name="value">The new stream length.</param>
      <exception cref="T:System.NotSupportedException">Any access</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
      <summary>
            Read a byte from stream advancing position by one
            </summary>
      <returns>The byte read cast to an int.  THe value is -1 if at the end of the stream.</returns>
      <exception cref="T:System.NotSupportedException">Any access</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read a block of bytes from stream
            </summary>
      <param name="buffer">The buffer to store read data in.</param>
      <param name="offset">The offset to start storing at.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>The actual number of bytes read.  Zero if end of stream is detected.</returns>
      <exception cref="T:System.NotSupportedException">Any access</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
      <summary>
            Flushes the stream by calling <see cref="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">Flush</see> on the deflater and then
            on the underlying stream.  This ensures that all bytes are flushed.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
      <summary>
            Writes a single byte to the compressed output stream.
            </summary>
      <param name="value">
            The byte value.
            </param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
      <param name="buffer">
            The byte array
            </param>
      <param name="offset">
            The offset into the byte array where to start.
            </param>
      <param name="count">
            The number of bytes to write.
            </param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
      <summary>
            An input buffer customised for use by <see cref="T:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream" /></summary>
      <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
      <summary>
            Get the length of bytes bytes in the <see cref="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData" /></summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
      <summary>
            Get the contents of the raw data buffer.
            </summary>
      <remarks>This may contain encrypted data.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
      <summary>
            Get the number of useable bytes in <see cref="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText" /></summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
      <summary>
            Get the contents of the clear text buffer.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
      <summary>
            Get/set the number of bytes available
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(Vuforia.SharpZipLib.Zip.Compression.Inflater)">
      <summary>
            Call <see cref="M:Vuforia.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)" /> passing the current clear text buffer contents.
            </summary>
      <param name="inflater">The inflater to set input for.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
      <summary>
            Fill the buffer from the underlying input stream.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
      <summary>
            Read a buffer directly from the input stream
            </summary>
      <param name="buffer">The buffer to fill</param>
      <returns>Returns the number of bytes read.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read a buffer directly from the input stream
            </summary>
      <param name="outBuffer">The buffer to read into</param>
      <param name="offset">The offset to start reading data into.</param>
      <param name="length">The number of bytes to read.</param>
      <returns>Returns the number of bytes read.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read clear text data from the input stream.
            </summary>
      <param name="outBuffer">The buffer to add data to.</param>
      <param name="offset">The offset to start adding data at.</param>
      <param name="length">The number of bytes to read.</param>
      <returns>Returns the number of bytes actually read.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
      <summary>
            Read a <see cref="T:System.Byte" /> from the input stream.
            </summary>
      <returns>Returns the byte read.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
      <summary>
            Read an <see cref="T:System.Int16" /> in little endian byte order.
            </summary>
      <returns>The short value read case to an int.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
      <summary>
            Read an <see cref="T:System.Int32" /> in little endian byte order.
            </summary>
      <returns>The int value read.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
      <summary>
            Read a <see cref="T:System.Int64" /> in little endian byte order.
            </summary>
      <returns>The long value read.</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
      <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform" /> to apply to any data.
            </summary>
      <remarks>Set this value to null to have no transform applied.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
      <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="!:Vuforia.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
      <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="!:Close" /> will close the underlying stream also.
            </summary>
      <remarks>
            The default value is true.
            </remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
      <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
      <param name="count">
            Number of bytes to skip
            </param>
      <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count">The number of bytes</paramref> to skip is less than or equal to zero.
            </exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
      <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
      <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
      <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
      <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
      <summary>
            A value representing the length of the stream in bytes.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
      <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
      <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
      <summary>
            Flushes the baseInputStream
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
      <param name="offset">The relative offset to seek to.</param>
      <param name="origin">The <see cref="T:System.IO.SeekOrigin" /> defining where to seek from.</param>
      <returns>The new position in the stream.</returns>
      <exception cref="T:System.NotSupportedException">Any access</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
      <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
      <param name="value">The new length value for the stream.</param>
      <exception cref="T:System.NotSupportedException">Any access</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
      <param name="buffer">Thew buffer containing data to write.</param>
      <param name="offset">The offset of the first byte to write.</param>
      <param name="count">The number of bytes to write.</param>
      <exception cref="T:System.NotSupportedException">Any access</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
      <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
      <param name="value">The byte to write.</param>
      <exception cref="T:System.NotSupportedException">Any access</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
      <param name="buffer">
            The array to read and decompress data into
            </param>
      <param name="offset">
            The offset indicating where the data should be placed
            </param>
      <param name="count">
            The number of bytes to decompress
            </param>
      <returns>The number of bytes read.  Zero signals the end of stream</returns>
      <exception cref="T:Vuforia.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow">
      <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br />
            Author of the original java version : John Leuner
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
      <summary>
            Write a byte to this output window
            </summary>
      <param name="value">value to write</param>
      <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
      <summary>
            Append a byte pattern already in the window itself
            </summary>
      <param name="length">length of pattern to copy</param>
      <param name="distance">distance from end of window pattern occurs</param>
      <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
      <summary>
            Copy from input manipulator to internal window
            </summary>
      <param name="input">source of data</param>
      <param name="length">length of data to copy</param>
      <returns>the number of bytes copied</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Copy dictionary to window
            </summary>
      <param name="dictionary">source dictionary</param>
      <param name="offset">offset of start in source dictionary</param>
      <param name="length">length of dictionary</param>
      <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
      <summary>
            Get remaining unfilled space in window
            </summary>
      <returns>Number of bytes left in window</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
      <summary>
            Get bytes available for output in window
            </summary>
      <returns>Number of bytes filled</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Copy contents of window to output
            </summary>
      <param name="output">buffer to copy to</param>
      <param name="offset">offset to start at</param>
      <param name="len">number of bytes to count</param>
      <returns>The number of bytes copied</returns>
      <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
      <summary>
            Reset by clearing window so <see cref="M:Vuforia.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
      <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
      <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
      <param name="bitCount">The number of bits to peek.</param>
      <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
      <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
      <param name="bitCount">The number of bits to drop.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
      <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)" /> followed by <see cref="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)" />, except for correct error handling.
            </summary>
      <param name="bitCount">The number of bits to retrieve.</param>
      <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
      <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
      <returns>
            the number of bits available.
            </returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
      <summary>
            Gets the number of bytes available.
            </summary>
      <returns>
            The number of bytes available.
            </returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
      <summary>
            Skips to the next byte boundary.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
      <summary>
            Returns true when SetInput can be called
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
      <param name="output">
            The buffer to copy bytes to.
            </param>
      <param name="offset">
            The offset in the buffer at which copying starts
            </param>
      <param name="length">
            The length to copy, 0 is allowed.
            </param>
      <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
      <summary>
            Resets state and empties internal buffers
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
      <param name="buffer">data to be input</param>
      <param name="offset">offset of first byte of input</param>
      <param name="count">number of bytes of input to add.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.FastZipEvents">
      <summary>
            FastZipEvents supports all events applicable to <see cref="T:Vuforia.SharpZipLib.Zip.FastZip">FastZip</see> operations.
            </summary>
    </member>
    <member name="E:Vuforia.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">
      <summary>
            Delegate to invoke when processing directories.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FastZipEvents.ProcessFile">
      <summary>
            Delegate to invoke when processing files.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FastZipEvents.Progress">
      <summary>
            Delegate to invoke during processing of files.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FastZipEvents.CompletedFile">
      <summary>
            Delegate to invoke when processing for a file has been completed.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">
      <summary>
            Delegate to invoke when processing directory failures.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FastZipEvents.FileFailure">
      <summary>
            Delegate to invoke when processing file failures.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
      <summary>
            Raise the <see cref="F:Vuforia.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">directory failure</see> event.
            </summary>
      <param name="directory">The directory causing the failure.</param>
      <param name="e">The exception for this event.</param>
      <returns>A boolean indicating if execution should continue or not.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZipEvents.OnFileFailure(System.String,System.Exception)">
      <summary>
            Fires the <see cref="F:Vuforia.SharpZipLib.Zip.FastZipEvents.FileFailure"> file failure handler delegate</see>.
            </summary>
      <param name="file">The file causing the failure.</param>
      <param name="e">The exception for this failure.</param>
      <returns>A boolean indicating if execution should continue or not.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZipEvents.OnProcessFile(System.String)">
      <summary>
            Fires the <see cref="F:Vuforia.SharpZipLib.Zip.FastZipEvents.ProcessFile">ProcessFile delegate</see>.
            </summary>
      <param name="file">The file being processed.</param>
      <returns>A boolean indicating if execution should continue or not.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZipEvents.OnCompletedFile(System.String)">
      <summary>
            Fires the <see cref="F:Vuforia.SharpZipLib.Zip.FastZipEvents.CompletedFile" /> delegate
            </summary>
      <param name="file">The file whose processing has been completed.</param>
      <returns>A boolean indicating if execution should continue or not.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
      <summary>
            Fires the <see cref="E:Vuforia.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">process directory</see> delegate.
            </summary>
      <param name="directory">The directory being processed.</param>
      <param name="hasMatchingFiles">Flag indicating if the directory has matching files as determined by the current filter.</param>
      <returns>A <see cref="T:System.Boolean" /> of true if the operation should continue; false otherwise.</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.FastZipEvents.ProgressInterval">
      <summary>
            The minimum timespan between <see cref="F:Vuforia.SharpZipLib.Zip.FastZipEvents.Progress" /> events.
            </summary>
      <value>The minimum period of time between <see cref="F:Vuforia.SharpZipLib.Zip.FastZipEvents.Progress" /> events.</value>
      <seealso cref="F:Vuforia.SharpZipLib.Zip.FastZipEvents.Progress" />
      <remarks>The default interval is three seconds.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.FastZip">
      <summary>
            FastZip provides facilities for creating and extracting zip files.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.FastZip.Overwrite">
      <summary>
            Defines the desired handling when overwriting files during extraction.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FastZip.Overwrite.Prompt">
      <summary>
            Prompt the user to confirm overwriting
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FastZip.Overwrite.Never">
      <summary>
            Never overwrite files.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FastZip.Overwrite.Always">
      <summary>
            Always overwrite files.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.FastZip.CreateEmptyDirectories">
      <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.FastZip.Password">
      <summary>
            Get / set the password value.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.FastZip.NameTransform">
      <summary>
            Get or set the <see cref="T:Vuforia.SharpZipLib.Core.INameTransform"></see> active when creating Zip files.
            </summary>
      <seealso cref="P:Vuforia.SharpZipLib.Zip.FastZip.EntryFactory">
      </seealso>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.FastZip.EntryFactory">
      <summary>
            Get or set the <see cref="T:Vuforia.SharpZipLib.Zip.IEntryFactory"></see> active when creating Zip files.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.FastZip.UseZip64">
      <summary>
            Gets or sets the setting for <see cref="P:Vuforia.SharpZipLib.Zip.FastZip.UseZip64">Zip64 handling when writing.</see></summary>
      <remarks>
            The default value is dynamic which is not backwards compatible with old
            programs and can cause problems with XP's built in compression which cant
            read Zip64 archives. However it does avoid the situation were a large file
            is added and cannot be completed correctly.
            NOTE: Setting the size for entries before they are added is the best solution!
            By default the EntryFactory used by FastZip will set fhe file size.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.FastZip.RestoreDateTimeOnExtract">
      <summary>
            Get/set a value indicating wether file dates and times should 
            be restored when extracting files from an archive.
            </summary>
      <remarks>The default value is false.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.FastZip.RestoreAttributesOnExtract">
      <summary>
            Get/set a value indicating wether file attributes should
            be restored during extract operations
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate">
      <summary>
            Delegate called when confirming overwriting of files.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
      <summary>
            Create a zip file.
            </summary>
      <param name="zipFileName">The name of the zip file to create.</param>
      <param name="sourceDirectory">The directory to source files from.</param>
      <param name="recurse">True to recurse directories, false for no recursion.</param>
      <param name="fileFilter">The <see cref="T:Vuforia.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
      <param name="directoryFilter">The <see cref="T:Vuforia.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
      <summary>
            Create a zip file/archive.
            </summary>
      <param name="zipFileName">The name of the zip file to create.</param>
      <param name="sourceDirectory">The directory to obtain files and directories from.</param>
      <param name="recurse">True to recurse directories, false for no recursion.</param>
      <param name="fileFilter">The file filter to apply.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZip.CreateZip(System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
      <summary>
            Create a zip archive sending output to the <paramref name="outputStream" /> passed.
            </summary>
      <param name="outputStream">The stream to write archive data to.</param>
      <param name="sourceDirectory">The directory to source files from.</param>
      <param name="recurse">True to recurse directories, false for no recursion.</param>
      <param name="fileFilter">The <see cref="T:Vuforia.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
      <param name="directoryFilter">The <see cref="T:Vuforia.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
      <remarks>The <paramref name="outputStream" /> is closed after creation.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,System.String)">
      <summary>
            Extract the contents of a zip file.
            </summary>
      <param name="zipFileName">The zip file to extract from.</param>
      <param name="targetDirectory">The directory to save extracted information in.</param>
      <param name="fileFilter">A filter to apply to files.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,Vuforia.SharpZipLib.Zip.FastZip.Overwrite,Vuforia.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean)">
      <summary>
            Extract the contents of a zip file.
            </summary>
      <param name="zipFileName">The zip file to extract from.</param>
      <param name="targetDirectory">The directory to save extracted information in.</param>
      <param name="overwrite">The style of <see cref="T:Vuforia.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
      <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
      <param name="fileFilter">A filter to apply to files.</param>
      <param name="directoryFilter">A filter to apply to directories.</param>
      <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.FastZip.ExtractZip(System.IO.Stream,System.String,Vuforia.SharpZipLib.Zip.FastZip.Overwrite,Vuforia.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Extract the contents of a zip file held in a stream.
            </summary>
      <param name="inputStream">The seekable input stream containing the zip to extract from.</param>
      <param name="targetDirectory">The directory to save extracted information in.</param>
      <param name="overwrite">The style of <see cref="T:Vuforia.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
      <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
      <param name="fileFilter">A filter to apply to files.</param>
      <param name="directoryFilter">A filter to apply to directories.</param>
      <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
      <param name="isStreamOwner">Flag indicating whether the inputStream will be closed by this method.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.IEntryFactory">
      <summary>
            Defines factory methods for creating new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry"></see> values.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String)">
      <summary>
            Create a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> for a file given its name
            </summary>
      <param name="fileName">The name of the file to create an entry for.</param>
      <returns>Returns a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName" /> passed.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String,System.Boolean)">
      <summary>
            Create a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> for a file given its name
            </summary>
      <param name="fileName">The name of the file to create an entry for.</param>
      <param name="useFileSystem">If true get details from the file system if the file exists.</param>
      <returns>Returns a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName" /> passed.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String,System.String,System.Boolean)">
      <summary>
            Create a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> for a file given its actual name and optional override name
            </summary>
      <param name="fileName">The name of the file to create an entry for.</param>
      <param name="entryName">An alternative name to be used for the new entry. Null if not applicable.</param>
      <param name="useFileSystem">If true get details from the file system if the file exists.</param>
      <returns>Returns a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName" /> passed.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String)">
      <summary>
            Create a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> for a directory given its name
            </summary>
      <param name="directoryName">The name of the directory to create an entry for.</param>
      <returns>Returns a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName" /> passed.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
      <summary>
            Create a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> for a directory given its name
            </summary>
      <param name="directoryName">The name of the directory to create an entry for.</param>
      <param name="useFileSystem">If true get details from the file system for this directory if it exists.</param>
      <returns>Returns a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName" /> passed.</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.IEntryFactory.NameTransform">
      <summary>
            Get/set the <see cref="T:Vuforia.SharpZipLib.Core.INameTransform"></see> applicable.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.WindowsNameTransform">
      <summary>
            WindowsNameTransform transforms <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /> names to windows compatible ones.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.WindowsNameTransform.BaseDirectory">
      <summary>
            Gets or sets a value containing the target directory to prefix values with.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.WindowsNameTransform.TrimIncomingPaths">
      <summary>
            Gets or sets a value indicating wether paths on incoming values should be removed.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.WindowsNameTransform.TransformDirectory(System.String)">
      <summary>
            Transform a Zip directory name to a windows directory name.
            </summary>
      <param name="name">The directory name to transform.</param>
      <returns>The transformed name.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.WindowsNameTransform.TransformFile(System.String)">
      <summary>
            Transform a Zip format file name to a windows style one.
            </summary>
      <param name="name">The file name to transform.</param>
      <returns>The transformed name.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.WindowsNameTransform.IsValidName(System.String)">
      <summary>
            Test a name to see if it is a valid name for a windows filename as extracted from a Zip archive.
            </summary>
      <param name="name">The name to test.</param>
      <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
      <remarks>The filename isnt a true windows path in some fundamental ways like no absolute paths, no rooted paths etc.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.WindowsNameTransform.MakeValidName(System.String,System.Char)">
      <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
      <param name="name">The name to make valid</param>
      <param name="replacement">The replacement character to use for any invalid characters.</param>
      <returns>Returns a valid name</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.WindowsNameTransform.Replacement">
      <summary>
            Gets or set the character to replace invalid characters during transformations.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.UseZip64">
      <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.UseZip64.Off">
      <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
      <remarks>An entry can have this overridden if required <see cref="M:Vuforia.SharpZipLib.Zip.ZipEntry.ForceZip64"></see></remarks>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.UseZip64.On">
      <summary>
            Zip64 should always be used.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.UseZip64.Dynamic">
      <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.CompressionMethod">
      <summary>
            The kind of compression used for an entry in an archive
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.CompressionMethod.Stored">
      <summary>
            A direct copy of the file contents is held in the archive
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.CompressionMethod.Deflated">
      <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.CompressionMethod.Deflate64">
      <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.CompressionMethod.BZip2">
      <summary>
            BZip2 compression. Not supported by #Zip.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.CompressionMethod.WinZipAES">
      <summary>
            WinZip special for AES encryption, Now supported by #Zip.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm">
      <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.None">
      <summary>
            No encryption has been used.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.PkzipClassic">
      <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.Des">
      <summary>
            DES encryption has been used.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.RC2">
      <summary>
            RC2 encryption has been used for encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes168">
      <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes112">
      <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.Aes128">
      <summary>
            AES 128 has been used for encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.Aes192">
      <summary>
            AES 192 has been used for encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.Aes256">
      <summary>
            AES 256 has been used for encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.RC2Corrected">
      <summary>
            RC2 corrected has been used for encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.Blowfish">
      <summary>
            Blowfish has been used for encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.Twofish">
      <summary>
            Twofish has been used for encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.RC4">
      <summary>
            RC4 has been used for encryption.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.EncryptionAlgorithm.Unknown">
      <summary>
            An unknown algorithm has been used for encryption.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.GeneralBitFlags">
      <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
      <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.Method">
      <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
      <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.ReservedPKware4">
      <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.Patched">
      <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
      <summary>
            Bit 6 if set indicates strong encryption has been used for this entry.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.Unused7">
      <summary>
            Bit 7 is currently unused
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.Unused8">
      <summary>
            Bit 8 is currently unused
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.Unused9">
      <summary>
            Bit 9 is currently unused
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.Unused10">
      <summary>
            Bit 10 is currently unused
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.UnicodeText">
      <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
      <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
      <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
      <remarks>
            Used when encrypting the central directory contents.
            </remarks>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware14">
      <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware15">
      <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipConstants">
      <summary>
            This class contains constants used for Zip format files
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.VersionMadeBy">
      <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
      <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.CanDecompress" />.
            </remarks>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
      <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
      <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:Vuforia.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.VersionStrongEncryption">
      <summary>
            The minimum version required to support strong encryption
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
      <summary>
            The minimum version required to support strong encryption
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.VERSION_AES">
      <summary>
            Version indicating AES encryption
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.VersionZip64">
      <summary>
            The version required for Zip64 extensions (4.5 or higher)
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.LocalHeaderBaseSize">
      <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.LOCHDR">
      <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.Zip64DataDescriptorSize">
      <summary>
            Size of Zip64 data descriptor
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.DataDescriptorSize">
      <summary>
            Size of data descriptor
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.EXTHDR">
      <summary>
            Size of data descriptor
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CentralHeaderBaseSize">
      <summary>
            Size of central header entry (excluding variable fields)
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CENHDR">
      <summary>
            Size of central header entry
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.EndOfCentralRecordBaseSize">
      <summary>
            Size of end of central record (excluding variable fields)
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.ENDHDR">
      <summary>
            Size of end of central record (excluding variable fields)
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CryptoHeaderSize">
      <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
      <summary>
            Size of cryptographic header stored before entry data
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.LocalHeaderSignature">
      <summary>
            Signature for local entry header
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.LOCSIG">
      <summary>
            Signature for local entry header
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.SpanningSignature">
      <summary>
            Signature for spanning entry
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
      <summary>
            Signature for spanning entry
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.SpanningTempSignature">
      <summary>
            Signature for temporary spanning entry
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
      <summary>
            Signature for temporary spanning entry
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.DataDescriptorSignature">
      <summary>
            Signature for data descriptor
            </summary>
      <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.EXTSIG">
      <summary>
            Signature for data descriptor
            </summary>
      <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CENSIG">
      <summary>
            Signature for central header
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CentralHeaderSignature">
      <summary>
            Signature for central header
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
      <summary>
            Signature for Zip64 central file header
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CENSIG64">
      <summary>
            Signature for Zip64 central file header
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
      <summary>
            Signature for Zip64 central directory locator
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.ArchiveExtraDataSignature">
      <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CentralHeaderDigitalSignature">
      <summary>
            Central header digitial signature
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
      <summary>
            Central header digitial signature
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.EndOfCentralDirectorySignature">
      <summary>
            End of central directory record signature
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipConstants.ENDSIG">
      <summary>
            End of central directory record signature
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
      <summary>
            Default encoding used for string conversion.  0 gives the default system OEM code page.
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
      <summary>
            Convert a portion of a byte array to a string.
            </summary>
      <param name="data">
            Data to convert to string
            </param>
      <param name="count">
            Number of bytes to convert starting from index 0
            </param>
      <returns>
            data[0]..data[count - 1] converted to a string
            </returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
      <summary>
            Convert a byte array to string
            </summary>
      <param name="data">
            Byte array to convert
            </param>
      <returns>
        <paramref name="data">data</paramref>converted to a string
            </returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Convert a byte array to string
            </summary>
      <param name="flags">The applicable general purpose bits flags</param>
      <param name="data">
            Byte array to convert
            </param>
      <param name="count">The number of bytes to convert.</param>
      <returns>
        <paramref name="data">data</paramref>converted to a string
            </returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
      <summary>
            Convert a byte array to string
            </summary>
      <param name="data">
            Byte array to convert
            </param>
      <param name="flags">The applicable general purpose bits flags</param>
      <returns>
        <paramref name="data">data</paramref>converted to a string
            </returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
      <summary>
            Convert a string to a byte array
            </summary>
      <param name="str">
            String to convert to an array
            </param>
      <returns>Converted array</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
      <summary>
            Convert a string to a byte array
            </summary>
      <param name="flags">The applicable <see cref="T:Vuforia.SharpZipLib.Zip.GeneralBitFlags">general purpose bits flags</see></param>
      <param name="str">
            String to convert to an array
            </param>
      <returns>Converted array</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.HostSystemID">
      <summary>
            Defines known values for the <see cref="T:Vuforia.SharpZipLib.Zip.HostSystemID" /> property.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.Msdos">
      <summary>
            Host system = MSDOS
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.Amiga">
      <summary>
            Host system = Amiga
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.OpenVms">
      <summary>
            Host system = Open VMS
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.Unix">
      <summary>
            Host system = Unix
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.VMCms">
      <summary>
            Host system = VMCms
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.AtariST">
      <summary>
            Host system = Atari ST
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.OS2">
      <summary>
            Host system = OS2
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.Macintosh">
      <summary>
            Host system = Macintosh
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.ZSystem">
      <summary>
            Host system = ZSystem
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.Cpm">
      <summary>
            Host system = Cpm
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.WindowsNT">
      <summary>
            Host system = Windows NT
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.MVS">
      <summary>
            Host system = MVS
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.Vse">
      <summary>
            Host system = VSE
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.AcornRisc">
      <summary>
            Host system = Acorn RISC
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.Vfat">
      <summary>
            Host system = VFAT
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.AlternateMvs">
      <summary>
            Host system = Alternate MVS
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.BeOS">
      <summary>
            Host system = BEOS
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.Tandem">
      <summary>
            Host system = Tandem
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.OS400">
      <summary>
            Host system = OS400
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.OSX">
      <summary>
            Host system = OSX
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.HostSystemID.WinZipAES">
      <summary>
            Host system = WinZIP AES
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipEntry">
      <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br /><br />Author of the original java version : Jochen Hoenicke
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.HasCrc">
      <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.IsCrypted">
      <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.Flags">flags</see></summary>
      <remarks>This is an assistant that interprets the <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.IsUnicodeText">
      <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in <a href="http://www.unicode.org">unicode UTF8</a>.
            </summary>
      <remarks>This is an assistant that interprets the <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.Flags">
      <summary>
            Get/Set general purpose bit flag for entry
            </summary>
      <remarks>
            General purpose bit flag<br /><br />
            Bit 0: If set, indicates the file is encrypted<br />
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br />
            Imploding:<br />
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br />
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br /><br />
            Deflating:<br />
              Bit 2    Bit 1<br />
                0        0       Normal compression was used<br />
                0        1       Maximum compression was used<br />
                1        0       Fast compression was used<br />
                1        1       Super fast compression was used<br /><br />
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br />
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br />
            Bit 5: If set indicates the file contains compressed patch data<br />
            Bit 6: If set indicates strong encryption was used.<br />
            Bit 7-10: Unused or reserved<br />
            Bit 11: If set the name and comments for this entry are in <a href="http://www.unicode.org">unicode</a>.<br />
            Bit 12-15: Unused or reserved<br /></remarks>
      <seealso cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.IsUnicodeText">
      </seealso>
      <seealso cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.IsCrypted">
      </seealso>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
      <summary>
            Get/Set index of this entry in Zip file
            </summary>
      <remarks>This is only valid when the entry is part of a <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile"></see></remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.Offset">
      <summary>
            Get/set offset for use in central header
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
      <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
      <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.IsDOSEntry">
      <summary>
            Get a value indicating this entry is for a DOS/Windows system.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.HostSystem">
      <summary>
            Gets the compatability information for the <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
      <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table"><item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item><item>1 - Amiga</item><item>2 - OpenVMS</item><item>3 - Unix</item><item>4 - VM/CMS</item><item>5 - Atari ST</item><item>6 - OS/2 HPFS</item><item>7 - Macintosh</item><item>8 - Z-System</item><item>9 - CP/M</item><item>10 - Windows NTFS</item><item>11 - MVS (OS/390 - Z/OS)</item><item>12 - VSE</item><item>13 - Acorn Risc</item><item>14 - VFAT</item><item>15 - Alternate MVS</item><item>16 - BeOS</item><item>17 - Tandem</item><item>18 - OS/400</item><item>19 - OS/X (Darwin)</item><item>99 - WinZip AES</item><item>remainder - unused</item></list></remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.Version">
      <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>
      <remarks>
            Minimum features are defined as:<br />
            1.0 - Default value<br />
            1.1 - File is a volume label<br />
            2.0 - File is a folder/directory<br />
            2.0 - File is compressed using Deflate compression<br />
            2.0 - File is encrypted using traditional encryption<br />
            2.1 - File is compressed using Deflate64<br />
            2.5 - File is compressed using PKWARE DCL Implode<br />
            2.7 - File is a patch data set<br />
            4.5 - File uses Zip64 format extensions<br />
            4.6 - File is compressed using BZIP2 compression<br />
            5.0 - File is encrypted using DES<br />
            5.0 - File is encrypted using 3DES<br />
            5.0 - File is encrypted using original RC2 encryption<br />
            5.0 - File is encrypted using RC4 encryption<br />
            5.1 - File is encrypted using AES encryption<br />
            5.1 - File is encrypted using corrected RC2 encryption<br />
            5.1 - File is encrypted using corrected RC2-64 encryption<br />
            6.1 - File is encrypted using non-OAEP key wrapping<br />
            6.2 - Central directory encryption (not confirmed yet)<br />
            6.3 - File is compressed using LZMA<br />
            6.3 - File is compressed using PPMD+<br />
            6.3 - File is encrypted using Blowfish<br />
            6.3 - File is encrypted using Twofish<br /></remarks>
      <seealso cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.CanDecompress">
      </seealso>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.CanDecompress">
      <summary>
            Get a value indicating whether this entry can be decompressed by the library.
            </summary>
      <remarks>This is based on the <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.Version"></see> and 
            wether the <see cref="M:Vuforia.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">compression method</see> is supported.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntry.ForceZip64">
      <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntry.IsZip64Forced">
      <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
      <returns>A <see cref="T:System.Boolean" /> value of true if Zip64 extensions have been forced on; false if not.</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.LocalHeaderRequiresZip64">
      <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
      <value>A <see cref="T:System.Boolean" /> value of true if a local header requires Zip64 extensions; false if not.</value>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.CentralHeaderRequiresZip64">
      <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.DosTime">
      <summary>
            Get/Set DosTime value.
            </summary>
      <remarks>
            The MS-DOS date format can only represent dates between 1/1/1980 and 12/31/2107.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.DateTime">
      <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
      <remarks>
            The <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.DosTime"></see> property is updated to match this as far as possible.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.Name">
      <summary>
             Returns the entry name.
             </summary>
      <remarks>
             The unix naming convention is followed.
             Path components in the entry should always separated by forward slashes ('/').
             Dos device names like C: should also be removed.
             See the <see cref="T:Vuforia.SharpZipLib.Zip.ZipNameTransform" /> class, or <see cref="M:Vuforia.SharpZipLib.Zip.ZipEntry.CleanName(System.String)" /></remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.Size">
      <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
      <returns>
            The size or -1 if unknown.
            </returns>
      <remarks>Setting the size before adding an entry to an archive can help
            avoid compatability problems with some archivers which dont understand Zip64 extensions.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.CompressedSize">
      <summary>
            Gets/Sets the size of the compressed data.
            </summary>
      <returns>
            The compressed entry size or -1 if unknown.
            </returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.Crc">
      <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
      <returns>
            The crc value or -1 if unknown.
            </returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.CompressionMethod">
      <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
      <returns>
            The compression method for this entry
            </returns>
      <see cref="F:Vuforia.SharpZipLib.Zip.CompressionMethod.Deflated" />
      <see cref="F:Vuforia.SharpZipLib.Zip.CompressionMethod.Stored" />
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.ExtraData">
      <summary>
            Gets/Sets the extra data.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
      <returns>
            Extra data or null if not set.
            </returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.AESKeySize">
      <summary>
            For AES encrypted files returns or sets the number of bits of encryption (128, 192 or 256).
            When setting, only 0 (off), 128 or 256 is supported.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.Comment">
      <summary>
            Gets/Sets the entry comment.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
      <returns>
            The comment or null if not set.
            </returns>
      <remarks>
            A comment is only available for entries when read via the <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /> class.
            The <see cref="T:Vuforia.SharpZipLib.Zip.ZipInputStream" /> class doesnt have the comment data available.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.IsDirectory">
      <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
      <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntry.IsFile">
      <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
      <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">
      <summary>
            Test entry to see if data can be extracted.
            </summary>
      <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntry.Clone">
      <summary>
            Creates a copy of this zip entry.
            </summary>
      <returns>An <see cref="T:System.Object" /> that is a copy of the current instance.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntry.ToString">
      <summary>
            Gets a string representation of this ZipEntry.
            </summary>
      <returns>A readable textual representation of this <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /></returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported(Vuforia.SharpZipLib.Zip.CompressionMethod)">
      <summary>
            Test a <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
      <param name="method">The compression method to test.</param>
      <returns>Returns true if the compression method is supported; false otherwise</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
      <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
      <param name="name">The name to clean</param>
      <returns>The 'cleaned' name.</returns>
      <remarks>
            The <seealso cref="T:Vuforia.SharpZipLib.Zip.ZipNameTransform">Zip name transform</seealso> class is more flexible.
            </remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipEntryFactory">
      <summary>
            Basic implementation of <see cref="T:Vuforia.SharpZipLib.Zip.IEntryFactory"></see></summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting">
      <summary>
            Defines the possible values to be used for the <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.DateTime" />.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTime">
      <summary>
            Use the recorded LastWriteTime value for the file.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTimeUtc">
      <summary>
            Use the recorded LastWriteTimeUtc value for the file
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTime">
      <summary>
            Use the recorded CreateTime value for the file.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTimeUtc">
      <summary>
            Use the recorded CreateTimeUtc value for the file.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTime">
      <summary>
            Use the recorded LastAccessTime value for the file.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTimeUtc">
      <summary>
            Use the recorded LastAccessTimeUtc value for the file.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed">
      <summary>
            Use a fixed value.
            </summary>
      <remarks>The actual <see cref="T:System.DateTime" /> value used can be
            specified via the <see cref="M:Vuforia.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)" /> constructor or 
            using the <see cref="M:Vuforia.SharpZipLib.Zip.ZipEntryFactory.#ctor(Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)" /> with the setting set
            to <see cref="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed" /> which will use the <see cref="T:System.DateTime" /> when this class was constructed.
            The <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime" /> property can also be used to set this value.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntryFactory.NameTransform">
      <summary>
            Get / set the <see cref="T:Vuforia.SharpZipLib.Core.INameTransform" /> to be used when creating new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> values.
            </summary>
      <remarks>
            Setting this property to null will cause a default <see cref="T:Vuforia.SharpZipLib.Zip.ZipNameTransform">name transform</see> to be used.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntryFactory.Setting">
      <summary>
            Get / set the <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting" /> in use.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime">
      <summary>
            Get / set the <see cref="T:System.DateTime" /> value to use when <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntryFactory.Setting" /> is set to <see cref="F:Vuforia.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed" /></summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntryFactory.GetAttributes">
      <summary>
            A bitmask defining the attributes to be retrieved from the actual file.
            </summary>
      <remarks>The default is to get all possible attributes from the actual file.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntryFactory.SetAttributes">
      <summary>
            A bitmask defining which attributes are to be set on.
            </summary>
      <remarks>By default no attributes are set on.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipEntryFactory.IsUnicodeText">
      <summary>
            Get set a value indicating wether unidoce text should be set on.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String)">
      <summary>
            Make a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> for a file.
            </summary>
      <param name="fileName">The name of the file to create a new entry for.</param>
      <returns>Returns a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> based on the <paramref name="fileName" />.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String,System.Boolean)">
      <summary>
            Make a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> for a file.
            </summary>
      <param name="fileName">The name of the file to create a new entry for.</param>
      <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
      <returns>Returns a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> based on the <paramref name="fileName" />.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String,System.String,System.Boolean)">
      <summary>
            Make a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> from a name.
            </summary>
      <param name="fileName">The name of the file to create a new entry for.</param>
      <param name="entryName">An alternative name to be used for the new entry. Null if not applicable.</param>
      <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
      <returns>Returns a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> based on the <paramref name="fileName" />.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String)">
      <summary>
            Make a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry"></see> for a directory.
            </summary>
      <param name="directoryName">The raw untransformed name for the new directory</param>
      <returns>Returns a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry"></see> representing a directory.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
      <summary>
            Make a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry"></see> for a directory.
            </summary>
      <param name="directoryName">The raw untransformed name for the new directory</param>
      <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
      <returns>Returns a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry"></see> representing a directory.</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipException">
      <summary>
            ZipException represents exceptions specific to Zip classes and code.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ITaggedData">
      <summary>
            ExtraData tagged value interface.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ITaggedData.TagID">
      <summary>
            Get the ID for this tagged data value.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ITaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Set the contents of this instance from the data passed.
            </summary>
      <param name="data">The data to extract contents from.</param>
      <param name="offset">The offset to begin extracting data from.</param>
      <param name="count">The number of bytes to extract.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ITaggedData.GetData">
      <summary>
            Get the data representing this instance.
            </summary>
      <returns>Returns the data for this instance.</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.RawTaggedData">
      <summary>
            A raw binary tagged value
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.RawTaggedData.TagID">
      <summary>
            Get the ID for this tagged data value.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.RawTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Set the data from the raw values provided.
            </summary>
      <param name="data">The raw data to extract values from.</param>
      <param name="offset">The index to start extracting values from.</param>
      <param name="count">The number of bytes available.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.RawTaggedData.GetData">
      <summary>
            Get the binary data representing this instance.
            </summary>
      <returns>The raw binary data representing this instance.</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.RawTaggedData.Data">
      <summary>
            Get /set the binary data representing this instance.
            </summary>
      <returns>The raw binary data representing this instance.</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ExtendedUnixData">
      <summary>
            Class representing extended unix date time values.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ExtendedUnixData.Flags">
      <summary>
            Flags indicate which values are included in this instance.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ExtendedUnixData.Flags.ModificationTime">
      <summary>
            The modification time is included
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ExtendedUnixData.Flags.AccessTime">
      <summary>
            The access time is included
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ExtendedUnixData.Flags.CreateTime">
      <summary>
            The create time is included.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ExtendedUnixData.TagID">
      <summary>
            Get the ID
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ExtendedUnixData.SetData(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Set the data from the raw values provided.
            </summary>
      <param name="data">The raw data to extract values from.</param>
      <param name="index">The index to start extracting values from.</param>
      <param name="count">The number of bytes available.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ExtendedUnixData.GetData">
      <summary>
            Get the binary data representing this instance.
            </summary>
      <returns>The raw binary data representing this instance.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
      <summary>
            Test a <see cref="T:System.DateTime"> value to see if is valid and can be represented here.</see></summary>
      <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
      <returns>Returns true if the value is valid and can be represented; false if not.</returns>
      <remarks>The standard Unix time is a signed integer data type, directly encoding the Unix time number,
            which is the number of seconds since 1970-01-01.
            Being 32 bits means the values here cover a range of about 136 years.
            The minimum representable time is 1901-12-13 20:45:52,
            and the maximum representable time is 2038-01-19 03:14:07.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ExtendedUnixData.ModificationTime">
      <summary>
            Get /set the Modification Time
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
      </seealso>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ExtendedUnixData.AccessTime">
      <summary>
            Get / set the Access Time
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
      </seealso>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ExtendedUnixData.CreateTime">
      <summary>
            Get / Set the Create Time
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
      </seealso>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ExtendedUnixData.Include">
      <summary>
            Get/set the <see cref="T:Vuforia.SharpZipLib.Zip.ExtendedUnixData.Flags">values</see> to include.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.NTTaggedData">
      <summary>
            Class handling NT date time values.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.NTTaggedData.TagID">
      <summary>
            Get the ID for this tagged data value.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.NTTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Set the data from the raw values provided.
            </summary>
      <param name="data">The raw data to extract values from.</param>
      <param name="index">The index to start extracting values from.</param>
      <param name="count">The number of bytes available.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.NTTaggedData.GetData">
      <summary>
            Get the binary data representing this instance.
            </summary>
      <returns>The raw binary data representing this instance.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.NTTaggedData.IsValidValue(System.DateTime)">
      <summary>
            Test a <see cref="T:System.DateTime"> valuie to see if is valid and can be represented here.</see></summary>
      <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
      <returns>Returns true if the value is valid and can be represented; false if not.</returns>
      <remarks>
            NTFS filetimes are 64-bit unsigned integers, stored in Intel
            (least significant byte first) byte order. They determine the
            number of 1.0E-07 seconds (1/10th microseconds!) past WinNT "epoch",
            which is "01-Jan-1601 00:00:00 UTC". 28 May 60056 is the upper limit
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.NTTaggedData.LastModificationTime">
      <summary>
            Get/set the <see cref="T:System.DateTime">last modification time</see>.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.NTTaggedData.CreateTime">
      <summary>
            Get /set the <see cref="T:System.DateTime">create time</see></summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.NTTaggedData.LastAccessTime">
      <summary>
            Get /set the <see cref="T:System.DateTime">last access time</see>.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipExtraData">
      <summary>
            A class to handle the extra data field for Zip entries
            </summary>
      <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.GetEntryData">
      <summary>
            Get the raw extra data value
            </summary>
      <returns>Returns the raw byte[] extra data this instance represents.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Clear">
      <summary>
            Clear the stored data.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipExtraData.Length">
      <summary>
            Gets the current extra data length.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.GetStreamForTag(System.Int32)">
      <summary>
            Get a read-only <see cref="T:System.IO.Stream" /> for the associated tag.
            </summary>
      <param name="tag">The tag to locate data for.</param>
      <returns>Returns a <see cref="T:System.IO.Stream" /> containing tag data or null if no tag was found.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.GetData``1">
      <summary>
            Get the <see cref="T:Vuforia.SharpZipLib.Zip.ITaggedData">tagged data</see> for a tag.
            </summary>
      <typeparam name="T">The tag to search for.</typeparam>
      <returns>Returns a <see cref="T:Vuforia.SharpZipLib.Zip.ITaggedData">tagged value</see> or null if none found.</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipExtraData.ValueLength">
      <summary>
            Get the length of the last value found by <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)" /></summary>
      <remarks>This is only valid if <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)" /> has previously returned true.</remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipExtraData.CurrentReadIndex">
      <summary>
            Get the index for the current read value.
            </summary>
      <remarks>This is only valid if <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)" /> has previously returned true.
            Initially the result will be the index of the first byte of actual data.  The value is updated after calls to
            <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.ReadInt" />, <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.ReadShort" /> and <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.ReadLong" />. </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipExtraData.UnreadCount">
      <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">
      <summary>
            Find an extra data value
            </summary>
      <param name="headerID">The identifier for the value to find.</param>
      <returns>Returns true if the value was found; false otherwise.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddEntry(Vuforia.SharpZipLib.Zip.ITaggedData)">
      <summary>
            Add a new entry to extra data.
            </summary>
      <param name="taggedData">The <see cref="T:Vuforia.SharpZipLib.Zip.ITaggedData" /> value to add.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
      <summary>
            Add a new entry to extra data
            </summary>
      <param name="headerID">The ID for this entry.</param>
      <param name="fieldData">The data to add.</param>
      <remarks>If the ID already exists its contents are replaced.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.StartNewEntry">
      <summary>
            Start adding a new entry.
            </summary>
      <remarks>Add data using <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])" />, <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)" />, <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)" />, or <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)" />.
            The new entry is completed and actually added by calling <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)" /></remarks>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddEntry(Vuforia.SharpZipLib.Zip.ITaggedData)" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)">
      <summary>
            Add entry data added since <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.StartNewEntry" /> using the ID passed.
            </summary>
      <param name="headerID">The identifier to use for this entry.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte)">
      <summary>
            Add a byte of data to the pending new entry.
            </summary>
      <param name="data">The byte to add.</param>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.StartNewEntry" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])">
      <summary>
            Add data to a pending new entry.
            </summary>
      <param name="data">The data to add.</param>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.StartNewEntry" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)">
      <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
      <param name="toAdd">The data to add.</param>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.StartNewEntry" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)">
      <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
      <param name="toAdd">The data to add.</param>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.StartNewEntry" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)">
      <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
      <param name="toAdd">The data to add.</param>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.StartNewEntry" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Delete(System.Int32)">
      <summary>
            Delete an extra data field.
            </summary>
      <param name="headerID">The identifier of the field to delete.</param>
      <returns>Returns true if the field was found and deleted.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.ReadLong">
      <summary>
            Read a long in little endian form from the last <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
      <returns>Returns the long value read.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.ReadInt">
      <summary>
            Read an integer in little endian form from the last <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
      <returns>Returns the integer read.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.ReadShort">
      <summary>
            Read a short value in little endian form from the last <see cref="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
      <returns>Returns the short value read.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.ReadByte">
      <summary>
            Read a byte from an extra data
            </summary>
      <returns>The byte value read or -1 if the end of data has been reached.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Skip(System.Int32)">
      <summary>
            Skip data during reading.
            </summary>
      <param name="amount">The number of bytes to skip.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipExtraData.Dispose">
      <summary>
            Dispose of this instance.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.KeysRequiredEventArgs">
      <summary>
            Arguments used with KeysRequiredEvent
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.KeysRequiredEventArgs.FileName">
      <summary>
            Gets the name of the file for which keys are required.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.KeysRequiredEventArgs.Key">
      <summary>
            Gets or sets the key value
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.TestStrategy">
      <summary>
            The strategy to apply to testing.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.TestStrategy.FindFirstError">
      <summary>
            Find the first error only.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.TestStrategy.FindAllErrors">
      <summary>
            Find all possible errors.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.TestOperation">
      <summary>
            The operation in progress reported by a <see cref="T:Vuforia.SharpZipLib.Zip.ZipTestResultHandler" /> during testing.
            </summary>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.TestOperation.Initialising">
      <summary>
            Setting up testing.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.TestOperation.EntryHeader">
      <summary>
            Testing an individual entries header
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.TestOperation.EntryData">
      <summary>
            Testing an individual entries data
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.TestOperation.EntryComplete">
      <summary>
            Testing an individual entry has completed.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.TestOperation.MiscellaneousTests">
      <summary>
            Running miscellaneous tests
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.TestOperation.Complete">
      <summary>
            Testing is complete
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.TestStatus">
      <summary>
            Status returned returned by <see cref="T:Vuforia.SharpZipLib.Zip.ZipTestResultHandler" /> during testing.
            </summary>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.TestStatus.Operation">
      <summary>
            Get the current <see cref="T:Vuforia.SharpZipLib.Zip.TestOperation" /> in progress.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.TestStatus.File">
      <summary>
            Get the <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /> this status is applicable to.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.TestStatus.Entry">
      <summary>
            Get the current/last entry tested.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.TestStatus.ErrorCount">
      <summary>
            Get the number of errors detected so far.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.TestStatus.BytesTested">
      <summary>
            Get the number of bytes tested so far for the current entry.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.TestStatus.EntryValid">
      <summary>
            Get a value indicating wether the last entry test was valid.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipTestResultHandler">
      <summary>
            Delegate invoked during <see cref="M:Vuforia.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,Vuforia.SharpZipLib.Zip.TestStrategy,Vuforia.SharpZipLib.Zip.ZipTestResultHandler)">testing</see> if supplied indicating current progress and status.
            </summary>
      <remarks>If the message is non-null an error has occured.  If the message is null
            the operation as found in <see cref="T:Vuforia.SharpZipLib.Zip.TestStatus">status</see> has started.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.FileUpdateMode">
      <summary>
            The possible ways of <see cref="M:Vuforia.SharpZipLib.Zip.ZipFile.CommitUpdate">applying updates</see> to an archive.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FileUpdateMode.Safe">
      <summary>
            Perform all updates on temporary files ensuring that the original file is saved.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.FileUpdateMode.Direct">
      <summary>
            Update the archive directly, which is faster but less safe.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipFile">
      <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            You can also update the archive adding or deleting entries.
            
            This class is thread safe for input:  You can open input streams for arbitrary
            entries in different threads.
            <br /><br />Author of the original java version : Jochen Hoenicke
            </summary>
      <example>
        <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using Vuforia.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		using (ZipFile zFile = new ZipFile(args[0])) {
            			Console.WriteLine("Listing of : " + zFile.Name);
            			Console.WriteLine("");
            			Console.WriteLine("Raw Size    Size      Date     Time     Name");
            			Console.WriteLine("--------  --------  --------  ------  ---------");
            			foreach (ZipEntry e in zFile) {
            				if ( e.IsFile ) {
            					DateTime d = e.DateTime;
            					Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            						d.ToString("dd-MM-yy"), d.ToString("HH:mm"),
            						e.Name);
            				}
            			}
            		}
            	}
            }
            </code>
      </example>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipFile.KeysRequiredEventHandler">
      <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
    </member>
    <member name="F:Vuforia.SharpZipLib.Zip.ZipFile.KeysRequired">
      <summary>
            Event handler for handling encryption keys.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.Password">
      <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
      <remarks>Set to null if no password is required.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Close">
      <summary>
            Closes the ZipFile.  If the stream is <see cref="P:Vuforia.SharpZipLib.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
      <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Create(System.String)">
      <summary>
            Create a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /> whose data will be stored in a file.
            </summary>
      <param name="fileName">The name of the archive to create.</param>
      <returns>Returns the newly created <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName">
        </paramref> is null</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Create(System.IO.Stream)">
      <summary>
            Create a new <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /> whose data will be stored on a stream.
            </summary>
      <param name="outStream">The stream providing data storage.</param>
      <returns>Returns the newly created <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outStream"> is null</paramref>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outStream"> doesnt support writing.</paramref>
      </exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.IsStreamOwner">
      <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:Vuforia.SharpZipLib.Zip.ZipFile.Close">Close</see> is called.
            </summary>
      <remarks>
            The default value is true in all cases.
            </remarks>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.IsEmbeddedArchive">
      <summary>
            Get a value indicating wether
            this archive is embedded in another file or not.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.IsNewArchive">
      <summary>
            Get a value indicating that this archive is a new one.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.ZipFileComment">
      <summary>
            Gets the comment for the zip file.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.Name">
      <summary>
            Gets the name of this zip file.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.Size">
      <summary>
            Gets the number of entries in this zip file.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.Count">
      <summary>
            Get the number of entries contained in this <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" />.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
      <summary>
            Indexer property for ZipEntries
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.GetEnumerator">
      <summary>
            Gets an enumerator for the Zip entries in this Zip file.
            </summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> for this archive.</returns>
      <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
      <summary>
            Return the index of the entry with a matching name
            </summary>
      <param name="name">Entry name to find</param>
      <param name="ignoreCase">If true the comparison is case insensitive</param>
      <returns>The index position of the matching entry or -1 if not found</returns>
      <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
      <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
      <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
      <returns>
            A clone of the zip entry, or null if no entry with that name exists.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.GetInputStream(Vuforia.SharpZipLib.Zip.ZipEntry)">
      <summary>
            Gets an input stream for reading the given zip entry data in an uncompressed form.
            Normally the <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> should be an entry returned by GetEntry().
            </summary>
      <param name="entry">The <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> to obtain a data <see cref="T:System.IO.Stream" /> for</param>
      <returns>An input <see cref="T:System.IO.Stream" /> containing data for this <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /></returns>
      <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
      <exception cref="T:Vuforia.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
      <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int64)">
      <summary>
            Creates an input stream reading a zip entry
            </summary>
      <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
      <returns>
            An input <see cref="T:System.IO.Stream" /> containing data for this <paramref name="entryIndex" /></returns>
      <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
      <exception cref="T:Vuforia.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
      <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">
      <summary>
            Test an archive for integrity/validity
            </summary>
      <param name="testData">Perform low level data Crc check</param>
      <returns>true if all tests pass, false otherwise</returns>
      <remarks>Testing will terminate on the first error found.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,Vuforia.SharpZipLib.Zip.TestStrategy,Vuforia.SharpZipLib.Zip.ZipTestResultHandler)">
      <summary>
            Test an archive for integrity/validity
            </summary>
      <param name="testData">Perform low level data Crc check</param>
      <param name="strategy">The <see cref="T:Vuforia.SharpZipLib.Zip.TestStrategy"></see> to apply.</param>
      <param name="resultHandler">The <see cref="T:Vuforia.SharpZipLib.Zip.ZipTestResultHandler"></see> handler to call during testing.</param>
      <returns>true if all tests pass, false otherwise</returns>
      <exception cref="T:System.ObjectDisposedException">The object has already been closed.</exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.NameTransform">
      <summary>
            Get / set the <see cref="T:Vuforia.SharpZipLib.Core.INameTransform" /> to apply to names when updating.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.EntryFactory">
      <summary>
            Get/set the <see cref="T:Vuforia.SharpZipLib.Zip.IEntryFactory" /> used to generate <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> values
            during updates.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.BufferSize">
      <summary>
            Get /set the buffer size to be used when updating this zip file.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.IsUpdating">
      <summary>
            Get a value indicating an update has <see cref="M:Vuforia.SharpZipLib.Zip.ZipFile.BeginUpdate">been started</see>.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipFile.UseZip64">
      <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.BeginUpdate(Vuforia.SharpZipLib.Zip.IArchiveStorage,Vuforia.SharpZipLib.Zip.IDynamicDataSource)">
      <summary>
            Begin updating this <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /> archive.
            </summary>
      <param name="archiveStorage">The <see cref="T:Vuforia.SharpZipLib.Zip.IArchiveStorage">archive storage</see> for use during the update.</param>
      <param name="dataSource">The <see cref="T:Vuforia.SharpZipLib.Zip.IDynamicDataSource">data source</see> to utilise during updating.</param>
      <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
      <exception cref="T:System.ArgumentNullException">One of the arguments provided is null</exception>
      <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.BeginUpdate(Vuforia.SharpZipLib.Zip.IArchiveStorage)">
      <summary>
            Begin updating to this <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /> archive.
            </summary>
      <param name="archiveStorage">The storage to use during the update.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.BeginUpdate">
      <summary>
            Begin updating this <see cref="T:Vuforia.SharpZipLib.Zip.ZipFile" /> archive.
            </summary>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.BeginUpdate(Vuforia.SharpZipLib.Zip.IArchiveStorage)" />
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.CommitUpdate">
      </seealso>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.AbortUpdate">
      </seealso>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.CommitUpdate">
      <summary>
            Commit current updates, updating this archive.
            </summary>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.BeginUpdate">
      </seealso>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.AbortUpdate">
      </seealso>
      <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.AbortUpdate">
      <summary>
            Abort updating leaving the archive unchanged.
            </summary>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.BeginUpdate">
      </seealso>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.ZipFile.CommitUpdate">
      </seealso>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.SetComment(System.String)">
      <summary>
            Set the file comment to be recorded when the current update is <see cref="M:Vuforia.SharpZipLib.Zip.ZipFile.CommitUpdate">commited</see>.
            </summary>
      <param name="comment">The comment to record.</param>
      <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Add(System.String,Vuforia.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
      <summary>
            Add a new entry to the archive.
            </summary>
      <param name="fileName">The name of the file to add.</param>
      <param name="compressionMethod">The compression method to use.</param>
      <param name="useUnicodeText">Ensure Unicode text is used for name and comment for this entry.</param>
      <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
      <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Compression method is not supported.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Add(System.String,Vuforia.SharpZipLib.Zip.CompressionMethod)">
      <summary>
            Add a new entry to the archive.
            </summary>
      <param name="fileName">The name of the file to add.</param>
      <param name="compressionMethod">The compression method to use.</param>
      <exception cref="T:System.ArgumentNullException">ZipFile has been closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The compression method is not supported.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Add(System.String)">
      <summary>
            Add a file to the archive.
            </summary>
      <param name="fileName">The name of the file to add.</param>
      <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Add(System.String,System.String)">
      <summary>
            Add a file to the archive.
            </summary>
      <param name="fileName">The name of the file to add.</param>
      <param name="entryName">The name to use for the <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> on the Zip file created.</param>
      <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Add(Vuforia.SharpZipLib.Zip.IStaticDataSource,System.String)">
      <summary>
            Add a file entry with data.
            </summary>
      <param name="dataSource">The source of the data for this entry.</param>
      <param name="entryName">The name to give to the entry.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Add(Vuforia.SharpZipLib.Zip.IStaticDataSource,System.String,Vuforia.SharpZipLib.Zip.CompressionMethod)">
      <summary>
            Add a file entry with data.
            </summary>
      <param name="dataSource">The source of the data for this entry.</param>
      <param name="entryName">The name to give to the entry.</param>
      <param name="compressionMethod">The compression method to use.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Add(Vuforia.SharpZipLib.Zip.IStaticDataSource,System.String,Vuforia.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
      <summary>
            Add a file entry with data.
            </summary>
      <param name="dataSource">The source of the data for this entry.</param>
      <param name="entryName">The name to give to the entry.</param>
      <param name="compressionMethod">The compression method to use.</param>
      <param name="useUnicodeText">Ensure Unicode text is used for name and comments for this entry.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Add(Vuforia.SharpZipLib.Zip.ZipEntry)">
      <summary>
            Add a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> that contains no data.
            </summary>
      <param name="entry">The entry to add.</param>
      <remarks>This can be used to add directories, volume labels, or empty file entries.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.AddDirectory(System.String)">
      <summary>
            Add a directory entry to the archive.
            </summary>
      <param name="directoryName">The directory to add.</param>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Delete(System.String)">
      <summary>
            Delete an entry by name
            </summary>
      <param name="fileName">The filename to delete</param>
      <returns>True if the entry was found and deleted; false otherwise.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipFile.Delete(Vuforia.SharpZipLib.Zip.ZipEntry)">
      <summary>
            Delete a <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> from the archive.
            </summary>
      <param name="entry">The entry to delete.</param>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.IStaticDataSource">
      <summary>
            Provides a static way to obtain a source of data for an entry.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IStaticDataSource.GetSource">
      <summary>
            Get a source of data by creating a new stream.
            </summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> to use for compression input.</returns>
      <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.IDynamicDataSource">
      <summary>
            Represents a source of data that can dynamically provide
            multiple <see cref="T:System.IO.Stream">data sources</see> based on the parameters passed.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IDynamicDataSource.GetSource(Vuforia.SharpZipLib.Zip.ZipEntry,System.String)">
      <summary>
            Get a data source.
            </summary>
      <param name="entry">The <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry" /> to get a source for.</param>
      <param name="name">The name for data if known.</param>
      <returns>Returns a <see cref="T:System.IO.Stream" /> to use for compression input.</returns>
      <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.StaticDiskDataSource">
      <summary>
            Default implementation of a <see cref="T:Vuforia.SharpZipLib.Zip.IStaticDataSource" /> for use with files stored on disk.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.StaticDiskDataSource.GetSource">
      <summary>
            Get a <see cref="T:System.IO.Stream" /> providing data.
            </summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> provising data.</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.DynamicDiskDataSource">
      <summary>
            Default implementation of <see cref="T:Vuforia.SharpZipLib.Zip.IDynamicDataSource" /> for files stored on disk.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.DynamicDiskDataSource.GetSource(Vuforia.SharpZipLib.Zip.ZipEntry,System.String)">
      <summary>
            Get a <see cref="T:System.IO.Stream" /> providing data for an entry.
            </summary>
      <param name="entry">The entry to provide data for.</param>
      <param name="name">The file name for data if known.</param>
      <returns>Returns a stream providing data; or null if not available</returns>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.IArchiveStorage">
      <summary>
            Defines facilities for data storage when updating Zip Archives.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.IArchiveStorage.UpdateMode">
      <summary>
            Get the <see cref="T:Vuforia.SharpZipLib.Zip.FileUpdateMode" /> to apply during updates.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput">
      <summary>
            Get an empty <see cref="T:System.IO.Stream" /> that can be used for temporary output.
            </summary>
      <returns>Returns a temporary output <see cref="T:System.IO.Stream" /></returns>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal">
      </seealso>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal">
      <summary>
            Convert a temporary output stream to a final stream.
            </summary>
      <returns>The resulting final <see cref="T:System.IO.Stream" /></returns>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
      <summary>
            Make a temporary copy of the original stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to copy.</param>
      <returns>Returns a temporary output <see cref="T:System.IO.Stream" /> that is a copy of the input.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
      <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
      <param name="stream">The current stream.</param>
      <returns>Returns a stream suitable for direct updating.</returns>
      <remarks>This may be the current stream passed.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.IArchiveStorage.Dispose">
      <summary>
            Dispose of this instance.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.BaseArchiveStorage">
      <summary>
            An abstract <see cref="T:Vuforia.SharpZipLib.Zip.IArchiveStorage" /> suitable for extension by inheritance.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput">
      <summary>
            Gets a temporary output <see cref="T:System.IO.Stream" /></summary>
      <returns>Returns the temporary output stream.</returns>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal">
      </seealso>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal">
      <summary>
            Converts the temporary <see cref="T:System.IO.Stream" /> to its final form.
            </summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> that can be used to read
            the final storage for the archive.</returns>
      <seealso cref="M:Vuforia.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.BaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
      <summary>
            Make a temporary copy of a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to make a copy of.</param>
      <returns>Returns a temporary output <see cref="T:System.IO.Stream" /> that is a copy of the input.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.BaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
      <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to open for direct update.</param>
      <returns>Returns a stream suitable for direct updating.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.BaseArchiveStorage.Dispose">
      <summary>
            Disposes this instance.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.BaseArchiveStorage.UpdateMode">
      <summary>
            Gets the update mode applicable.
            </summary>
      <value>The update mode.</value>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.DiskArchiveStorage">
      <summary>
            An <see cref="T:Vuforia.SharpZipLib.Zip.IArchiveStorage" /> implementation suitable for hard disks.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.DiskArchiveStorage.GetTemporaryOutput">
      <summary>
            Gets a temporary output <see cref="T:System.IO.Stream" /> for performing updates on.
            </summary>
      <returns>Returns the temporary output stream.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.DiskArchiveStorage.ConvertTemporaryToFinal">
      <summary>
            Converts a temporary <see cref="T:System.IO.Stream" /> to its final form.
            </summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> that can be used to read
            the final storage for the archive.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.DiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
      <summary>
            Make a temporary copy of a stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to copy.</param>
      <returns>Returns a temporary output <see cref="T:System.IO.Stream" /> that is a copy of the input.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.DiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
      <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
      <param name="stream">The current stream.</param>
      <returns>Returns a stream suitable for direct updating.</returns>
      <remarks>If the <paramref name="stream" /> is not null this is used as is.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.DiskArchiveStorage.Dispose">
      <summary>
            Disposes this instance.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.MemoryArchiveStorage">
      <summary>
            An <see cref="T:Vuforia.SharpZipLib.Zip.IArchiveStorage" /> implementation suitable for in memory streams.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.MemoryArchiveStorage.FinalStream">
      <summary>
            Get the stream returned by <see cref="M:Vuforia.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal" /> if this was in fact called.
            </summary>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.MemoryArchiveStorage.GetTemporaryOutput">
      <summary>
            Gets the temporary output <see cref="T:System.IO.Stream" /></summary>
      <returns>Returns the temporary output stream.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal">
      <summary>
            Converts the temporary <see cref="T:System.IO.Stream" /> to its final form.
            </summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> that can be used to read
            the final storage for the archive.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.MemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
      <summary>
            Make a temporary copy of the original stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to copy.</param>
      <returns>Returns a temporary output <see cref="T:System.IO.Stream" /> that is a copy of the input.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.MemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
      <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
      <param name="stream">The original source stream</param>
      <returns>Returns a stream suitable for direct updating.</returns>
      <remarks>If the <paramref name="stream" /> passed is not null this is used;
            otherwise a new <see cref="T:System.IO.MemoryStream" /> is returned.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.MemoryArchiveStorage.Dispose">
      <summary>
            Disposes this instance.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.DescriptorData">
      <summary>
            Holds data pertinent to a data descriptor.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.DescriptorData.CompressedSize">
      <summary>
            Get /set the compressed size of data.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.DescriptorData.Size">
      <summary>
            Get / set the uncompressed size of data
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.DescriptorData.Crc">
      <summary>
            Get /set the crc value.
            </summary>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipInputStream">
      <summary>
             This is an InflaterInputStream that reads the files baseInputStream an zip archive
             one after another.  It has a special method to get the zip entry of
             the next file.  The zip entry contains information about the file name
             size, compressed size, Crc, etc.
             It includes support for Stored and Deflated entries.
             <br /><br />Author of the original java version : Jochen Hoenicke
             </summary>
      <example> This sample shows how to read a zip file
             <code lang="C#">
             using System;
             using System.Text;
             using System.IO;
             
             using Vuforia.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		using ( ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]))) {
            
             			ZipEntry theEntry;
             			const int size = 2048;
             			byte[] data = new byte[2048];
             			
             			while ((theEntry = s.GetNextEntry()) != null) {
                             if ( entry.IsFile ) {
             				    Console.Write("Show contents (y/n) ?");
             				    if (Console.ReadLine() == "y") {
             				    	while (true) {
             				    		size = s.Read(data, 0, data.Length);
             				    		if (size &gt; 0) {
             				    			Console.Write(new ASCIIEncoding().GetString(data, 0, size));
             				    		} else {
             				    			break;
             				    		}
             				    	}
             				    }
             				}
             			}
             		}
             	}
             }
             </code></example>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipInputStream.Password">
      <summary>
            Optional password used for encryption when non-null
            </summary>
      <value>A password for all encrypted <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry">entries </see> in this <see cref="T:Vuforia.SharpZipLib.Zip.ZipInputStream" /></value>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
      <summary>
            Gets a value indicating if there is a current entry and it can be decompressed
            </summary>
      <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
      <summary>
            Advances to the next entry in the archive
            </summary>
      <returns>
            The next <see cref="T:Vuforia.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
      <remarks>
            If the previous entry is still open <see cref="M:Vuforia.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
      <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
      <exception cref="T:Vuforia.SharpZipLib.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid,
            version required to extract is not supported
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipInputStream.CloseEntry">
      <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
      <exception cref="T:Vuforia.SharpZipLib.Zip.ZipException">
            The Zip stream ends early
            </exception>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipInputStream.Available">
      <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipInputStream.Length">
      <summary>
            Returns the current size that can be read from the current entry if available
            </summary>
      <exception cref="T:Vuforia.SharpZipLib.Zip.ZipException">Thrown if the entry size is not known.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if no entry is currently available.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipInputStream.ReadByte">
      <summary>
            Reads a byte from the current zip entry.
            </summary>
      <returns>
            The byte or -1 if end of stream is reached.
            </returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read a block of bytes from the stream.
            </summary>
      <param name="buffer">The destination for the bytes.</param>
      <param name="offset">The index to start storing data.</param>
      <param name="count">The number of bytes to attempt to read.</param>
      <returns>Returns the number of bytes read.</returns>
      <remarks>Zero bytes read means end of stream.</remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipNameTransform">
      <summary>
            ZipNameTransform transforms names as per the Zip file naming convention.
            </summary>
      <remarks>The use of absolute names is supported although its use is not valid 
            according to Zip naming conventions, and should not be used if maximum compatability is desired.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipNameTransform.TransformDirectory(System.String)">
      <summary>
            Transform a windows directory name according to the Zip file naming conventions.
            </summary>
      <param name="name">The directory name to transform.</param>
      <returns>The transformed name.</returns>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipNameTransform.TransformFile(System.String)">
      <summary>
            Transform a windows file name according to the Zip file naming conventions.
            </summary>
      <param name="name">The file name to transform.</param>
      <returns>The transformed name.</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipNameTransform.TrimPrefix">
      <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
      <remarks>The prefix is trimmed before any conversion from
            a windows path is done.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String,System.Boolean)">
      <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
      <param name="name">The name to test.</param>
      <param name="relaxed">If true checking is relaxed about windows file names and absolute paths.</param>
      <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
      <remarks>Zip path names are actually in Unix format, and should only contain relative paths.
            This means that any path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid for a file where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String)">
      <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
      <param name="name">The name to test.</param>
      <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
      <remarks>Zip path names are actually in unix format,
            and should only contain relative paths if a path is present.
            This means that the path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
    </member>
    <member name="T:Vuforia.SharpZipLib.Zip.ZipOutputStream">
      <summary>
             This is a DeflaterOutputStream that writes the files into a zip
             archive one after another.  It has a special method to start a new
             zip entry.  The zip entries contains information about the file name
             size, compressed size, CRC, etc.
             
             It includes support for Stored and Deflated entries.
             This class is not thread safe.
             <br /><br />Author of the original java version : Jochen Hoenicke
             </summary>
      <example> This sample shows how to create a zip file
             <code>
             using System;
             using System.IO;
             
             using Vuforia.SharpZipLib.Core;
             using Vuforia.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		string[] filenames = Directory.GetFiles(args[0]);
             		byte[] buffer = new byte[4096];
             		
             		using ( ZipOutputStream s = new ZipOutputStream(File.Create(args[1])) ) {
             		
             			s.SetLevel(9); // 0 - store only to 9 - means best compression
             		
             			foreach (string file in filenames) {
             				ZipEntry entry = new ZipEntry(file);
             				s.PutNextEntry(entry);
            
             				using (FileStream fs = File.OpenRead(file)) {
            						StreamUtils.Copy(fs, s, buffer);
             				}
             			}
             		}
             	}
             }	
             </code></example>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipOutputStream.IsFinished">
      <summary>
            Gets a flag value of true if the central header has been added for this archive; false if it has not been added.
            </summary>
      <remarks>No further entries can be added once this has been done.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
      <summary>
            Set the zip file comment.
            </summary>
      <param name="comment">
            The comment text for the entire archive.
            </param>
      <exception name="ArgumentOutOfRangeException">
            The converted comment is longer than 0xffff bytes.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
      <summary>
            Sets the compression level.  The new level will be activated
            immediately.
            </summary>
      <param name="level">The new compression level (1 to 9).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
      <see cref="T:Vuforia.SharpZipLib.Zip.Compression.Deflater" />
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipOutputStream.GetLevel">
      <summary>
            Get the current deflater compression level
            </summary>
      <returns>The current compression level</returns>
    </member>
    <member name="P:Vuforia.SharpZipLib.Zip.ZipOutputStream.UseZip64">
      <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
      <remarks>Older archivers may not understand Zip64 extensions.
            If backwards compatability is an issue be careful when adding <see cref="P:Vuforia.SharpZipLib.Zip.ZipEntry.Size">entries</see> to an archive.
            Setting this property to off is workable but less desirable as in those circumstances adding a file
            larger then 4GB will fail.</remarks>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(Vuforia.SharpZipLib.Zip.ZipEntry)">
      <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
      <param name="entry">
            the entry.
            </param>
      <exception cref="T:System.ArgumentNullException">
            if entry passed is null.
            </exception>
      <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
      <exception cref="T:Vuforia.SharpZipLib.Zip.ZipException">
            Too many entries in the Zip file<br />
            Entry name is too long<br />
            Finish has already been called<br /></exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
      <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
      <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes the given buffer to the current entry.
            </summary>
      <param name="buffer">The buffer containing data to write.</param>
      <param name="offset">The offset of the first byte to write.</param>
      <param name="count">The number of bytes to write.</param>
      <exception cref="T:Vuforia.SharpZipLib.Zip.ZipException">Archive size is invalid</exception>
      <exception cref="T:System.InvalidOperationException">No entry is active.</exception>
    </member>
    <member name="M:Vuforia.SharpZipLib.Zip.ZipOutputStream.Finish">
      <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
      <remarks>
            This is automatically called when the stream is closed.
            </remarks>
      <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
      <exception cref="T:Vuforia.SharpZipLib.Zip.ZipException">
            Comment exceeds the maximum length<br />
            Entry name exceeds the maximum length
            </exception>
    </member>
    <member name="T:Vuforia.EditorClasses.ModelTargetEditor">
      <summary>
            Editor class for ModelTargetBehaviours
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.ModelTargetEditor.EditorConfigureTarget(Vuforia.ModelTargetBehaviour,Vuforia.EditorClasses.SerializedModelTarget)">
      <summary>
            Configure the Model Target in this custom editor.
            </summary>
      <param name="otb">name of the model for the configuration</param>
    </member>
    <member name="M:Vuforia.EditorClasses.ModelTargetEditor.OnEnable">
      <summary>
            Initializes the Model Target when it is drag-dropped into the scene.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.ModelTargetEditor.OnInspectorGUI">
      <summary>
            Lets the user choose a Model Target from a drop down list. Model Target
            must be defined in the "config.xml" file.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedCylinderTarget">
      <summary>
            This class provides utility properties to a serialized object
            targeting a CylinderTargetBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedCylinderTarget.GetBehaviours">
      <summary>
            Get all behaviours that are edited by the serialized object
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedDataSetTrackable.ExtendedTracking">
      <summary>
            Defines whether extended tracking should be enabled for this target
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedDataSetTrackable.GetDataSetName">
      <summary>
            The name of the data set the Trackable belongs to.
            Please be aware that the data set name is not a unique identifier at runtime!
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedImageTarget">
      <summary>
            This class provides utility properties to a serialized object
            targeting an ImageTargetBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedImageTarget.GetBehaviours">
      <summary>
            Get all behaviours that are edited by the serialized object
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedModelTarget">
      <summary>
            This class provides utility properties to a serialized object
            targeting a ModelTargetBehaviour
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedModelTarget.BaseSize">
      <summary>
            Base size.
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedModelTarget.AspectRatioXY">
      <summary>
            Aspect ratio length/width
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedModelTarget.AspectRatioXZ">
      <summary>
            Aspect ratio length/height
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedModelTarget.ShowBoundingBox">
      <summary>
            Whether the visualization of the bounding box/alignment guide is enabled in the editor
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedModelTarget.PreviewImage">
      <summary>
            Set or get the preview image in the inspector
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedModelTarget.GetBehaviours">
      <summary>
            Get all behaviours that are edited by the serialized object
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedMultiTarget">
      <summary>
            This class provides utility properties to a serialized object
            targeting a MultiTargetBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedMultiTarget.GetBehaviours">
      <summary>
            Get all behaviours that are edited by the serialized object
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedObjectExtension">
      <summary>
            Extension methods for SerializedObject.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedObjectExtension.EditHandle">
      <summary>
            Utility class for editing a SerializedObject.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedObjectExtension.EditHandle.Dispose">
      <summary>
            Applies all modified data of the serialized object
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedObjectExtension.Edit(UnityEditor.SerializedObject)">
      <summary>
            Utility function for editing a SerializedObject. Any code which modifies the SerializedObject should
            be enclosed with a using-statement of this method. Calling Edit() updates the SerializedObject.
            </summary>
      <returns>EditHandle applies all modified data when it is disposed</returns>
            Example:
            using(SerializedObject.Edit())
            {
            ... editor code
            }
        </member>
    <member name="M:Vuforia.EditorClasses.SerializedObjectExtension.FixApproximatelyEqualFloatValues(UnityEditor.SerializedProperty)">
      <summary>
            Check whether all values of the serialized property are approximately equal.
            If so, change the property to have a unique value for all targets.
            </summary>
      <param name="property">The property needs to have a floatValue</param>
      <returns>true if the serialized property now contains one value.</returns>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedObjectExtension.GetArrayItems(UnityEditor.SerializedProperty,System.String[]@)">
      <summary>
            Get all values of serialized array
            </summary>
      <param name="property">Property has to point to a string array</param>
      <param name="result">copy of the serialized array. note that changing this array does not affect the serializedproperty</param>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedObjectExtension.RemoveArrayItem(UnityEditor.SerializedProperty,System.String)">
      <summary>
            Remove first occurence of string-value in the serialized array
            </summary>
      <param name="property">Property has to point to a string array</param>
      <param name="item">this value is removed from the array</param>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedObjectExtension.AddArrayItem(UnityEditor.SerializedProperty,System.String)">
      <summary>
            Add a string-value to a serialized array or list
            </summary>
      <param name="property">Property has to point to a string array</param>
      <param name="item">this value is added to the array</param>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedObjectTarget">
      <summary>
            This class provides utility properties to a serialized object
            targeting an ObjectTargetBehaviour
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedObjectTarget.BaseSize">
      <summary>
            Aspect ratio length/width
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedObjectTarget.AspectRatioXY">
      <summary>
            Aspect ratio length/width
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedObjectTarget.AspectRatioXZ">
      <summary>
            Aspect ratio length/height
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedObjectTarget.ShowBoundingBox">
      <summary>
            Whether the visualization of the bounding box/alignment guide is enabled in the editor
            </summary>
    </member>
    <member name="P:Vuforia.EditorClasses.SerializedObjectTarget.PreviewImage">
      <summary>
            Set or get the preview image in the inspector
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedObjectTarget.GetBehaviours">
      <summary>
            Get all behaviours that are edited by the serialized object
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedTrackable">
      <summary>
            This class wraps a SerializedObject of a TrackableBehaviour and provides utility-methods.
            </summary>
            This class should be used when a trackable behaviour is modified in the editor
            and the changes should be made persistent. By using the SerializedProperties for editing
            Unity will automatically handle editor functionality, e.g. Undo/Redo
            It is possible that the serialized object is editing multiple objects simultaneously.
        </member>
    <member name="P:Vuforia.EditorClasses.SerializedTrackable.SerializedObject">
      <summary>
            Get the internal SerializedObject-instance
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedTrackable.Edit">
      <summary>
            Any code which modifies the SerializedObject should be enclosed
            with a using-statement of this method. Calling Edit() updates the
            SerializedObject.
            </summary>
      <returns>EditHandle applies all modified data when it is disposed</returns>
            Example:
            using(SerializedTrackable.Edit())
            {
            ... editor code
            }
        </member>
    <member name="M:Vuforia.EditorClasses.SerializedTrackable.GetGameObjects">
      <summary>
            Get all game objects of behaviours that are targeted by the serialized object
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedVuMark">
      <summary>
            This class provides utility properties to a serialized object
            targeting a VuMarkBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedVuMark.GetBehaviours">
      <summary>
            Get all behaviours that are edited by the serialized object
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.SerializedWord">
      <summary>
            This class provides utility properties to a serialized object
            targeting a WordBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.SerializedWord.GetBehaviours">
      <summary>
            Get all behaviours that are edited by the serialized object
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.ObjectTargetEditor">
      <summary>
            Editor class for ObjectTargetBehaviours
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.ObjectTargetEditor.EditorConfigureTarget(Vuforia.ObjectTargetBehaviour,Vuforia.EditorClasses.SerializedObjectTarget)">
      <summary>
            Configure the Object Target in this custom editor.
            </summary>
      <param name="otb">name of the object for the configuration</param>
    </member>
    <member name="M:Vuforia.EditorClasses.ObjectTargetEditor.OnEnable">
      <summary>
            Initializes the Object Target when it is drag-dropped into the scene.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.ObjectTargetEditor.OnInspectorGUI">
      <summary>
            Lets the user choose a Object Target from a drop down list. Object Target
            must be defined in the "config.xml" file.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.CloudRecoEditor">
      <summary>
            Editor for the CloudRecoBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.CloudRecoEditor.OnInspectorGUI">
      <summary>
            Draws a custom UI for the cloud reco behaviour inspector
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.CloudRecoEditor.OnSceneGUI">
      <summary>
            Renders a label to visualize the CloudRecoBehaviour
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.CylinderTargetEditor">
      <summary>
            Editor for the CylinderTargetBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.CylinderTargetEditor.EditorConfigureTarget(Vuforia.CylinderTargetBehaviour,Vuforia.EditorClasses.SerializedCylinderTarget)">
      <summary>
            Configure the Cylinder Target in this custom editor.
            </summary>
            This method configures the cylinder target behaviour when it is first opened in the editor
            It assigns the default dataset and creates game objects for visualizing the cylinder.
            The result is equal to the CylinderTarget-prefab, even when the script is manually added to a 
            gameobject.
        </member>
    <member name="M:Vuforia.EditorClasses.CylinderTargetEditor.OnEnable">
      <summary>
            Initializes the Cylinder Target when it is drag-dropped into the scene.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.CylinderTargetEditor.OnInspectorGUI">
      <summary>
            Lets the user choose a Cylinder Target from a drop down list. Cylinder Target
            must be defined in the "config.xml" file.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.DataSetToTrackableMenu">
      <summary>
            Custom Unity Menu to Apply Dataset properties from the XML file to scene objects
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.DataSetToTrackableMenu.ApplyDataSetProperties">
      <summary>
            Custom Unity menu option to Apply Dataset properties from the XML file to scene objects
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.ImageTargetEditor">
      <summary>
            Editor for ImageTargetBehaviours
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.ImageTargetEditor.EditorConfigureTarget(Vuforia.ImageTargetBehaviour,Vuforia.EditorClasses.SerializedImageTarget)">
      <summary>
            Configure the Image Target in this custom editor.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.ImageTargetEditor.OnEnable">
      <summary>
            Initializes the Image Target when it is drag-dropped into the scene.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.ImageTargetEditor.OnInspectorGUI">
      <summary>
            Lets the user choose a Image Target from a drop down list. Image Target
            must be defined in the "config.xml" file.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.MultiTargetEditor">
      <summary>
            Editor for MultiTargetBehaviours
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.MultiTargetEditor.EditorConfigureTarget(Vuforia.MultiTargetBehaviour,Vuforia.EditorClasses.SerializedMultiTarget)">
      <summary>
            Configure the Multi Target in this custom editor.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.MultiTargetEditor.OnEnable">
      <summary>
            Initializes the Multi Target when it is drag-dropped into the scene.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.MultiTargetEditor.OnSceneGUI">
      <summary>
            Checks if the transformation of the Multi Target has been changed by
            Unity transform-handles in scene view.
            This is also called when user changes attributes in Inspector.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.MultiTargetEditor.OnInspectorGUI">
      <summary>
            Lets the user choose a Multi Target from a drop down list. Multi Target
            must be defined in the "config.xml" file.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.VuforiaConfigurationEditor">
      <summary>
            Custom editor for the Vuforia Configuration asset
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.VuforiaBehaviourEditor">
      <summary>
            Editor of the VuforiaBehaviour
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.VuforiaHelpMenu">
      <summary>
            Displays various help menu options in the Unity menu
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VuforiaHelpMenu.BrowseVuforiaHelp">
      <summary>
            Method opens up a browser Window with the specified URL.
            This method is called when "Vuforia Documentation" is chosen from the
            Unity "Help" menu.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VuforiaHelpMenu.BrowseVuforiaReleaseNotes">
      <summary>
            Method opens up a browser Window with the specified URL.
            This method is called when "Release Notes" is chosen from the
            Unity "Help" menu.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.TextRecoEditor">
      <summary>
            Editor for the TextRecoBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.TextRecoEditor.EditorConfigureTarget(Vuforia.TextRecoBehaviour)">
      <summary>
            Configure the TextReco in this custom editor.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.TextRecoEditor.OnEnable">
      <summary>
            Executed new TextRecoBehaviour is instantiated in the scene
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.TextRecoEditor.OnInspectorGUI">
      <summary>
            Draws a custom UI for the text reco behaviour inspector
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.TextRecoEditor.OnSceneGUI">
      <summary>
            Renders a label to visualize the TextRecoBehaviour
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.UnityPlayModeEditorUtility">
      <summary>
            This class implements to IPlayModeEditorUtility to provide various editor functionality (popups, reading xml files)
            at play mode runtime without introducing a depenency on UnityEdtitor from runtime classes.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.UnityPlayModeEditorUtility.DisplayDialog(System.String,System.String,System.String)">
      <summary>
            Displays a popup dialog in the Unity editor
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.UnityPlayModeEditorUtility.LoadAndParseWebcamProfiles">
      <summary>
            Loads web cam profiles from an XML file at a given path and returns all of them
            including the default profile
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.UnityPlayModeEditorUtility.RestartPlayMode">
      <summary>
            Forces a restart of Play Mode in the Editor.
            It is called when Unity re-compiles the scripts shortly after starting play mode.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.UnityPlayModeEditorUtility.ShowErrorInMouseOverWindow(System.String)">
      <summary>
            Displays a large error message in the window that the mouse is currently over
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.UnityPlayModeEditorUtility.IsVuforiaEnabledInPlayerSettings">
      <summary>
            This is play mode, check editor player settings directly.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.UserDefinedTargetBuilderEditor">
      <summary>
            Editor for the UserDefinedTargetBuildingBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.UserDefinedTargetBuilderEditor.OnInspectorGUI">
      <summary>
            Draws a custom UI for the UserDefinedTargetBehaviour inspector
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.UserDefinedTargetBuilderEditor.OnSceneGUI">
      <summary>
            Renders a label to visualize the UserDefinedTargetBehaviour
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.VirtualButtonEditor">
      <summary>
            Editor for the VirtualButtonBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VirtualButtonEditor.EditorConfigureTarget(Vuforia.VirtualButtonBehaviour)">
      <summary>
            Configure the Virtual Button in this custom editor.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VirtualButtonEditor.OnEnable">
      <summary>
            Initializes the Virtual Button when it is drag-dropped into the scene.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VirtualButtonEditor.OnInspectorGUI">
      <summary>
            Lets the user set sensitivity and name of a Virtual Button.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VirtualButtonEditor.OnSceneGUI">
      <summary>
            Locks the y-scale of a Virtual Button at 1.
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.VuMarkEditor">
      <summary>
            Editor for ImageTargetBehaviours
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VuMarkEditor.EditorConfigureTarget(Vuforia.VuMarkBehaviour,Vuforia.EditorClasses.SerializedVuMark)">
      <summary>
            Configure the Image Target in this custom editor.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VuMarkEditor.OnEnable">
      <summary>
            Initializes the VuMark Target when vmb is drag-dropped into the scene.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.VuMarkEditor.OnInspectorGUI">
      <summary>
            Lets the user choose a VuMark-Template from a drop down list. 
            </summary>
    </member>
    <member name="T:Vuforia.EditorClasses.WordEditor">
      <summary>
            Editor for WordBehaviours
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.WordEditor.EditorConfigureTarget(Vuforia.WordBehaviour,Vuforia.EditorClasses.SerializedWord)">
      <summary>
            Configure the Word in this custom editor.
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.WordEditor.OnEnable">
      <summary>
            Initializes the Word when it is drag-dropped into the scene
            </summary>
    </member>
    <member name="M:Vuforia.EditorClasses.WordEditor.OnInspectorGUI">
      <summary>
            Draws the inspector for Word prefab
            </summary>
    </member>
    <member name="T:PlatformChangeObserver">
      <summary>
            This class is Instantiated by Unity and the OnActiveBuildTargetChanged
            method is called when the buildtarget has changed
            </summary>
    </member>
  </members>
</doc>