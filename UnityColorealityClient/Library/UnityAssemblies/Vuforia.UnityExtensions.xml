<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Vuforia.UnityExtensions</name>
  </assembly>
  <members>
    <member name="T:Vuforia.ARController">
      <summary>
            A camera listener gets all lifecycle events from the VuforiaBehaviour
            of an ARCamera.
            </summary>
    </member>
    <member name="T:Vuforia.IlluminationManager">
      <summary>
            Provides data on the estimated illumination values in the current frame
            such as illumination intensity or ambient light color temperature
            </summary>
    </member>
    <member name="P:Vuforia.IlluminationManager.AmbientIntensity">
      <summary>
            The current ambient intensity for the scene measured in Lumens. The value
            may not be available on all platforms. When the value is unavailable
            NULL will be returned.
            </summary>
    </member>
    <member name="P:Vuforia.IlluminationManager.AmbientColorTemperature">
      <summary>
            The current color temperature for the scene measured in Kelvin. The value
            may not be available on all platforms. When the value is unavailable
            NULL will be returned.
            </summary>
    </member>
    <member name="T:Vuforia.PositionalDeviceTracker">
      <summary>
            The PositionalDeviceTracker tracks a device in the world by relying on
            6DOF sensor tracking, delivering both position and rotation. The
            PositionalDeviceTracker publishes DeviceTrackableResults that are
            are in world coordinate system and use a physical unit (meter).
            </summary>
    </member>
    <member name="T:Vuforia.GuideViewCameraBehaviour">
      <summary>
            This class represents a Guide View Camera, which can be used to configure 
            the guide view pose for detection of a Model Target.
            When attaching this component to a game object, 
            a Camera will be created automatically.
            This Camera is only used at Editor time to faciliate the Application developer
            to adjust the Pose visually by looking at the Camera preview.
            At runtime, the Camera component will be automatically disabled.
            </summary>
    </member>
    <member name="M:Vuforia.AndroidDatasets.AddExternalDatasetSearchDirs">
      <summary>
            This method inserts new dataset search roots for datasets defined in StreamingAssets/QCAR. This may
            be used to streamline the "Split Application Binary" Unity feature under the Android plugin. This method
             needs to be called before the datasets are loaded in the Start()-method.
            </summary>
    </member>
    <member name="M:Vuforia.PlatformRuntimeInitialization.InitPlatform">
      <summary>
            Initialize platform before first scene is loaded
            </summary>
    </member>
    <member name="T:Vuforia.PlayModeUnityPlayer">
      <summary>
            This class encapsulates functionality to detect various surface events
            (size, orientation changed) and delegate this to native.
            These are used by Unity Extension code and should usually not be called by app code.
            </summary>
    </member>
    <member name="M:Vuforia.PlayModeUnityPlayer.LoadNativeLibraries">
      <summary>
            Loads native plugin libraries on platforms where this is explicitly required.
            </summary>
    </member>
    <member name="M:Vuforia.PlayModeUnityPlayer.InitializePlatform">
      <summary>
            Initialized platform specific settings
            </summary>
    </member>
    <member name="M:Vuforia.PlayModeUnityPlayer.InitializeVuforia(System.String)">
      <summary>
            Initializes Vuforia
            </summary>
    </member>
    <member name="M:Vuforia.PlayModeUnityPlayer.StartScene">
      <summary>
            Called on start each time a new scene is loaded
            </summary>
    </member>
    <member name="M:Vuforia.PlayModeUnityPlayer.Update">
      <summary>
            Called from Update, checks for various life cycle events that need to be forwarded
            to Vuforia, e.g. orientation changes
            </summary>
    </member>
    <member name="M:Vuforia.PlayModeUnityPlayer.OnPause">
      <summary>
            Pauses Vuforia
            </summary>
    </member>
    <member name="M:Vuforia.PlayModeUnityPlayer.OnResume">
      <summary>
            Resumes Vuforia
            </summary>
    </member>
    <member name="M:Vuforia.PlayModeUnityPlayer.OnDestroy">
      <summary>
            Deinitializes Vuforia
            </summary>
    </member>
    <member name="T:Vuforia.DigitalEyewearARController">
      <summary>
            This class handles stereo rendering
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.DEFAULT_CAMERA_OFFSET">
      <summary>
            Default offset between stereo cameras in meters
            </summary>
      <remarks> If the scene is scaled to a different unit it is
            necessary to define a custom camera offset in the same unit.</remarks>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.CARDBOARD_SDK_VIEWER">
      <summary>
            Viewer name for integration with Cardboard SDK
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.DEFAULT_VR_FOV">
      <summary>
            Default field of view for handheld VR mode. This value will be used
            whenever the handheld VR mode is enabled.
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.EyewearType.None">
      <summary>
            No eyewear is used, i.e. rendering is done with a single camera
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.EyewearType.OpticalSeeThrough">
      <summary>
            Stereo setup for dedicated eyewear with optical see-through
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.EyewearType.VideoSeeThrough">
      <summary>
            Stereo setup for video see-through with a viewer
            </summary>
    </member>
    <member name="T:Vuforia.DigitalEyewearARController.StereoFramework">
      <summary>
            Define which framework is used for stereo rendering
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.StereoFramework.Vuforia">
      <summary>
            Vuforia SDK is used for stereo rendering
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.StereoFramework.Cardboard">
      <summary>
            Cardboard SDK is used for stereo rendering
            </summary>
    </member>
    <member name="T:Vuforia.DigitalEyewearARController.SeeThroughConfiguration">
      <summary>
            Define which configuration is used for see-through eyewear
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.SeeThroughConfiguration.Vuforia">
      <summary>
            Vuforia SDK functionality is used to drive rendering on see-through devices
            </summary>
    </member>
    <member name="F:Vuforia.DigitalEyewearARController.SeeThroughConfiguration.HoloLens">
      <summary>
            HoloLens SDK is used for rendering
            </summary>
    </member>
    <member name="T:Vuforia.DigitalEyewearARController.SerializableViewerParameters">
      <summary>
            This class is used for serializing custom viewer parameters defined in the editor
            </summary>
    </member>
    <member name="P:Vuforia.DigitalEyewearARController.CameraOffset">
      <summary>
            This property is used for configuring camera offset for IPD.
            </summary>
    </member>
    <member name="P:Vuforia.DigitalEyewearARController.CentralAnchorPoint">
      <summary>
            This transform define the central anchor point.
            All trackables are updated in the scene with reference to this transform.
            By default (and if it's set to null) the transform of this component will be used, which is usually the ARCamera.
            </summary>
    </member>
    <member name="P:Vuforia.DigitalEyewearARController.IsStereoRendering">
      <summary>
            If Stereo redering is on
            </summary>
    </member>
    <member name="P:Vuforia.DigitalEyewearARController.PrimaryCamera">
      <summary>
            This property is used for configure primary camera.
            </summary>
    </member>
    <member name="P:Vuforia.DigitalEyewearARController.DistortionRenderingLayer">
      <summary>
            Defines which layer is used for distortion rendering. This layer should not be
            used for rendering any other game objects in the scene.
            This value has to be defined before distortion rendering is enabled
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.OnVideoBackgroundConfigChanged">
      <summary>
            Notify internal objects of video background changes
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.SetCameraOffset(System.Single)">
      <summary>
            This method is used to set the camera offset between stereo cameras. By default the
            camera offset is defined in meters. If the scene is scaled to another unit, the camera
            offset has to be scaled accordingly.
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.SetViewerActive(System.Boolean,System.Boolean)">
      <summary>
            Inform Vuforia that the device has been inserted into a viewer or it has
            been removed froma a viewer. Using this method allows specifying if the 
            camera should be re-initialized or not. If the camera is not re-initialized,
            
            </summary>
      <remarks>
            If the camera is not re-initialized, switching between mono and stereo rendering
            will be a lot faster, but it will not use optimized performance modes for the different
            configurations. 
            </remarks>
      <param name="isActive">Whether the device is used with a viewer</param>
      <param name="reinitializeCamera">whether the camera should be reinitialized</param>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.SetViewerActive(System.Boolean)">
      <summary>
            Inform Vuforia that the device has been inserted into a viewer or it has
            been removed froma a viewer. You can only call this method if the camera
            is already initialized and calling this method will automatically re-initialize
            the camera to use a different performance set where applicable.
            </summary>
      <param name="isActive">Whether the device is used with a viewer</param>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.SetMode(Vuforia.Device.Mode)">
      <summary>
            Inform Vuforia whether AR or VR mode is used. This will change the projection
            matrices for mono and stereo camera setups.
            </summary>
      <param name="mode">which mode to use</param>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.GetEyewearType">
      <summary>
            Returns which eyewear type is used
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.SetEyewearType(Vuforia.DigitalEyewearARController.EyewearType)">
      <summary>
            Define which eyewear type is used.
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.GetStereoCameraConfig">
      <summary>
            Returns which framework is used for stereo rendering.
            This value is only used when eyewear type is set to video see-through.
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.SetStereoCameraConfiguration(Vuforia.DigitalEyewearARController.StereoFramework)">
      <summary>
            Define which framework is used for stereo rendering.
            This value is only used when eyewear type is set to video see-through.
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.GetSeeThroughConfiguration">
      <summary>
            Returns which configuration is used for rendering on see-through eyewear.
            This value is only used when eyewear type is set to optical see-through.
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.SetSeeThroughConfiguration(Vuforia.DigitalEyewearARController.SeeThroughConfiguration)">
      <summary>
            Define which configuration is used for rendering on see-through eyewear.
            This value is only used when eyewear type is set to optical see-through.
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.EnableAutomaticFocusPointSelection(System.Boolean)">
      <summary>
            May be removed in future Vuforia versions!
            This method can be used to toggle automatic setting of the focus plane on HoloLens.
            It should only be called after Vuforia has started (e.g. VuforiaStartedCallback)
            By default, this is set to true, and Vuforia will automatically set the focus plane to the last
            detected target.
            However, if an the focus plane should be set to a hologram significantly offset from a target,
            this method should be used to disable automatic focus plane setting and it should be done from 
            application code instead
            </summary>
    </member>
    <member name="M:Vuforia.DigitalEyewearARController.EnableWorldAnchorUsage(System.Boolean)">
      <summary>
            May be removed in future Vuforia versions!
            This method can be used to toggle automatic setting of world anchors for trackables on HoloLens.
            It should only be called after Vuforia has started (e.g. VuforiaStartedCallback)
            By default, this is set to true, and Vuforia will automatically manage world anchors for targets.
            This reduces drift in approx. a 3m range around targets.
            
            However, if your application only uses targets for initial recognition, and your holograms are 
            significantly offset from them, it might make sense to disable world anchor usage by Vuforia and
            manually create world anchors for the holograms you want to stabilize
            </summary>
    </member>
    <member name="T:Vuforia.UnityComponentExtensions">
      <summary>
            Provides exensions for Unity Components
            </summary>
    </member>
    <member name="T:Vuforia.AValidatableVideoBackgroundConfigProperty">
      <summary>
            Validatable property base class. Always inherit from this to create a new validatable property
            </summary>
    </member>
    <member name="T:Vuforia.MatteShaderProperty">
      <summary>
            Checks the matte shader property to see if it's set to null and sets a valid default value if it is, assuming it is not intentional (clipping mode none).
            </summary>
    </member>
    <member name="T:Vuforia.NumDivisionsProperty">
      <summary>
            Checks the num divisions property. If it is smaller than the minimum value it sets the default value.
            </summary>
    </member>
    <member name="T:Vuforia.VideoBackgroundConfigValidator">
      <summary>
            For each new property added to the video background configuratoin that requires validataion, add an implementation of
            AValidatableVideoBackgroundConfigProperty specific to the property to the list of validatableProperties. The config will then be validated
            at each point in the code based on the defined rules.
            </summary>
    </member>
    <member name="T:Vuforia.VideoBackgroundShaderProperty">
      <summary>
            Checks the video background shader property. If it is null, a default value is assigned
            </summary>
    </member>
    <member name="T:Vuforia.EyewearDevice">
      <summary>
            Specialization of Device which is provided when Vuforia is running on a dedicated Eyewear device.
            </summary>
    </member>
    <member name="T:Vuforia.EyewearDevice.EyeID">
      <summary>
            Defines which eye the operation is working on
            </summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyeID.EYEID_MONOCULAR">
      <summary>Identifier for a monocular (single) eye</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyeID.EYEID_LEFT">
      <summary>Identifier for the left eye</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyeID.EYEID_RIGHT">
      <summary> Identifier for the right eye</summary>
    </member>
    <member name="T:Vuforia.EyewearDevice.EyewearCalibrationReading">
      <summary>Structure for an eyewear calibration reading to be used with EyewearUserCalibration</summary>
    </member>
    <member name="T:Vuforia.EyewearDevice.EyewearCalibrationReading.AlignmentType">
      <summary>Type of calibration shape used during the calibration process</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyewearCalibrationReading.AlignmentType.RECTANGLE">
      <summary>The calibration shape is a rectangle</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyewearCalibrationReading.AlignmentType.HORIZONTAL_LINE">
      <summary>The calibration shape is a horizontal line</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyewearCalibrationReading.AlignmentType.VERTICAL_LINE">
      <summary>The calibration shape is a vertical line</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyewearCalibrationReading.pose">
      <summary>Pose matrix from a TrackableResult</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyewearCalibrationReading.scale">
      <summary>A scale in the range 0.0 - 1.0 that should specify the amount of rendering surface height the calibration shape fills</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyewearCalibrationReading.centerX">
      <summary>A position in the range -1.0 to 1.0 that specifies the horizontal center of the calibration shape on the rendering surface</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyewearCalibrationReading.centerY">
      <summary>A position in the range -1.0 to 1.0 that specifies the vertical center of the calibration shape on the rendering surface</summary>
    </member>
    <member name="F:Vuforia.EyewearDevice.EyewearCalibrationReading.type">
      <summary>Type of calibration shape used to generate this reading</summary>
    </member>
    <member name="M:Vuforia.EyewearDevice.IsSeeThru">
      <summary>
            Returns true if the Eyewear device detected has a see-through display.
            </summary>
    </member>
    <member name="M:Vuforia.EyewearDevice.IsDualDisplay">
      <summary>
            Returns true if the Eyewear device has a display for each eye (i.e. stereo), false otherwise.
            </summary>
    </member>
    <member name="M:Vuforia.EyewearDevice.SetDisplayExtended(System.Boolean)">
      <summary>
            Switch between 2D (duplication/mono) and 3D (extended/stereo) modes on eyewear device.
            set to true to switch to 3D (stereo) mode or false for 2D (mono) mode
            returns true if successful or false if the device doesn't support this operation.
            </summary>
    </member>
    <member name="M:Vuforia.EyewearDevice.IsDisplayExtended">
      <summary>
            Returns true if the Eyewear device display is extended across each eye
            </summary>
    </member>
    <member name="M:Vuforia.EyewearDevice.IsDisplayExtendedGLOnly">
      <summary>
            Returns true if the Eyewear device dual display mode is only for OpenGL content.
            Some Eyewear devices don't support stereo for 2D (typically Android widget)
            content. On these devices 2D content is rendered to each eye automatically
            without the need for the app to create a split screen view. On such devices
            this method will return true.
            </summary>
    </member>
    <member name="M:Vuforia.EyewearDevice.GetScreenOrientation">
      <summary>
            Returns the correct screen orientation to use when rendering for the eyewear device.
            </summary>
    </member>
    <member name="M:Vuforia.EyewearDevice.SetPredictiveTracking(System.Boolean)">
      <summary>
            Turn predictive tracking on or off
            </summary>
      <remarks>
            Predictive tracking uses device sensors to predict user motion and reduce perceived latency.
            By default predictive tracking is enabled on devices that support this enhancement.
            param enable set to true to enable predictive tracking or false to disable predictive tracking.
            return true if successful or false if the device doesn't support this operation.
            </remarks>
    </member>
    <member name="M:Vuforia.EyewearDevice.IsPredictiveTrackingEnabled">
      <summary>
            Returns true if predictive tracking is enabled
            </summary>
    </member>
    <member name="M:Vuforia.EyewearDevice.GetCalibrationProfileManager">
      <summary>
            Get the calibration profile manager.
            </summary>
      <remarks>
            Note: Calibration profiles are only relevant to see-through Eyewear devices.
            return A reference to the calibration profile manager.
            </remarks>
    </member>
    <member name="M:Vuforia.EyewearDevice.GetUserCalibrator">
      <summary>
            Gets the calibrator used for creating custom user calibration experiences for see-thru eyewear.
            return A reference to the calibrator object
            </summary>
    </member>
    <member name="T:Vuforia.GuideView">
      <summary>
            This class represents a Guide View which can be extracted from the DataSet
            </summary>
    </member>
    <member name="P:Vuforia.GuideView.Image">
      <summary>
            Accessor to Image data
            </summary>
    </member>
    <member name="P:Vuforia.GuideView.Pose">
      <summary>
            The pose of the guide view in camera space
            If set, it invalidates the Image property
            </summary>
    </member>
    <member name="T:Vuforia.GuideView2DBehaviour">
      <summary>
            Class representing a 2D Guide View for Model Target Detection.
            </summary>
    </member>
    <member name="M:Vuforia.GuideView2DBehaviour.UpdateView(Vuforia.ModelTargetBehaviour,Vuforia.GuideView)">
      <summary>
            Updates the Guide View content and layout.
            </summary>
      <param name="guideView">
      </param>
    </member>
    <member name="T:Vuforia.GuideView3DBehaviour">
      <summary>
            Class representing a 3D Guide View for Model Target Detection.
            </summary>
    </member>
    <member name="M:Vuforia.GuideView3DBehaviour.UpdateGuideViewPose(UnityEngine.Matrix4x4)">
      <summary>
            Updates the pose of the GuideView with the new values
            Only executed if there is sufficient change to the old values
            </summary>
      <param name="newPose">The new pose in matrix form</param>
    </member>
    <member name="M:Vuforia.GuideView3DBehaviour.UpdateView(Vuforia.ModelTargetBehaviour,Vuforia.GuideView)">
      <summary>
            Updates the Guide View content and layout.
            </summary>
      <param name="modelTarget">
      </param>
      <param name="guideView">
      </param>
    </member>
    <member name="T:Vuforia.GuideViewRenderingBehaviour">
      <summary>
            Class handling the activation/update/rendering of the Guide View for Model Target detection.
            </summary>
    </member>
    <member name="M:Vuforia.GuideViewRenderingBehaviour.DeleteTargetGuideView">
      <summary>
            Destroys the internal GuideViewGameObject and makes sure that a 3D guideview object is returned to it's previous owner
            </summary>
    </member>
    <member name="M:Vuforia.GuideViewRenderingBehaviour.Initialize(Vuforia.ModelTargetBehaviour)">
      <summary>
            Setup function that creates the necessary GuideView rendering components for the provided ModelTargetBehaviour
            Depending on the set GuideView display mode, different scene-trees are created
            </summary>
      <param name="modelTarget">The ModelTarget to be used for GuideView rendering</param>
    </member>
    <member name="T:Vuforia.ModelTarget">
      <summary>
            A trackable behaviour to represent a flat natural feature target.
            </summary>
    </member>
    <member name="M:Vuforia.ModelTarget.GetBoundingBox">
      <summary>
            Returns the bounding box  of the target (in 3D scene units).
            </summary>
    </member>
    <member name="M:Vuforia.ModelTarget.GetNumGuideViews">
      <summary>
            Queries native for the number of guide views in the DataSet
            </summary>
      <returns>The number of guide views</returns>
    </member>
    <member name="M:Vuforia.ModelTarget.GetGuideView(System.Int32)">
      <summary>
            Returns a guide view with a given index
            </summary>
      <param name="index">which guide view</param>
      <returns>GuideView class instance</returns>
    </member>
    <member name="T:Vuforia.ModelTargetBehaviour">
      <summary>
            This class serves both as an augmentation definition for a ModelTarget in the editor
            as well as a tracked ModelTarget result at runtime
            </summary>
    </member>
    <member name="T:Vuforia.ModelTargetBehaviour.GuideViewDisplayMode">
      <summary>
            The different modes how Vuforia will provide guide view rendering:
            - No guide view rendering (in case there is custom application logic to display some form of snapping view)
            - 2D guide view using the integrated or overwritten texture
            - 3D guide view using the integrated or overwritten 3D model
            </summary>
    </member>
    <member name="F:Vuforia.ModelTargetBehaviour.GuideViewDisplayMode.NoGuideView">
            Using camel-case for enum here, so that Unity automatically creates nice strings for in editor display
            e.g. "NoGuideView" becomes "No Guide View" 
        </member>
    <member name="P:Vuforia.ModelTargetBehaviour.ModelTarget">
      <summary>
            The ModelTarget that this ModelTargetBehaviour augments
            </summary>
    </member>
    <member name="M:Vuforia.ModelTargetBehaviour.SetBoundingBox(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
            Set the Bounding Box (only in editor mode).
            </summary>
      <param name="minBBox">bounding box min position</param>
      <param name="maxBBox">bounding box max position</param>
    </member>
    <member name="M:Vuforia.ModelTargetBehaviour.GetSize">
      <summary>
            Returns the size of this target in scene units
            </summary>
    </member>
    <member name="M:Vuforia.ModelTargetBehaviour.SetLength(System.Single)">
      <summary>
            Set the length (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
      <param name="length">length value</param>
    </member>
    <member name="M:Vuforia.ModelTargetBehaviour.SetWidth(System.Single)">
      <summary>
            Set the width (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
      <param name="width">width value</param>
    </member>
    <member name="M:Vuforia.ModelTargetBehaviour.SetHeight(System.Single)">
      <summary>
            Set the height (z-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
      <param name="height">height value</param>
    </member>
    <member name="T:Vuforia.GLErrorHandler">
      <summary>
            This Script can be used to set a full screen error message if an error happens on startup.
            (such as no OpenGL ES 2.0 support that is required for some samples).
            </summary>
    </member>
    <member name="M:Vuforia.GLErrorHandler.SetError(System.String)">
      <summary>
            Sets an error text that is rendered every frame
            </summary>
    </member>
    <member name="T:Vuforia.MaskOutBehaviour">
      <summary>
            Helper behaviour used to hide augmented objects behind the video background.
            </summary>
    </member>
    <member name="T:Vuforia.HitTestEvent">
      <summary>
            An Event that passes a HitTestResult after a performed hit test. HitTestResult can be null.
            </summary>
    </member>
    <member name="T:Vuforia.HitTestMode">
      <summary>
            The mode in which the surface is found.
            Automatic is used to perform a hit test from the screen center periodically.
            Interactive is used to perform a hit test on manual input (touch, mouse)
            </summary>
    </member>
    <member name="T:Vuforia.AnchorStageBehaviour">
      <summary>
            Used to display position and real-world scale (1x1 meters) of a child content relative to a surface or point in space
            Has a fixed rotation and scale as planes currently can only be horizontal with real world scale. 
            1 Unity unit equals 1 meter.
            </summary>
    </member>
    <member name="M:Vuforia.IHoloLensApiAbstraction.SetFocusPoint(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
            Sets the focus point, stablizing holograms in that area
            </summary>
    </member>
    <member name="M:Vuforia.IHoloLensApiAbstraction.SetWorldAnchor(Vuforia.TrackableBehaviour,Vuforia.VuforiaManager.TrackableIdPair)">
      <summary>
            Sets a world anchor on the game object of the given behaviour
            </summary>
    </member>
    <member name="M:Vuforia.IHoloLensApiAbstraction.DeleteWorldAnchor(Vuforia.VuforiaManager.TrackableIdPair)">
      <summary>
            Deletes a previously set world anchor.
            </summary>
    </member>
    <member name="M:Vuforia.IHoloLensApiAbstraction.DeleteWorldAnchor(Vuforia.TrackableBehaviour)">
      <summary>
            Deletes a previously set world anchor.
            </summary>
    </member>
    <member name="M:Vuforia.IHoloLensApiAbstraction.SetSpatialAnchorTrackingCallback(System.Action{Vuforia.VuforiaManager.TrackableIdPair,System.Boolean})">
      <summary>
            Sets the callback method to be called when the tracking state of world anchors changes
            </summary>
    </member>
    <member name="T:Vuforia.ICustomViewerParameters">
      <summary>
            Editable container class for parameters needed to define a viewer
            </summary>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.SetButtonType(Vuforia.ViewerButtonType)">
      <summary>
            Set the type of button in the viewer.
            </summary>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.SetScreenToLensDistance(System.Single)">
      <summary>
            Set the distance between the phone screen and the viewer lens' in meters.
            </summary>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.SetInterLensDistance(System.Single)">
      <summary>
            Set the distance between the viewer lens' in meters.
            </summary>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.SetTrayAlignment(Vuforia.ViewerTrayAlignment)">
      <summary>
            Set how the phone sits with in the viewer.
            </summary>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.SetLensCentreToTrayDistance(System.Single)">
      <summary>
            Set the distance between the lens' and the tray position in meters.
            </summary>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.ClearDistortionCoefficients">
      <summary>
            Clear the list of distortion coefficients.
            </summary>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.AddDistortionCoefficient(System.Single)">
      <summary>
            Add a new value to the list of distortion coefficients.
            </summary>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.SetFieldOfView(UnityEngine.Vector4)">
      <summary>
            Set the field-of-view of the lens'.
            </summary>
      <param name="val">Vector containing the half angles in order Outer (ear), Inner (nose), top, bottom in degrees</param>
    </member>
    <member name="M:Vuforia.ICustomViewerParameters.SetContainsMagnet(System.Boolean)">
      <summary>
            Set the flag indicating whether the viewer contains a magnet.
            </summary>
    </member>
    <member name="T:Vuforia.DeviceTracker">
      <summary>
            The DeviceTracker handles the rotational tracking for VR support
            </summary>
    </member>
    <member name="F:Vuforia.DeviceTracker.TRACKING_MODE.ROTATIONAL">
      <summary>
            Rotational device tracker delivering 3DOF poses
            </summary>
    </member>
    <member name="F:Vuforia.DeviceTracker.TRACKING_MODE.POSITIONAL">
      <summary>
            Positional device tracker delivering 6DOF poses
            </summary>
    </member>
    <member name="T:Vuforia.DeviceTrackerARController">
      <summary>
            This is the main behaviour class that manages the device tracker
            </summary>
    </member>
    <member name="F:Vuforia.DeviceTrackerARController.DEFAULT_HEAD_PIVOT">
      <summary>
            This is the default pivot point for the head model correction mode.
            </summary>
      <remarks>This value is defined in meters. If the scene is scaled to a different unit it is
            necessary to define a custom pivot point in the same unit.</remarks>
    </member>
    <member name="F:Vuforia.DeviceTrackerARController.DEFAULT_HANDHELD_PIVOT">
      <summary>
            This is the default pivot point for the handheld model correction mode.
            </summary>
      <remarks>This value is defined in meters. If the scene is scaled to a different unit it is
            necessary to define a custom pivot point in the same unit.</remarks>
    </member>
    <member name="M:Vuforia.DeviceTrackerARController.RegisterTrackerStartedCallback(System.Action)">
      <summary>
            Registers a callback that is called when the tracker has been started
            </summary>
    </member>
    <member name="M:Vuforia.DeviceTrackerARController.UnregisterTrackerStartedCallback(System.Action)">
      <summary>
            Unregisters a previously registered callback
            </summary>
    </member>
    <member name="M:Vuforia.DeviceTrackerARController.RegisterBeforeDevicePoseUpdateCallback(System.Action)">
      <summary>
            Register a callback that is invoked right before the device tracking pose
            (i.e. head tracking) is applied in the scene
            </summary>&gt;
        </member>
    <member name="M:Vuforia.DeviceTrackerARController.UnregisterBeforeDevicePoseUpdateCallback(System.Action)">
      <summary>
            Unregisters a previously registered callback
            </summary>
    </member>
    <member name="M:Vuforia.DeviceTrackerARController.RegisterDevicePoseUpdatedCallback(System.Action)">
      <summary>
            Register a callback that is invoked after the device tracking pose
            (i.e. head tracking) has been updated, but before any other trackables
            have been updated in the scene. For a callback after all trackables have
            been updated, please use VuforiaBehaviour.RegisterTrackablesUpdatedCallback.
            </summary>
    </member>
    <member name="M:Vuforia.DeviceTrackerARController.UnregisterDevicePoseUpdatedCallback(System.Action)">
      <summary>
            Unregisters a previously registered callback
            </summary>
    </member>
    <member name="M:Vuforia.DeviceTrackerARController.RegisterDevicePoseStatusChangedCallback(System.Action{Vuforia.TrackableBehaviour.Status})">
      <summary>
            Register an action for the status changed callback.
            This callback whenever the tracker status changes. For example from "UNKNOWN" to "TRACKED",
            </summary>
      <param name="callback">
      </param>
    </member>
    <member name="M:Vuforia.DeviceTrackerARController.UnregisterDevicePoseStatusChangedCallback(System.Action{Vuforia.TrackableBehaviour.Status})">
      <summary>
            Unregister the Status change callback
            </summary>
      <param name="callback">
      </param>
    </member>
    <member name="T:Vuforia.TurnOffBehaviour">
      <summary>
            A utility behaviour to disable rendering of a game object at run time.
            </summary>
    </member>
    <member name="T:Vuforia.TurnOffWordBehaviour">
      <summary>
            A utility behaviour to disable rendering of a word behaviour at run time.
            </summary>
    </member>
    <member name="T:Vuforia.IEditDataSetBehaviour">
      <summary>
            Interface for editing some properties of data set trackables.
            </summary>
            These properties should be edited with care at runtime. It is 
            necessary to define them right after Vuforia has started.
        </member>
    <member name="T:Vuforia.MixedRealityController">
      <summary>
            The MixedRealityController provides a very simply interface to switch between different mixed reality modes.
            Depending on the selected mode, it will automatically switch between AR and VR, mono and stereo rendering,
            and configure the device tracker. This API works both with Vuforia's device tracking capabilities as well as
            with external SDKs such as Oculus and Cardboard.
            </summary>
    </member>
    <member name="T:Vuforia.MixedRealityController.Mode">
      <summary>
            A selection of pre-defined mixed reality modes
            </summary>
    </member>
    <member name="F:Vuforia.MixedRealityController.Mode.HANDHELD_AR">
      <summary>
            The default mobile AR use case - renders the video background in full screen,
            device tracker is off
            </summary>
    </member>
    <member name="F:Vuforia.MixedRealityController.Mode.ROTATIONAL_HANDHELD_AR">
      <summary>
            [DEPRECATED]
            Handheld AR use case plus device tracking with a handheld rotational model
            This mode cannot be set when the DeviceTracker is in positional mode.
            </summary>
    </member>
    <member name="F:Vuforia.MixedRealityController.Mode.HANDHELD_AR_DEVICETRACKER">
      <summary>
            Handheld AR use case plus device tracking
            (rotational using handheld mode or positional)
            </summary>
    </member>
    <member name="F:Vuforia.MixedRealityController.Mode.HANDHELD_VR">
      <summary>
            No video background rendering, pure VR device tracking
            (rotational using handheld mode or positional)
            </summary>
    </member>
    <member name="F:Vuforia.MixedRealityController.Mode.VIEWER_AR">
      <summary>
            Stereo AR mode for when the device is put in a viewer.
            </summary>
    </member>
    <member name="F:Vuforia.MixedRealityController.Mode.ROTATIONAL_VIEWER_AR">
      <summary>
            [DEPRECATED]
            Viewer AR use case plus device tracking with a head rotational model
            This mode cannot be set when the DeviceTracker is in positional mode.
            </summary>
    </member>
    <member name="F:Vuforia.MixedRealityController.Mode.VIEWER_AR_DEVICETRACKER">
      <summary>
            Viewer AR use case plus device tracking
            (rotational using head mode or positional)
            </summary>
    </member>
    <member name="F:Vuforia.MixedRealityController.Mode.VIEWER_VR">
      <summary>
            Stereo VR without video background rendering with device tracking
            (rotational using head mode or positional)
            </summary>
    </member>
    <member name="P:Vuforia.MixedRealityController.Instance">
      <summary>
            Singleton accessor to the MixedRealityController
            </summary>
    </member>
    <member name="M:Vuforia.MixedRealityController.SetMode(Vuforia.MixedRealityController.Mode)">
      <summary>
            Call this method to change the current mode to a different one.
            </summary>
      <remarks>
            This should not be called continuously each frame, it is a potentially heavy operation.
            Only call this when switching between different modes.
            </remarks>
    </member>
    <member name="M:Vuforia.MixedRealityController.SetViewerParameters(Vuforia.IViewerParameters)">
      <summary>
            Use this method to configure the viewer if the ARCamera has been configured for handheld use case and you want to
            switch to a stereo viewer experience. After calling this method, use SetMode() to switch to the new mode.
            If the viewer has been configured in the ARCamera inspector before, it is not necessary to set it using this method.
            </summary>
    </member>
    <member name="M:Vuforia.MixedRealityController.ConfigureForDifferentStereoFramework(Vuforia.DigitalEyewearARController.StereoFramework)">
      <summary>
            Use this method to configure a 3rd party stereo framework if the ARCamera has been configured for handheld 
            use case and you want to switch to a stereo viewer experience. After calling this method, use SetMode() 
            to switch to the new mode. The MixedRealityController will default to using the Vuforia stereo framework if this method is not called before.
            If this has been configured in the ARCamera inspector before, it is not necessary to set it using this method.
            </summary>
    </member>
    <member name="P:Vuforia.MixedRealityController.AutoStopCameraIfNotRequired">
      <summary>
            By default, the camera is stopped in VR modes if it is not required for detection and tracking.
            Set this to false to prevent the camera from stopping automatically in these modes, e.g. in cases
            where the transition from VR to AR should be as seamless as possible.
            </summary>
    </member>
    <member name="T:Vuforia.RotationalDeviceTracker">
      <summary>
            The RotationalDeviceTracker tracks a device in the world by relying on
            3DOF sensor tracking, delivering rotation only. The RotationalDeviceTracker
            publishes DeviceTrackableResults. DeviceTrackableResults are in world 
            coordinate system and use a physical unit (meter).
            A rotational device tracker can use model correction to improve the 
            returned pose based on the context usage (e.g. on the  head for doing 
            head tracking,  holding device in your hands for handheld tracking, etc). 
            This tracker also supports a pose prediction mode to improve the quality 
            of returned pose. You should only use this mode in VR configuration!
            </summary>
    </member>
    <member name="F:Vuforia.RotationalDeviceTracker.MODEL_CORRECTION_MODE.NONE">
      <summary>
            Model Correction is disabled 
            </summary>
    </member>
    <member name="F:Vuforia.RotationalDeviceTracker.MODEL_CORRECTION_MODE.HEAD">
      <summary>
            Use a Head Model Correction
            </summary>
    </member>
    <member name="F:Vuforia.RotationalDeviceTracker.MODEL_CORRECTION_MODE.HANDHELD">
      <summary>
            Use a Handheld Model Correction
            </summary>
    </member>
    <member name="M:Vuforia.RotationalDeviceTracker.RecenterPose">
      <summary>
            Recenters the device tracker pose to the current transform of the ARCamera
            </summary>
    </member>
    <member name="M:Vuforia.RotationalDeviceTracker.RecenterPose(System.Boolean)">
      <summary>
            Recenters the device tracker pose
            </summary>
      <param name="resetToCurrentPose">Whether to reset to the current pose of the ARCamera or the one that was last reset to.</param>
    </member>
    <member name="M:Vuforia.RotationalDeviceTracker.SetPosePrediction(System.Boolean)">
      <summary>
            Enable pose prediction to improve tracking position.
            Recommended to use this mode for VR experience.
            </summary>
    </member>
    <member name="M:Vuforia.RotationalDeviceTracker.GetPosePrediction">
      <summary>
            Get the current pose prediction mode
            by default prediction is off.
            </summary>
    </member>
    <member name="M:Vuforia.RotationalDeviceTracker.SetModelCorrectionMode(Vuforia.RotationalDeviceTracker.MODEL_CORRECTION_MODE)">
      <summary>
            Specify a correction mode of the returned pose with default correction offsets.
            The rotational device tracker supports two transform models: 
            - Head: for head tracking (VR, rotational AR experience)
            - Handheld: for handheld tracking.
            By default no transform model is used.
            Use the method SetModelCorrectionModeWithTransform if you want to specify 
            a custom pivot point for the transform model.
            </summary>
    </member>
    <member name="M:Vuforia.RotationalDeviceTracker.GetModelCorrectionMode">
      <summary>
            Get the currently set transform model used for correction.
            By default no transform model is used.
            </summary>
    </member>
    <member name="M:Vuforia.RotationalDeviceTracker.SetModelCorrectionModeWithTransform(Vuforia.RotationalDeviceTracker.MODEL_CORRECTION_MODE,UnityEngine.Vector3)">
      <summary>
            Specify a correction mode of the returned pose with a custom 
            correction offset. This is specified as an offset from the pivot point
            (e.g. neck) to the device.
            The rotational device tracker supports two transform models: 
            - Head: for head tracking (VR, rotational AR experience)
            - Handheld: for handheld tracking.
            By default no transform model is used.
            Use the method SetModelCorrectionMode if you want to use default pivot points.
            transform models.
            </summary>
    </member>
    <member name="M:Vuforia.RotationalDeviceTracker.GetModelCorrectionTransform">
      <summary>
            Get the current correction offset for the rotation. This is specified as an offset from the pivot point
            (e.g. neck) to the device.
            This can be a custom pivot point or the default pivot point for the selected transform model.
            </summary>
    </member>
    <member name="T:Vuforia.FactorySetter">
      <summary>
            Attribute used to mark up a function that initialized a factory.
            Used from ComponentFactoryStarterBehaviour.
            </summary>
    </member>
    <member name="T:Vuforia.BackgroundPlaneBehaviour">
      <summary>
            This Behaviour renders the video background from the camera in Unity.
            </summary>
    </member>
    <member name="P:Vuforia.BackgroundPlaneBehaviour.NumDivisions">
      <summary>
            This property is used for configuring the size of video background mesh.
            </summary>
    </member>
    <member name="M:Vuforia.BackgroundPlaneBehaviour.OnVideoBackgroundConfigChanged">
      <summary>
            reset the video background
            </summary>
    </member>
    <member name="T:Vuforia.IViewerParametersList">
      <summary>
            The interface to the list of ViewerParameters that can be selected.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParametersList.Size">
      <summary>
            Returns the number of items in the list.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParametersList.Get(System.Int32)">
      <summary>
            Returns the item at the specified index. 
            Returns null if the index is out of range.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParametersList.Get(System.String,System.String)">
      <summary>
            Returns ViewerParameters for the specified viewer name and manufacturer. 
            Returns null if no viewer was matched.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParametersList.SetSDKFilter(System.String)">
      <summary>
            Set a filter for a 3rd party VR SDK
            </summary>
            Allows the list to be filtered for a specific 3rd party SDK. 
            Known SDK is "CARDBOARD".
            To return to the default list of viewers set the filter to the empty string.
        </member>
    <member name="M:Vuforia.IViewerParametersList.GetAllViewers">
      <summary>
            Get the list of all supported Vuforia Viewers 
            </summary>
    </member>
    <member name="T:Vuforia.ObjectTargetBehaviour">
      <summary>
            This class serves both as an augmentation definition for a ObjectTarget in the editor
            as well as a tracked ObjectTarget result at runtime
            </summary>
    </member>
    <member name="P:Vuforia.ObjectTargetBehaviour.ObjectTarget">
      <summary>
            The ObjectTarget that this ObjectTargetBehaviour augments
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTargetBehaviour.SetBoundingBox(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
            Set the Bounding Box (only in editor mode).
            </summary>
      <param name="minBBox">bounding box min position</param>
      <param name="maxBBox">bounding box max position</param>
    </member>
    <member name="M:Vuforia.ObjectTargetBehaviour.GetSize">
      <summary>
            Returns the size of this target in scene units
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTargetBehaviour.SetLength(System.Single)">
      <summary>
            Set the length (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
      <param name="length">length value</param>
    </member>
    <member name="M:Vuforia.ObjectTargetBehaviour.SetWidth(System.Single)">
      <summary>
            Set the width (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
      <param name="width">width value</param>
    </member>
    <member name="M:Vuforia.ObjectTargetBehaviour.SetHeight(System.Single)">
      <summary>
            Set the height (z-dimension) of the target in scene units.
            This will scale the target uniformly.
            </summary>
      <param name="height">height value</param>
    </member>
    <member name="T:Vuforia.CameraDevice">
      <summary>
            This class provides access to camera methods and properties
            </summary>
    </member>
    <member name="T:Vuforia.CameraDevice.CameraDeviceMode">
      <summary>
            The mode used for camera capturing and video rendering.
            The camera device mode is set through the Unity inspector.
            </summary>
    </member>
    <member name="T:Vuforia.CameraDevice.FocusMode">
      <summary>
            The different focus modes for the active camera
            </summary>
    </member>
    <member name="T:Vuforia.CameraDevice.CameraDirection">
      <summary>
            If the front, back or default camera on a device should be used
            Not all devices have both a back and a front camera.
            </summary>
    </member>
    <member name="T:Vuforia.CameraDevice.VideoModeData">
      <summary>
            This struct stores video mode data. This includes the width and height of
            the frame and the framerate of the camera.
            </summary>
    </member>
    <member name="T:Vuforia.CameraDevice.CameraField">
      <summary>
            Camera fields are advanced properties of the camera
            
            Camera fields represent advanced camera properties and capture parameters such as
            exposure compensation, ISO and others. A field may be read only (e.g. maximum
            exposure compensation value) or read-write (e.g. exposure compensation value).
            
            Camera fields are accessed as key-value pairs, where the value may be one of
            multiple basic types.
            
            Camera fields are highly platform dependent and the keys to identify a given
            property and available values to set will vary across operating system,
            operating system version, camera API version and the device model itself.
            Furthermore the behavior of the camera driver wrt. these fields is highly
            ragmented. Thus CameraFields should only be used for specific use case and devices.
            
            All of the Camera field APIs shall be called only after initializing the
            CameraDevice.
            
            Camera Fields are currently only implemented for Android.
            
            Finally setting advanced camera parameters may adversely affect Vuforia
            tracking performance as well as cause functional issues.
            </summary>
    </member>
    <member name="F:Vuforia.CameraDevice.CameraField.DataType.TypeInt64">
            Null terminated array of characters (Ascii)
        </member>
    <member name="F:Vuforia.CameraDevice.CameraField.DataType.TypeFloat">
            64 bit signed integer
        </member>
    <member name="F:Vuforia.CameraDevice.CameraField.DataType.TypeBool">
            Single precision floating point
        </member>
    <member name="F:Vuforia.CameraDevice.CameraField.DataType.TypeInt64Range">
            Boolean
        </member>
    <member name="F:Vuforia.CameraDevice.CameraField.DataType.TypeUnknown">
            Array of two 32 bit signed integer
        </member>
    <member name="F:Vuforia.CameraDevice.CameraField.Type">
      <summary>
            The data type of this field
            </summary>
    </member>
    <member name="F:Vuforia.CameraDevice.CameraField.Key">
      <summary>
            The key to identify this field
            </summary>
    </member>
    <member name="T:Vuforia.CameraDevice.Int64Range">
      <summary>
            A struct describing a range of 64 bit integers with a lower and upper bound
            </summary>
    </member>
    <member name="P:Vuforia.CameraDevice.Instance">
      <summary>
            Returns an instance of a CameraDevice (thread safe)
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.Init(Vuforia.CameraDevice.CameraDirection)">
      <summary>
            Initializes the camera.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.Deinit">
      <summary>
            Deinitializes the camera.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.Start">
      <summary>
            Starts the camera. Frames are being delivered.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.Stop">
      <summary>
            Stops the camera if video feed is not required
            (e.g. in non-AR mode of an application).
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.IsActive">
      <summary>
            If the Camera has been started
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetVideoMode">
      <summary>
             Get the video mode data that matches the selected CameraDeviceMode.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetVideoMode(Vuforia.CameraDevice.CameraDeviceMode)">
      <summary>
             Get the video mode data that matches the given CameraDeviceMode.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SelectVideoMode(Vuforia.CameraDevice.CameraDeviceMode)">
      <summary>
            Chooses a video mode out of the list of modes.
            This function can be only called after the camera device has been
            initialized but not started yet. Once you have started the camera and
            you need the select another video mode, you need to Stop(), Deinit(),
            then Init() the camera before calling SelectVideoMode() again.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetSelectedVideoMode(Vuforia.CameraDevice.CameraDeviceMode@)">
      <summary>
            Can be used to query a previously set camera device mode.
            Will return false if the mode has not been set yet.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SetFlashTorchMode(System.Boolean)">
      <summary>
            Activate or deactivate the camera device flash.
            Returns false if flash is not available or can't be activated.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SetFocusMode(Vuforia.CameraDevice.FocusMode)">
      <summary>
            Set the active focus mode.
            Returns false if this mode is not available or can't be activated.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SetFrameFormat(Vuforia.Image.PIXEL_FORMAT,System.Boolean)">
      <summary>
             Enables or disables the request of the camera image in the desired pixel
            format. Returns true on success, false otherwise. Note that this may
            result in processing overhead. Image are accessed using GetCameraImage.
            Note that there may be a delay of several frames until the camera image
            becomes availables.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetCameraImage(Vuforia.Image.PIXEL_FORMAT)">
      <summary>
            Returns a camera images for the requested format. Returns null if
            this image is not available. You must call SetFrameFormat before
            accessing the corresponding camera image.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetCameraDirection">
      <summary>
            Get the active camera direction.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetSelectedCameraDirection(Vuforia.CameraDevice.CameraDirection@)">
      <summary>
            Get the last selected camera direction.
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetCameraFieldOfViewRads">
      <summary>
            Get the field of view for the active camera.
            This is a Vector2 containing the x- and y- components of the FOV in radians.
            If the value cannot be obtained for some reason, then Vector2.zero will be returned
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetCameraFields">
      <summary>
            Get available camera fields
            Note: this may not be the complete set of camera fields available on this
            device and some keys may not be supported on every device
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SetField(System.String,System.String)">
      <summary>
            Write accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SetField(System.String,System.Int64)">
      <summary>
            Write accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SetField(System.String,System.Single)">
      <summary>
            Write accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SetField(System.String,System.Boolean)">
      <summary>
            Write accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.SetField(System.String,Vuforia.CameraDevice.Int64Range)">
      <summary>
            Write accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetField(System.String,System.String@)">
      <summary>
            Read accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetField(System.String,System.Int64@)">
      <summary>
            Read accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetField(System.String,System.Single@)">
      <summary>
            Read accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetField(System.String,System.Boolean@)">
      <summary>
            Read accessors for camera fields
            </summary>
    </member>
    <member name="M:Vuforia.CameraDevice.GetField(System.String,Vuforia.CameraDevice.Int64Range@)">
      <summary>
            Read accessors for camera fields
            </summary>
    </member>
    <member name="T:Vuforia.CloudRecoBehaviour">
      <summary>
            This is the main behaviour class that encapsulates cloud recognition behaviour.
            It just has to be added to a Vuforia-enabled Unity scene and will initialize the target finder and wait for new results.
            State changes and new results will be sent to registered ICloudRecoEventHandlers
            </summary>
    </member>
    <member name="P:Vuforia.CloudRecoBehaviour.CloudRecoEnabled">
      <summary>
            If cloud has been enabled in the menu
            </summary>
    </member>
    <member name="P:Vuforia.CloudRecoBehaviour.CloudRecoInitialized">
      <summary>
            If cloud reco has been initialized yet
            </summary>
    </member>
    <member name="M:Vuforia.CloudRecoBehaviour.RegisterEventHandler(Vuforia.ICloudRecoEventHandler)">
      <summary>
            Registers an event handler with this CloudRecoBehaviour which will be called on events
            </summary>
    </member>
    <member name="M:Vuforia.CloudRecoBehaviour.UnregisterEventHandler(Vuforia.ICloudRecoEventHandler)">
      <summary>
            Unregisters an event handler
            </summary>
    </member>
    <member name="T:Vuforia.HideExcessAreaUtility">
      <summary>
            This Behaviour creates clipping planes to hide the augmentation going off the limit of video background due to scaling.
            The clipping needs to be configured in the VideoBackgroundManager.
            Clipping will only occur when a viewer is present and stereo rendering is enabled. In addition, the behaviour can
            be enabled or disabled manually..
            </summary>
    </member>
    <member name="T:Vuforia.HideExcessAreaUtility.CLIPPING_MODE">
      <summary>
            Type of clipping techniques used by the HideExcessAreaBehaviour
            </summary>
    </member>
    <member name="F:Vuforia.HideExcessAreaUtility.CLIPPING_MODE.CLIP">
      <summary>
            draws a full screen quad at the near plane of each camera that clips area around the video background using a stencil mask
            </summary>
    </member>
    <member name="F:Vuforia.HideExcessAreaUtility.CLIPPING_MODE.NONE">
      <summary>
            no clipping
            </summary>
    </member>
    <member name="T:Vuforia.NullUnityPlayer">
      <summary>
            This class encapsulates functionality to handle various life cycle events
            (initializing Vuforia, pause events, surface changed events)
            </summary>
    </member>
    <member name="M:Vuforia.NullUnityPlayer.StartScene">
      <summary>
            Called on start each time a new scene is loaded
            </summary>
    </member>
    <member name="T:Vuforia.Device">
      <summary>
            Vuforia abstract representation of the Device (hardware) that it is running on.
            </summary>
      <remarks>
            This class provides for the management of the viewer that Vuforia will
            create RenderingPrimitives for. A viewer is hardware worn by the user for
            example a VR enclosure for a mobile phone or a dedicated eyewear device.
            </remarks>
    </member>
    <member name="T:Vuforia.Device.Mode">
      <summary>
            Rendering mode (AR or VR)
            </summary>
    </member>
    <member name="F:Vuforia.Device.Mode.MODE_AR">
      <summary>
            Augmented Reality (AR) mode
            </summary>
    </member>
    <member name="F:Vuforia.Device.Mode.MODE_VR">
      <summary>
            Virtual Reality (VR) mode
            </summary>
    </member>
    <member name="P:Vuforia.Device.Instance">
      <summary>
            Returns the singleton instance of a Device (thread safe).
            An EyewearDevice is returned if Vuforia is running on a dedicated eyewear device.
            </summary>
    </member>
    <member name="M:Vuforia.Device.GetMode">
      <summary>
            Get the current rendering mode.
            </summary>
    </member>
    <member name="M:Vuforia.Device.IsViewerActive">
      <summary>
            Returns true if a viewer is active, false otherwise.
            </summary>
            The viewer can be set active in the DigitalEyewearBehaviour
        </member>
    <member name="M:Vuforia.Device.GetViewerList">
      <summary>
            Get the list of ViewerParameters known to the system.
            </summary>
    </member>
    <member name="M:Vuforia.Device.SelectViewer(Vuforia.IViewerParameters)">
      <summary>
            Select the viewer to use, either with ViewerParameters from the ViewerParametersList or CustomViewerParameters.
            </summary>
    </member>
    <member name="M:Vuforia.Device.GetSelectedViewer">
      <summary>
            Returns the ViewerParameters for the currently selected viewer.
            </summary>
    </member>
    <member name="M:Vuforia.Device.CreateCustomViewerParameters(System.Single,System.String,System.String)">
      <summary>
            Create custom viewer parameters
            </summary>
            The viewer parameters have to be defined before selecting the viewer.
        </member>
    <member name="T:Vuforia.ViewerButtonType">
      <summary>
            Possible viewer button types
            </summary>
    </member>
    <member name="F:Vuforia.ViewerButtonType.BUTTON_TYPE_NONE">
      <summary>
            The viewer has no button.
            </summary>
    </member>
    <member name="F:Vuforia.ViewerButtonType.BUTTON_TYPE_MAGNET">
      <summary>
            The viewer has a magnet button.
            </summary>
    </member>
    <member name="F:Vuforia.ViewerButtonType.BUTTON_TYPE_FINGER_TOUCH">
      <summary>
            The viewer allows the user to touch the screen.
            </summary>
    </member>
    <member name="F:Vuforia.ViewerButtonType.BUTTON_TYPE_BUTTON_TOUCH">
      <summary>
            The viewer has a button which touches the screen when pressed.
            </summary>
    </member>
    <member name="T:Vuforia.ViewerTrayAlignment">
      <summary>
            Possible viewer tray alignment values
            </summary>
    </member>
    <member name="F:Vuforia.ViewerTrayAlignment.TRAY_ALIGN_BOTTOM">
      <summary>
            The bottom of the phone is aligned with the bottom of the viewer.
            </summary>
    </member>
    <member name="F:Vuforia.ViewerTrayAlignment.TRAY_ALIGN_CENTRE">
      <summary>
            The center of the phone screen is aligned with the center of the viewer lens.
            </summary>
    </member>
    <member name="F:Vuforia.ViewerTrayAlignment.TRAY_ALIGN_TOP">
      <summary>
            The top of the phone is aligned with the top of the viewer.
            </summary>
    </member>
    <member name="T:Vuforia.IViewerParameters">
      <summary>
            Container class for parameters needed to define a viewer
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetVersion">
      <summary>
            Returns the version of this ViewerParameters.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetName">
      <summary>
            Returns the name of the viewer.
            </summary>
            Name and Manufacturer form a unique id for a viewer.
        </member>
    <member name="M:Vuforia.IViewerParameters.GetManufacturer">
      <summary>
            Returns the manufacturer of the viewer.
            </summary>
            Name and Manufacturer form a unique id for a viewer.
        </member>
    <member name="M:Vuforia.IViewerParameters.GetButtonType">
      <summary>
            Returns the type of button in the viewer.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetScreenToLensDistance">
      <summary>
            Returns the distance between the phone screen and the viewer lens' in meters.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetInterLensDistance">
      <summary>
            Returns the distance between the viewer lens' in meters.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetTrayAlignment">
      <summary>
            Returns how the phone sits within the viewer.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetLensCentreToTrayDistance">
      <summary>
            Returns the distance between the lens' and the tray position in meters.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetNumDistortionCoefficients">
      <summary>
            Returns the number of distortion coefficients specified for the viewer lens'.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetDistortionCoefficient(System.Int32)">
      <summary>
            Returns the distortion coefficient at the specified index, 0 if index is out of range.
            </summary>
    </member>
    <member name="M:Vuforia.IViewerParameters.GetFieldOfView">
      <summary>
            Get field-of-view of the lens'.
            </summary>
      <returns>Vector containing the half angles in order Outer (ear), Inner (nose), top, bottom in degrees</returns>
    </member>
    <member name="M:Vuforia.IViewerParameters.ContainsMagnet">
      <summary>
            Returns true if the viewer contains a magnet, false otherwise.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaBehaviour.Instance">
      <summary>
            A simple static singleton getter to the VuforiaBehaviour (if present in the scene)
            Will return null if no VuforiaBehaviour has been instantiated in the scene.
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaConfiguration">
      <summary>
            Global settings for Vuforia which are used for all scenes
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.LicenseKey">
      <summary>
            The license key can only be changed before the first scene is loaded,
            e.g. with the RuntimeInitializeOnLoadMethod-attribute
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.DelayedInitialization">
      <summary>
            If delayed initialization is enabled, the developer has to initialize Vuforia
            manually with <see cref="M:Vuforia.VuforiaRuntime.InitVuforia" />.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.CameraDeviceMode">
      <summary>
            The mode used for camera capturing and video rendering.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.MaxSimultaneousImageTargets">
      <summary>
            How many targets to detect and track at the same time
            </summary>
            This setting affects image, cylinder and multi targets
        </member>
    <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.MaxSimultaneousObjectTargets">
      <summary>
            How many object targets to detect and track at the same time
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.UseDelayedLoadingObjectTargets">
      <summary>
            Loading for object target datasets can be delayed upon first detection
            This setting tells the tracker to enable/disable delayed loading 
            of object target datasets upon first detection. 
            Loading time of large object dataset will be reduced 
            but the initial detection time of targets will increase.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.CameraDirection">
      <summary>
            Camera direction can face in the opposite or the same direction as the screen.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.GenericVuforiaConfiguration.MirrorVideoBackground">
      <summary>
            Whether the video background image is mirrored horizontally
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.VideoBackgroundConfiguration.ClippingMode">
      <summary>
            Define type of clipping rendering beyond the video background
            if stereo cameras are used.
            </summary>
            It is recommended to use the Stencil-mode.
            The MatteShader has to be updated if the clipping-mode is changed.
        </member>
    <member name="P:Vuforia.VuforiaConfiguration.VideoBackgroundConfiguration.MatteShader">
      <summary>
            This shader is used for the clipping mechanism.
            Default shaders are ClippingMask for stencil-clipping
            and DepthMask for planes-clipping
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.VideoBackgroundConfiguration.VideoBackgroundEnabled">
      <summary>
            Enable or disable rendering the video background
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.TrackerConfiguration.AutoInitAndStartTracker">
      <summary>
            Whether the tracker is automatically initialized and started
            in a new scene
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.TrackingMode">
      <summary>
            Tracking mode configures the DeviceTracker to deliver 3DOF (rotational)
            or 6DOF (positional) device poses. Note that 6DOF may not be available
            on all platforms and devices.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.PosePrediction">
      <summary>
            Enabling pose prediction improves tracking the position. 
            Recommended to enable for VR experience
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ModelCorrectionMode">
      <summary>
            Whether the returned pose is corrected with default correction offsets.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ModelTransformEnabled">
      <summary>
            If true, the custom model transform <see cref="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ModelTransform" /> is used, 
            otherwise the default transform.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ModelTransform">
      <summary>
            A custom correction offset is used for the model correction.
            This is only used when <see cref="P:Vuforia.VuforiaConfiguration.DeviceTrackerConfiguration.ModelTransformEnabled" /> is true.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaConfiguration.Instance">
      <summary>
            Get singleton-instance at runtime
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntime.InitPlatform(Vuforia.IUnityPlayer)">
      <summary>
            Initialize correct platform-specific player
            </summary>
      <param name="player">This needs to be the correct player for the current platform</param>
    </member>
    <member name="M:Vuforia.VuforiaRuntime.InitVuforia">
      <summary>
            Initialize Vuforia. This has to be called after InitPlatform
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntime.Deinit">
      <summary>
            Deinitialize Vuforia when application is quit.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntime.RegisterVuforiaInitErrorCallback(System.Action{Vuforia.VuforiaUnity.InitError})">
      <summary>
            Register for a callback that is invoked if Vuforia initialization fails.
            More than one callback can be registered.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntime.UnregisterVuforiaInitErrorCallback(System.Action{Vuforia.VuforiaUnity.InitError})">
      <summary>
            Unregister a previously registered callback.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaRuntime.HasInitialized">
      <summary>
            Returns whether Vuforia has been initialized
            </summary>
    </member>
    <member name="T:Vuforia.VuMarkBehaviour">
      <summary>
            This class serves both as an augmentation definition for a VuMark template in the editor
            as well as a tracked VuMark result at runtime
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkBehaviour.VuMarkTemplate">
      <summary>
            VuMark-template is available at runtime independent whether
            this behaviour is currently tracked or not
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkBehaviour.VuMarkTarget">
      <summary>
            VuMark-target is only available while this behaviour is tracked
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkBehaviour.Origin">
      <summary>
            Get origin of pose. The origin is (0,0) if the instance image is centered
            around the origin.
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkBehaviour.GetSize">
      <summary>
            Returns the size of this target in scene units
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkBehaviour.SetWidth(System.Single)">
      <summary>
            Set the width (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            The dataset has to be deactivated before changing the size.
            Make sure to set the same size for all instantiated behaviours
            of the same VuMark-template
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkBehaviour.SetHeight(System.Single)">
      <summary>
            Set the height (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            The dataset has to be deactivated before changing the size.
            Make sure to set the same size for all instantiated behaviours
            of the same VuMark-template
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkBehaviour.RegisterVuMarkTargetAssignedCallback(System.Action)">
      <summary>
            Register callback which is invoked whenever a new VuMark-target is assigned to this behaviour
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkBehaviour.UnregisterVuMarkTargetAssignedCallback(System.Action)">
      <summary>
            Unregister callback
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkBehaviour.RegisterVuMarkTargetLostCallback(System.Action)">
      <summary>
            Register callback which is invoked whenever a VuMark-target is removed from the behaviour, i.e. it is not tracked anymore
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkBehaviour.UnregisterVuMarkTargetLostCallback(System.Action)">
      <summary>
            Unregister callback
            </summary>
    </member>
    <member name="T:Vuforia.VuMarkManager">
      <summary>
            This class manages all VuMark-targets which are created at runtime
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.GetActiveVuMarks">
      <summary>
            Returns all currently tracked VuMark-targets
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.GetActiveBehaviours(Vuforia.VuMarkTarget)">
      <summary>
            Get the VuMark-behaviour that is associated with a currently tracked VuMark
            </summary>
      <param name="vuMark">trackable</param>
      <returns>resulting VuMark behaviours, might be empty if specified VuMark is not associated to a behaviour</returns>
    </member>
    <member name="M:Vuforia.VuMarkManager.GetActiveBehaviours">
      <summary>
            Returns all currently tracked VuMark behaviours
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.GetAllBehaviours">
      <summary>
            Returns all instantiated VuMark behaviours, even those that are currently
            not associated with a VuMark-target and not tracked
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.RegisterVuMarkDetectedCallback(System.Action{Vuforia.VuMarkTarget})">
      <summary>
            Register a callback which is invoked whenever a VuMark-target is newly detected which was not tracked in the frame before
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.UnregisterVuMarkDetectedCallback(System.Action{Vuforia.VuMarkTarget})">
      <summary>
            Unregister callback for newly detected VuMark-targets
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.RegisterVuMarkLostCallback(System.Action{Vuforia.VuMarkTarget})">
      <summary>
            Register a callback which is invoked whenever all instances of a VuMark-target are lost and it is not tracked anymore
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.UnregisterVuMarkLostCallback(System.Action{Vuforia.VuMarkTarget})">
      <summary>
            Unregister callback for lost VuMark-targets
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.RegisterVuMarkBehaviourDetectedCallback(System.Action{Vuforia.VuMarkBehaviour})">
      <summary>
            Register a callback which is invoked whenever a VuMark-result is newly detected which was not tracked in the frame before
            </summary>
    </member>
    <member name="M:Vuforia.VuMarkManager.UnregisterVuMarkBehaviourDetectedCallback(System.Action{Vuforia.VuMarkBehaviour})">
      <summary>
            Unregister callback for newly detected VuMark-results
            </summary>
    </member>
    <member name="F:Vuforia.InstanceIdType.BYTES">
      <summary>
            Generic byte data, stored in little-endian order in the buffer.
            For example, and ID of 0x123456 would appear as { 0x56, 0x34, 0x12 }
            </summary>
    </member>
    <member name="F:Vuforia.InstanceIdType.STRING">
      <summary>
            Printable ASCII string data.
            </summary>
    </member>
    <member name="F:Vuforia.InstanceIdType.NUMERIC">
      <summary>
            Numeric data, no larger than a 64 bit unsigned long long.
            </summary>
    </member>
    <member name="T:Vuforia.InstanceId">
      <summary>
            The InstanceId contains the id for a particular VuMark.
            </summary>
    </member>
    <member name="P:Vuforia.InstanceId.DataType">
      <summary>
            The type of data the InstanceId contains.
            </summary>
    </member>
    <member name="P:Vuforia.InstanceId.Buffer">
      <summary>
            The raw byte buffer ID data.
            </summary>
    </member>
    <member name="P:Vuforia.InstanceId.HexStringValue">
      <summary>
            TEMP: Helper method for displaying the instance ID.
            </summary>
    </member>
    <member name="P:Vuforia.InstanceId.StringValue">
      <summary>
            Returns the byte buffer interpreted as an ASCII string if the datatype
            is marked as a STRING, an empty string otherwise.
            </summary>
    </member>
    <member name="P:Vuforia.InstanceId.NumericValue">
      <summary>
            Returns the byte buffer as a 64bit unsigned long if the data type is
            marked as a NUMBER. 0 is returned otherwise.
            </summary>
    </member>
    <member name="T:Vuforia.VuMarkTarget">
      <summary>
            The VuMarkTarget contains all data for a VuMark which is available upon
            detection. This data does not change while the VuMark is tracked.
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkTarget.InstanceId">
      <summary>
            Returns the instance ID for the detected VuMark
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkTarget.Template">
      <summary>
            Returns the template that this VuMark is based on.
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkTarget.InstanceImage">
      <summary>
            Returns the generated image of the detected VuMark.
            </summary>
    </member>
    <member name="T:Vuforia.VuMarkTemplate">
      <summary>
            The VuMarkTemplate contains all static data of a VuMark which
            is available from the dataset.
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkTemplate.VuMarkUserData">
      <summary>
            Gets the user data associated with this template that comes from 
            the dataset.  If there is no VuMark use data associated with this 
            template, an empty string is returned.
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkTemplate.Origin">
      <summary>
            Returns the size-scaled origin of the VuMark
            </summary>
    </member>
    <member name="P:Vuforia.VuMarkTemplate.TrackingFromRuntimeAppearance">
      <summary>
            Sets or gets whether the VuMark has a changing background per instance, signaling
            to SDK how to track it. 
            </summary>
            Setting TrackingFromRuntimeAppearance to true indicates that the SDK 
            should track this type of VuMark based on what is seen by the camera and 
            not assume the template background image is useful for tracking because 
            the background can change per instance. 
            Setting TrackingFromRuntimeAppearance to false indicates that the SDK
            should track this type of VuMark based on VuMark Template used to create 
            the dataset. This is the default behavior.
        </member>
    <member name="T:Vuforia.WorldCenterTrackableBehaviour">
      <summary>
            This interface represents a TrackableBehaviour that can be set as the world center trackable
            </summary>
    </member>
    <member name="P:Vuforia.WorldCenterTrackableBehaviour.Trackable">
      <summary>
            The Trackable created at runtime that is augmented by this TrackableBehaviour
            </summary>
    </member>
    <member name="T:Vuforia.CylinderTarget">
      <summary>
            A trackable that represents a cylinder or conical object
            </summary>
    </member>
    <member name="M:Vuforia.CylinderTarget.GetSideLength">
      <summary>
            Returns the side length (or slanted height) of the cylinder target in 3D scene units
            </summary>
    </member>
    <member name="M:Vuforia.CylinderTarget.GetTopDiameter">
      <summary>
            Returns the top diameter of the cylinder target in 3D scene units
            </summary>
    </member>
    <member name="M:Vuforia.CylinderTarget.GetBottomDiameter">
      <summary>
            Returns the bottom diameter of the cylinder target in 3D scene units
            </summary>
    </member>
    <member name="M:Vuforia.CylinderTarget.SetSideLength(System.Single)">
      <summary>
            Define a new side length of the cylinder target.
            This will uniformly scale the cylinder and thus also update top and bottom diameter.
            This is only allowed when the dataset is not active!
            </summary>
    </member>
    <member name="M:Vuforia.CylinderTarget.SetTopDiameter(System.Single)">
      <summary>
            Define a new top diameter of the cylinder target.
            This will uniformly scale the cylinder and thus also update side length and bottom diameter.
            This is only allowed when the dataset is not active!
            </summary>
    </member>
    <member name="M:Vuforia.CylinderTarget.SetBottomDiameter(System.Single)">
      <summary>
            Define a new bottom diameter of the cylinder target.
            This will uniformly scale the cylinder and thus also update side length and top diameter.
            This is only allowed when the dataset is not active!
            </summary>
    </member>
    <member name="T:Vuforia.CylinderTargetBehaviour">
      <summary>
            This class serves both as an augmentation definition for a CylinderTarget in the editor
            as well as a tracked CylinderTarget result at runtime
            </summary>
    </member>
    <member name="P:Vuforia.CylinderTargetBehaviour.CylinderTarget">
      <summary>
            The CylinderTarget that this CylinderTargetBehaviour augments
            </summary>
    </member>
    <member name="P:Vuforia.CylinderTargetBehaviour.SideLength">
      <summary>
            Get or set the sidelength (slanted height). Changing this value uniformly scales the target.
            </summary>
    </member>
    <member name="P:Vuforia.CylinderTargetBehaviour.TopDiameter">
      <summary>
            Get or set the top diameter. Changing this value uniformly scales the target.
            </summary>
    </member>
    <member name="P:Vuforia.CylinderTargetBehaviour.BottomDiameter">
      <summary>
            Get or set the bottom diameter. Changing this value uniformly scales the target.
            </summary>
    </member>
    <member name="T:Vuforia.DataSet">
      <summary>
            This class represents a dataset that can be loaded and holds a collection of trackables.
            Trackables can also be created and destroyed at runtime.
            </summary>
    </member>
    <member name="T:Vuforia.DataSet.StorageType">
      <summary>
            Storage type is used to interpret a given path string.
            </summary>
    </member>
    <member name="P:Vuforia.DataSet.Path">
      <summary>
            Returns the path to the data set.
            </summary>
    </member>
    <member name="P:Vuforia.DataSet.FileStorageType">
      <summary>
            Returns the storage type of the data set.
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.Exists(System.String)">
      <summary>
            Checks if a data set exists at the default "StreamingAssets/QCAR"
            or "StreamingAssets/Vuforia" directory.
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.Exists(System.String,Vuforia.VuforiaUnity.StorageType)">
      <summary>
            Checks if a data set exists at the given path.
            Storage type is used to correctly interpret the given path.
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.Load(System.String)">
      <summary>
            Loads a data set from the default "StreamingAssets/QCAR" directory.
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.Load(System.String,Vuforia.VuforiaUnity.StorageType)">
      <summary>
            Loads data set from the given path.
            Storage type is used to correctly interpret the given path.
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.GetTrackables">
      <summary>
            Returns the trackables that are defined in the data set.
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.CreateTrackable(Vuforia.TrackableSource,System.String)">
      <summary>
            Creates a new trackable behaviour attached to a new gameobject with the given name and adds it to this dataset
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.CreateTrackable(Vuforia.TrackableSource,UnityEngine.GameObject)">
      <summary>
            Adds a single trackable from a source and a given gameobject to this dataset
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.Destroy(Vuforia.Trackable,System.Boolean)">
      <summary>
            This method must not be called while the dataset is active or it will return false.
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.HasReachedTrackableLimit">
      <summary>
            Checks if this DataSet's Trackable capacity is reached.
            Returns true if the number of Trackables created in this DataSet
            has reached the maximum capacity, false otherwise.
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.Contains(Vuforia.Trackable)">
      <summary>
            Checks if the given trackable is contained in the DataSet
            </summary>
    </member>
    <member name="M:Vuforia.DataSet.DestroyAllTrackables(System.Boolean)">
      <summary>
            Destroys all existing trackables
            </summary>
    </member>
    <member name="T:Vuforia.DatabaseLoadARController">
      <summary>
            This behaviour allows to automatically load and activate one or more DataSet on startup
            </summary>
    </member>
    <member name="M:Vuforia.DatabaseLoadARController.LoadDatasets">
      <summary>
            Load Datasets is automatically called by VuforiaARController after Vuforia has been initialized correctly
            </summary>
    </member>
    <member name="M:Vuforia.DatabaseLoadARController.AddExternalDatasetSearchDir(System.String)">
      <summary>
            Add an external path to search for datasets, useful when loading datasets from another location or using Android's OBB feature
            </summary>
    </member>
    <member name="T:Vuforia.DataSetTrackableBehaviour">
      <summary>
            This is the base class for all trackables that are part of a dataset
            </summary>
    </member>
    <member name="T:Vuforia.ObjectTarget">
      <summary>
            A trackable that represents a ObjectTarget object
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTarget.StartExtendedTracking">
      <summary>
            Start extended tracking. The Target can be tracked although it is not visible.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTarget.StopExtendedTracking">
      <summary>
            Stop extended tracking. Target will only be tracked when it is visible.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTarget.IsExtendedTrackingStarted">
      <summary>
            Query if extended tracking is started.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTarget.GetSize">
      <summary>
            Returns the size  of the target (in 3D scene units).
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTarget.GetLargestSizeComponent">
      <summary>
            Returns the largets component of the target size.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTarget.SetSize(UnityEngine.Vector3)">
      <summary>
            Sets the size of the target (in 3D scene units).
            This is only allowed when the dataset is not active!
            </summary>
    </member>
    <member name="T:Vuforia.RectangleData">
      <summary>
            This struct defines the 2D coordinates of a rectangle. 
            The struct is internally used for setting Virtual Buttons or getting bounding boxes of letters.
            </summary>
    </member>
    <member name="T:Vuforia.RectangleIntData">
      <summary>
            This struct defines the 2D coordinates of a rectangle using integers. 
            The struct is internally used for querying the region of interest for text tracking.
            </summary>
    </member>
    <member name="T:Vuforia.OrientedBoundingBox">
      <summary>
            This struct defines an oriented rectangle.
            It is internally used for defining the oriented bounding box of tword trackables
            </summary>
    </member>
    <member name="P:Vuforia.OrientedBoundingBox.Center">
      <summary>
            Get the center of the box
            </summary>
    </member>
    <member name="P:Vuforia.OrientedBoundingBox.HalfExtents">
      <summary>
            Get half width and height of the box
            </summary>
    </member>
    <member name="P:Vuforia.OrientedBoundingBox.Rotation">
      <summary>
            Get the counter clock wise rotation of the box in degrees
            with respect to the x axis
            </summary>
    </member>
    <member name="T:Vuforia.OrientedBoundingBox3D">
      <summary>
            This struct defines a 3D box oriented around the Y axis.
            It is internally used for defining the oriented bounding box of tword trackables
            </summary>
    </member>
    <member name="P:Vuforia.OrientedBoundingBox3D.Center">
      <summary>
            Get the center of the box
            </summary>
    </member>
    <member name="P:Vuforia.OrientedBoundingBox3D.HalfExtents">
      <summary>
            Get half width and height of the box
            </summary>
    </member>
    <member name="P:Vuforia.OrientedBoundingBox3D.RotationY">
      <summary>
            Get the counter clock wise rotation of the box in degrees
            with respect to the x axis
            </summary>
    </member>
    <member name="T:Vuforia.ICloudRecoEventHandler">
      <summary>
            An interface for handling cloud reco events.
            </summary>
    </member>
    <member name="M:Vuforia.ICloudRecoEventHandler.OnInitialized">
      <summary>
            called when the CloudRecoBehaviour has finished initializing
            </summary>
    </member>
    <member name="M:Vuforia.ICloudRecoEventHandler.OnInitError(Vuforia.TargetFinder.InitState)">
      <summary>
            called when an error is reported during initialization
            </summary>
    </member>
    <member name="M:Vuforia.ICloudRecoEventHandler.OnUpdateError(Vuforia.TargetFinder.UpdateState)">
      <summary>
            called when an error is reported while updating
            </summary>
    </member>
    <member name="M:Vuforia.ICloudRecoEventHandler.OnStateChanged(System.Boolean)">
      <summary>
            called when the CloudRecoBehaviour starts or stops scanning
            </summary>
    </member>
    <member name="M:Vuforia.ICloudRecoEventHandler.OnNewSearchResult(Vuforia.TargetFinder.TargetSearchResult)">
      <summary>
            called when a new search result is found
            </summary>
    </member>
    <member name="T:Vuforia.IUnityPlayer">
      <summary>
            This class encapsulates functionality to detect various surface events
            (size, orientation changed) and delegate this to native.
            These are used by Unity Extension code and should usually not be called by app code.
            </summary>
    </member>
    <member name="M:Vuforia.IUnityPlayer.LoadNativeLibraries">
      <summary>
            Loads native plugin libraries on platforms where this is explicitly required.
            </summary>
    </member>
    <member name="M:Vuforia.IUnityPlayer.InitializePlatform">
      <summary>
            Initialized platform specific settings
            </summary>
    </member>
    <member name="M:Vuforia.IUnityPlayer.InitializeVuforia(System.String)">
      <summary>
            Initializes Vuforia
            </summary>
    </member>
    <member name="M:Vuforia.IUnityPlayer.StartScene">
      <summary>
            Called on start each time a new scene is loaded
            </summary>
    </member>
    <member name="M:Vuforia.IUnityPlayer.Update">
      <summary>
            Called from Update, checks for various life cycle events that need to be forwarded
            to Vuforia, e.g. orientation changes
            </summary>
    </member>
    <member name="M:Vuforia.IUnityPlayer.OnPause">
      <summary>
            Pauses Vuforia
            </summary>
    </member>
    <member name="M:Vuforia.IUnityPlayer.OnResume">
      <summary>
            Resumes Vuforia
            </summary>
    </member>
    <member name="M:Vuforia.IUnityPlayer.OnDestroy">
      <summary>
            Deinitializes Vuforia
            </summary>
    </member>
    <member name="T:Vuforia.ImageTargetType">
      <summary>
            The type of an ImageTarget. An ImageTarget can be predefined in a dataset,
            created at runtime as a user defined target, or fetched at runtime via
            cloud recognition
            </summary>
    </member>
    <member name="T:Vuforia.ImageTargetData">
      <summary>
            The basic data struct for an ImageTarget
            </summary>
    </member>
    <member name="T:Vuforia.ImageTarget">
      <summary>
            A trackable behaviour to represent a flat natural feature target.
            </summary>
    </member>
    <member name="P:Vuforia.ImageTarget.ImageTargetType">
      <summary>
            The type of this ImageTarget (Predefined, User Defined, Cloud Reco)
            </summary>
    </member>
    <member name="M:Vuforia.ImageTarget.CreateVirtualButton(System.String,Vuforia.RectangleData)">
      <summary>
            Creates a new virtual button and adds it to the ImageTarget
            Returns NULL if the corresponding DataSet is currently active.
            </summary>
    </member>
    <member name="M:Vuforia.ImageTarget.GetVirtualButtonByName(System.String)">
      <summary>
            Returns a virtual button by its name
            Returns NULL if no virtual button with that name
            exists in this ImageTarget
            </summary>
    </member>
    <member name="M:Vuforia.ImageTarget.GetVirtualButtons">
      <summary>
             Returns the virtual buttons that are defined for this imageTarget
            </summary>
    </member>
    <member name="M:Vuforia.ImageTarget.DestroyVirtualButton(Vuforia.VirtualButton)">
      <summary>
            Removes and destroys one of the ImageTarget's virtual buttons
            Returns false if the corresponding DataSet is currently active.
            </summary>
    </member>
    <member name="T:Vuforia.ImageTargetBuilder">
      <summary>
            This class encapsulates all functionality needed to create a user defined target on the fly.
            </summary>
    </member>
    <member name="T:Vuforia.ImageTargetBuilder.FrameQuality">
      <summary>
            The frame quality is used to determine if the current frame can be used to create a good target
            </summary>
    </member>
    <member name="F:Vuforia.ImageTargetBuilder.FrameQuality.FRAME_QUALITY_NONE">
      <summary>
            getFrameQuality was called oustside of scanning mode
            </summary>
    </member>
    <member name="F:Vuforia.ImageTargetBuilder.FrameQuality.FRAME_QUALITY_LOW">
      <summary>
            Poor number of features for tracking
            </summary>
    </member>
    <member name="F:Vuforia.ImageTargetBuilder.FrameQuality.FRAME_QUALITY_MEDIUM">
      <summary>
            Sufficient number features for tracking
            </summary>
    </member>
    <member name="F:Vuforia.ImageTargetBuilder.FrameQuality.FRAME_QUALITY_HIGH">
      <summary>
            Ideal number of features for tracking
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBuilder.Build(System.String,System.Single)">
      <summary>
            Build an Image Target Trackable source from the next available camera frame 
            
            Build an Image Target Trackable Source from the next available camera frame.
            This is an asynchronous process, the result of which will be available from
            getTrackableSource()
            
            This method will return true if the build was successfully started, and false
            if an invalid name or screenSizeWidth is provided.
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBuilder.StartScan">
      <summary>
            Start the scanning mode, allowing calls to getFrameQuality()
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBuilder.StopScan">
      <summary>
            Stop the scanning mode, getFrameQuality will return FRAME_QUALITY_NONE until
            startScan is called again.  Stopping scan mode will reduce the overall system
            utilization when not building ImageTargets.
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBuilder.GetFrameQuality">
      <summary>
            Get frame quality, available after startScan is called.
            
            Will return the frame quality for the last available camera frame, a value
            of FRAME_QUALITY_NONE will be returned if the scanning mode was not enabled.
            via the startScan() method.
            
            This methods makes a marshalling call into native, so buffer the result
            instead of calling it multiple times a frame for better performance.
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBuilder.GetTrackableSource">
      <summary>
            Returns a trackable source object to be used in adding a new target to a dataset
            
            This method will return a TrackableSource to be provided to the DataSet.  This 
            API will return NULL until a trackable source is available.  This trackable
            source will be provided via this api until build() is called again, at which
            point it will return NULL again until a successful build step has occured.
            
            This methods makes a marshalling call into native, so buffer the result
            instead of calling it multiple times a frame for better performance.
            </summary>
    </member>
    <member name="T:Vuforia.IVuforiaWrapper">
      <summary>
            This interface exposes access to all Vuforia methods used by the
            Unity extension.
            </summary>
    </member>
    <member name="T:Vuforia.ITextRecoEventHandler">
      <summary>
            Interface for handling newly detected and lost word results
            </summary>
    </member>
    <member name="M:Vuforia.ITextRecoEventHandler.OnInitialized">
      <summary>
            Called when the text reco system has finished initializing
            </summary>
    </member>
    <member name="M:Vuforia.ITextRecoEventHandler.OnWordDetected(Vuforia.WordResult)">
      <summary>
            Called when a new word has been detected.
            </summary>
      <param name="word">The newly detected word</param>
    </member>
    <member name="M:Vuforia.ITextRecoEventHandler.OnWordLost(Vuforia.Word)">
      <summary>
            Called when a word is not tracked anymore
            </summary>
    </member>
    <member name="T:Vuforia.IUserDefinedTargetEventHandler">
      <summary>
            An interface for handling User Defined Target building events.
            </summary>
    </member>
    <member name="M:Vuforia.IUserDefinedTargetEventHandler.OnInitialized">
      <summary>
            called when the UserDefinedTargetBehaviour has been initialized
            </summary>
    </member>
    <member name="M:Vuforia.IUserDefinedTargetEventHandler.OnFrameQualityChanged(Vuforia.ImageTargetBuilder.FrameQuality)">
      <summary>
            called when the UserDefinedTargetBehaviour reports a new frame Quality
            </summary>
    </member>
    <member name="M:Vuforia.IUserDefinedTargetEventHandler.OnNewTrackableSource(Vuforia.TrackableSource)">
      <summary>
            called when an error is reported during initialization
            </summary>
    </member>
    <member name="T:Vuforia.IVideoBackgroundEventHandler">
      <summary>
            Interface for handling events regarding the video background
            </summary>
    </member>
    <member name="M:Vuforia.IVideoBackgroundEventHandler.OnVideoBackgroundConfigChanged">
      <summary>
            Called after the video background config has been changed
            </summary>
    </member>
    <member name="T:Vuforia.StateManager">
      <summary>
            This class is used to manage the state of all TrackableBehaviours, create them,
            associate them with Trackables, update their pose, etc.
            </summary>
    </member>
    <member name="M:Vuforia.StateManager.GetActiveTrackableBehaviours">
      <summary>
            Returns the TrackableBehaviours currently being tracked except Words
            </summary>
    </member>
    <member name="M:Vuforia.StateManager.GetTrackableBehaviours">
      <summary>
            Returns all currently instantiated TrackableBehaviours except Words
            </summary>
    </member>
    <member name="M:Vuforia.StateManager.DestroyTrackableBehavioursForTrackable(Vuforia.Trackable,System.Boolean)">
      <summary>
            Destroys all the TrackableBehaviours for the given Trackable
            </summary>
    </member>
    <member name="M:Vuforia.StateManager.ReassociateTrackables">
      <summary>
            Removes destroyed behaviours from trackable list and associates newly created behaviours 
            with trackables
            </summary>
            This affects all types of trackables, including Words and VuMarks
        </member>
    <member name="M:Vuforia.StateManager.GetWordManager">
      <summary>
            Returns the word manager instance that can be used to access
            all currently tracked words from TextRecognition
            </summary>
    </member>
    <member name="M:Vuforia.StateManager.GetVuMarkManager">
      <summary>
            Returns the VuMark manager instance that can be used to access
            all available VuMark-templates and all currently tracked VuMarks.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Vuforia.StateManager.GetIlluminationManager">
      <summary>
            Returns the IlluminationManager which provides data
            on estimated illumination of the current frame
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Vuforia.WebCamProfile">
      <summary>
            This class loads a xml file from the streamingassets folder that contains
            information about the webcamera that is used in the emulator
            Most of the code is excluded via ifdefs outside of the editor to avoid
            importing larger Mono libraries for XML parsing when build for a mobile device
            </summary>
    </member>
    <member name="T:Vuforia.ITrackableEventHandler">
      <summary>
            Interface for handling trackable state changes.
            </summary>
    </member>
    <member name="M:Vuforia.ITrackableEventHandler.OnTrackableStateChanged(Vuforia.TrackableBehaviour.Status,Vuforia.TrackableBehaviour.Status)">
      <summary>
            Called when the trackable state has changed.
            </summary>
    </member>
    <member name="T:Vuforia.IVirtualButtonEventHandler">
      <summary>
            An interface for handling virtual button state changes.
            </summary>
    </member>
    <member name="M:Vuforia.IVirtualButtonEventHandler.OnButtonPressed(Vuforia.VirtualButtonBehaviour)">
      <summary>
            Called when the virtual button has just been pressed.
            </summary>
    </member>
    <member name="M:Vuforia.IVirtualButtonEventHandler.OnButtonReleased(Vuforia.VirtualButtonBehaviour)">
      <summary>
            Called when the virtual button has just been released.
            </summary>
    </member>
    <member name="T:Vuforia.Image">
      <summary>
            An image - Used to expose the camera frame.
            
            The image's pixel buffer can have a different size than the
            Wdith and Height properties report. This is e.g. the
            case when an image is used for rendering as a texture without
            non-power-of-two support.
            The real size of the image's pixel buffer can be queried using
            BufferWidth and BufferHeight. 
            </summary>
    </member>
    <member name="T:Vuforia.Image.PIXEL_FORMAT">
      <summary>
            The pixel format of an image
            </summary>
    </member>
    <member name="P:Vuforia.Image.Width">
      <summary>
            The width of the image in pixels. Note the pixel buffer can be
            wider than this.
            </summary>
    </member>
    <member name="P:Vuforia.Image.Height">
      <summary>
            The height of the image in pixels. Note that the pixel buffer
            can be higher than this.
            </summary>
    </member>
    <member name="P:Vuforia.Image.Stride">
      <summary>
            The number bytes from one row of pixels to the next row.
            </summary>
    </member>
    <member name="P:Vuforia.Image.BufferWidth">
      <summary>
            The number of pixel columns that fit into the pixel buffer.
            </summary>
    </member>
    <member name="P:Vuforia.Image.BufferHeight">
      <summary>
            The number of rows that fit into the pixel buffer.
            </summary>
    </member>
    <member name="P:Vuforia.Image.PixelFormat">
      <summary>
            The pixel format of the image.
            </summary>
    </member>
    <member name="P:Vuforia.Image.Pixels">
      <summary>
            The pixel data.
            </summary>
    </member>
    <member name="M:Vuforia.Image.IsValid">
      <summary>
            Returns true if this image has been fully initiailzed with valid data.
            False otherwise.
            </summary>
    </member>
    <member name="M:Vuforia.Image.CopyToTexture(UnityEngine.Texture2D)">
      <summary>
            Copies the image into the given texture. The texture will be resized if necessary.
            </summary>
    </member>
    <member name="T:Vuforia.ImageTargetBehaviour">
      <summary>
            This class serves both as an augmentation definition for an ImageTarget in the editor
            as well as a tracked image target result at runtime
            </summary>
    </member>
    <member name="P:Vuforia.ImageTargetBehaviour.ImageTarget">
      <summary>
            The image target that this ImageTargetBehaviour augments
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBehaviour.CreateVirtualButton(System.String,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
            This method creates a Virtual Button and adds it to this Image Target as
            a direct child.
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBehaviour.CreateVirtualButton(System.String,UnityEngine.Vector2,UnityEngine.GameObject)">
      <summary>
            This methods adds the Virtual Button as a child of "immediateParent".
            Returns null if "immediateParent" is not an Image Target or a child of an
            Image Target.
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBehaviour.GetVirtualButtonBehaviours">
      <summary>
             Returns the virtual button behaviours for this imageTargetBehaviour
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBehaviour.DestroyVirtualButton(System.String)">
      <summary>
            Destroys the virtual button with the given name.
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBehaviour.GetSize">
      <summary>
            Returns the size of this target in scene units
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBehaviour.SetWidth(System.Single)">
      <summary>
            Set the width (x-dimension) of the target in scene units.
            This will scale the target uniformly.
            The dataset of this target has to be deactivated before setting the size.
            </summary>
    </member>
    <member name="M:Vuforia.ImageTargetBehaviour.SetHeight(System.Single)">
      <summary>
            Set the height (y-dimension) of the target in scene units.
            This will scale the target uniformly.
            The dataset of this target has to be deactivated before setting the size.
            </summary>
    </member>
    <member name="T:Vuforia.ObjectTracker">
      <summary>
            The ObjectTracker encapsulates methods to manage DataSets and provides access to
            the ImageTargetBuilder and TargetFinder classes
            </summary>
    </member>
    <member name="P:Vuforia.ObjectTracker.ImageTargetBuilder">
      <summary>
            exposes the ImageTargetBuilder member to other classes
            </summary>
    </member>
    <member name="P:Vuforia.ObjectTracker.TargetFinder">
      <summary>
            exposes the TargetFinder member to other classes
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.CreateDataSet">
      <summary>
            Creates a new empty dataset.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.DestroyDataSet(Vuforia.DataSet,System.Boolean)">
      <summary>
            Destroy the given dataset.
            Returns false if the given dataset is active.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.ActivateDataSet(Vuforia.DataSet)">
      <summary>
            Activates the given dataset.
            Datasets can only be activated when the tracker is not running.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.DeactivateDataSet(Vuforia.DataSet)">
      <summary>
            Deactivates the given dataset.
            This can only be done when the tracker is not running.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.GetActiveDataSets">
      <summary>
            Returns the currently activated datasets. 
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.GetDataSets">
      <summary>
            Returns all datasets.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.DestroyAllDataSets(System.Boolean)">
      <summary>
            Deactivates the currently active dataset and
            destroys all datasets
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.PersistExtendedTracking(System.Boolean)">
      <summary>
            Enables/disables persistent extended tracking
            In persistent extended tracking mode, the environment map will only
            ever be reset when the developer calls resetExtendedTracking().
            This function will return true if persistent extended tracking
            was set successfully (or was already set to the specified value)
            and false otherwise.
            </summary>
    </member>
    <member name="M:Vuforia.ObjectTracker.ResetExtendedTracking">
      <summary>
            Resets environment map for extended tracking
            Environment map can only be reset by the developer if persistent
            extended tracking is enabled and if the tracker is stopped.
            This function will return true if environment map was reset
            successfully and false otherwise.
            </summary>
    </member>
    <member name="T:Vuforia.MultiTarget">
      <summary>
            A trackable that is made up of multiple targets with a fixed spatial
            relation.
            </summary>
    </member>
    <member name="T:Vuforia.MultiTargetBehaviour">
      <summary>
            This class serves both as an augmentation definition for a MultiTarget in the editor
            as well as a tracked MultiTarget result at runtime
            </summary>
    </member>
    <member name="P:Vuforia.MultiTargetBehaviour.MultiTarget">
      <summary>
            The MultiTarget that this MultiTargetBehaviour augments
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaUnity">
      <summary>
            A static utility class that exposes helper functions from Vuforia
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaUnity.InitError">
      <summary>
            InitError is an error value that is returned by Vuforia if something goes
            wrong at initialization.
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaUnity.VuforiaHint">
      <summary>
             Use when calling setHint()
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaUnity.StorageType">
      <summary>
            Storage type is used to interpret a given path string.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.Deinit">
      <summary>
            Deinitializes Vuforia
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.IsRendererDirty">
      <summary>
            Checks if the GL surface has changed
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.SetHint(Vuforia.VuforiaUnity.VuforiaHint,System.Int32)">
      <summary>
            Sets a hint for the Vuforia SDK
            Hints help the SDK to understand the developer's needs.
            However, depending on the device or SDK version the hints
            might not be taken into consideration.
            Returns false if the hint is unknown or deprecated.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.SetHint(System.UInt32,System.Int32)">
      <summary>
            Sets a hint for the Vuforia SDK
            Hints help the SDK to understand the developer's needs.
            However, depending on the device or SDK version the hints
            might not be taken into consideration.
            Returns false if the hint is unknown or deprecated.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.GetProjectionGL(System.Single,System.Single,UnityEngine.ScreenOrientation)">
      <summary>
            Returns the Vuforia projection matrix
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.OnPause">
      <summary>
            Executes AR-specific tasks upon pausing the Unity application
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.OnResume">
      <summary>
            Executes AR-specific tasks upon resuming the Unity application
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.SetRendererDirty">
      <summary>
            Raises a flag that the rendering functionality needs to be reconfigured
            e.g. when the projection matrix of the camera was changed externally.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaUnity.GetVuforiaLibraryVersion">
      <summary>
            Returns the version of the Vuforia SDK
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaARController">
      <summary>
            The VuforiaBehaviour class handles tracking and triggers native video
            background rendering. The class updates all Trackables in the scene.
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaARController.WorldCenterMode">
      <summary>
            The world center mode defines how the relative coordinates between
            Trackables and camera are translated into Unity world coordinates.
            If a world center is present the virtual camera in the Unity scene is
            transformed with respect to that.
            The world center mode is set through the Unity inspector.
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaARController.WorldCenterMode.SPECIFIC_TARGET">
      <summary>
            User defines a single Trackable that defines the world center.
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaARController.WorldCenterMode.FIRST_TARGET">
      <summary>
            Tracker uses the first Trackable that comes into view as the world
            center (world center changes during runtime).
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaARController.WorldCenterMode.CAMERA">
      <summary>
            Do not define a world center but only move Trackables with respect
            to a fixed camera.
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaARController.WorldCenterMode.DEVICE_TRACKING">
      <summary>
            VR-mode: the world center is defined by device tracking
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaARController.WorldCenterModeSetting">
      <summary>
            This property is used to query the active world center mode.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaARController.WorldCenter">
      <summary>
            This property is used to query the world center Trackable
            (will return null in "NONE" mode).
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaARController.VideoBackGroundMirrored">
      <summary>
            This property is used to query if the video background is mirrored
            If true, Backface Culling is automatically reverted.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaARController.CameraDeviceMode">
      <summary>
            This property is used to query the currently set camera device mode
            (DEFAULT, SPEED or QUALITY)
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaARController.HasStarted">
      <summary>
            If Vuforia has started successfully
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.RegisterVuforiaInitializedCallback(System.Action)">
      <summary>
            Register for a callback that is invoked after Vuforia has initialized and before the camera has started.
            Should be called from an Awake() method to not miss the exact callback time between the two.
            More than one callback can be registered.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.UnregisterVuforiaInitializedCallback(System.Action)">
      <summary>
            Unregister a previously registered callback.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.RegisterVuforiaStartedCallback(System.Action)">
      <summary>
            Register for a callback that is invoked after Vuforia has completely started, including camera and trackers.
            More than one callback can be registered.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.UnregisterVuforiaStartedCallback(System.Action)">
      <summary>
            Unregister a previously registered callback.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.RegisterTrackablesUpdatedCallback(System.Action)">
      <summary>
            Register for a callback that is invoked after the state of all trackables has been updated during a frame.
            More than one callback can be registered.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.UnregisterTrackablesUpdatedCallback(System.Action)">
      <summary>
            Unregister a previously registered callback.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.RegisterOnPauseCallback(System.Action{System.Boolean})">
      <summary>
            Register for a callback that is invoked before Vuforia is pausing when the application is paused, 
            and after Vuforia resumes when the applicaiton resumes. This can be used e.g. for restoring
            a focus mode after an applicaiton pause.
            More than one callback can be registered.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.UnregisterOnPauseCallback(System.Action{System.Boolean})">
      <summary>
            Unregister a previously registered callback.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.RegisterBackgroundTextureChangedCallback(System.Action)">
      <summary>
            Register for a callback that is invoked when the background texture is changed.
            More than one callback can be registered.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.UnregisterBackgroundTextureChangedCallback(System.Action)">
      <summary>
            Unregister a previously registered callback.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.RegisterVideoBgEventHandler(Vuforia.IVideoBackgroundEventHandler)">
      <summary>
            This method registers a new video background event handler at the Tracker.
            These handlers are called as soon as the video background config has changed
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.UnregisterVideoBgEventHandler(Vuforia.IVideoBackgroundEventHandler)">
      <summary>
            This method unregisters a video background event handler.
            Returns "false" if event handler does not exist.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.SetWorldCenterMode(Vuforia.VuforiaARController.WorldCenterMode)">
      <summary>
            This method is used to set the world center mode.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.SetWorldCenter(Vuforia.TrackableBehaviour)">
      <summary>
            This method is used to set the world center in "USER" mode.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.GetVideoBackgroundRectInViewPort">
      <summary>
            The are in the viewport that is covered by the video background.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.GetSurfaceOrientation">
      <summary>
            This method returns the surface orientation.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaARController.UpdateState(System.Boolean,System.Boolean)">
      <summary>
            Updates the scene with the latest tracking data and calls various callbacks
            </summary>
      <param name="forceUpdate">Forces updates to be made even if called multiple times during a single frame</param>
      <param name="reapplyOldState">Updates the scene again even when the state has not changed. 
            This can be useful if the camera has been moved, but no new tracking state has been reported yet.</param>
    </member>
    <member name="T:Vuforia.VuforiaManager">
      <summary>
            The VuforiaManager manages updating trackables, their state and position to the camera
            It is called from the VuforiaBehaviour.
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaManager.TrackableIdPair">
      <summary>
            We have to use two different types of ids in the queue for the world center.
            We use this struct to distinguish between result-ids for VuMarks
            and trackable-ids for all other trackables
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaManager.Instance">
      <summary>
            Returns an instance of a VuforiaManager (thread safe)
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaManager.WorldCenterMode">
      <summary>
            World Center Mode setting on the ARCamera
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaManager.WorldCenter">
      <summary>
            World Center setting on the ARCamera
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaManager.VuMarkWorldCenter">
      <summary>
            Define a VuMark template as world center. The first detected VuMark-target with this template
            is considered as world center.
            If only a specific VuMark-behaviour should be used as world center, use the generic WorldCenter-property.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaManager.ARCameraTransform">
      <summary>
            A handle to the ARCamera Transform object or the External Tracking Frame of Reference
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaManager.CentralAnchorPoint">
      <summary>
            This defines the central anchor point transform from which camera pose will be applied to trackables.
            By default this is equivalent to the ARCameraTransform, but when integrated with a 3rd party VR SDK it will point to another object.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaManager.Initialized">
      <summary>
            returns true once the VuforiaManager has been initialized
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaManager.CurrentFrameIndex">
      <summary>
            The frame index of the current Vuforia state
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaManager.Init">
      <summary>
            Initialization
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaManager.Deinit">
      <summary>
            Free globally allocated containers
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaRenderer">
      <summary>
            This class takes care about rendering the video background in the right size and orientation
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaRenderer.FpsHint">
      <summary>
            Application behavior aspects influencing the recommended render frame
            rate. Use as parameters to GetRecommendedFps.
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.FpsHint.NONE">
      <summary>
            No FPS hint defined
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.FpsHint.NO_VIDEOBACKGROUND">
      <summary>
            The application does not draw the video background (in optical see-
            through AR or VR mode). Do not set this flag when in video see-
            through AR mode.
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.FpsHint.POWEREFFICIENCY">
      <summary>
            The application requests conservative power consumption to reduce
            heat accumulation and increase battery life. On some devices this
            may be at the cost of reduced application performance and decreased
            quality of experience.
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.FpsHint.FAST">
      <summary>
            The application uses content that requires a high rendering rate, 
            E.g. using smooth character animation.
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaRenderer.VideoBackgroundReflection">
      <summary>
            If the video background image is mirrored horizontally (useful when the front camera is used)
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.VideoBackgroundReflection.DEFAULT">
      <summary>
            Allows the SDK to set the recommended reflection settings for the current camera
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.VideoBackgroundReflection.ON">
      <summary>
            Overrides the SDK recommendation to force a reflection
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.VideoBackgroundReflection.OFF">
      <summary>
            Overrides the SDK recommendation to disable reflection
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaRenderer.VideoBGCfgData">
      <summary>
            This struct stores Video Background configuration data. It stores if
            background rendering is enabled, if it happens synchronously and it
            stores position and size of the video background on the screen.
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaRenderer.Vec2I">
      <summary>
            This struct stores 2D integer vectors.
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaRenderer.VideoTextureInfo">
      <summary>
            Describes the size of the texture in the graphics unit as well as
            the size of the image inside the texture. The latter corresponds
            to the size of the image delivered by the camera
            </summary>
    </member>
    <member name="T:Vuforia.VuforiaRenderer.RendererAPI">
      <summary>
            Which native rendering API is used
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.RendererAPI.GL_20">
      <summary>
            OpenGL ES 2.0
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.RendererAPI.METAL">
      <summary>
            iOS Metal
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.RendererAPI.DIRECTX3D11">
      <summary>
            Windows DirectX-3D 11
            </summary>
    </member>
    <member name="F:Vuforia.VuforiaRenderer.RendererAPI.GL_30">
      <summary>
            OpenGL ES 3.0
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaRenderer.Instance">
      <summary>
            Returns an instance of a VuforiaRenderer (thread safe)
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaRenderer.VideoBackgroundTexture">
      <summary>
            The texture the video background is rendered into
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.GetVideoBackgroundConfig">
      <summary>
            Retrieves the current layout configuration of the video background.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.ClearVideoBackgroundConfig">
      <summary>
            clears the config of the videobackground when Vuforia is stopped.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.SetVideoBackgroundConfig(Vuforia.VuforiaRenderer.VideoBGCfgData)">
      <summary>
            Configures the layout of the video background (location on the screen
            and size).
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Vuforia.VuforiaRenderer.createNativeTexture(System.Int32,System.Int32,System.Int32)" -->
    <member name="M:Vuforia.VuforiaRenderer.SetVideoBackgroundTexture(UnityEngine.Texture,System.Int32)">
      <summary>
            Tells Vuforia where the texture id to use for updating video background data.
            The native texture ID needs to be passed in as a separate parameter.
            When using multihreaded rendering this texture ID needs to be resolved in an Awake method
            (texture.GetNativeTexturePtr())
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.SetVideoBackgroundTexturePtr(UnityEngine.Texture,System.IntPtr)">
      <summary>
            Tells Vuforia the texture pointer to use for updating video background data.
            The native texture pointer needs to be passed in as a separate parameter.
            When using multihreaded rendering this texture ID needs to be resolved in an Awake method
            (texture.GetNativeTexturePtr())
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.IsVideoBackgroundInfoAvailable">
      <summary>
            Check if video background info is available
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.GetVideoTextureInfo">
      <summary>
            Returns the texture info associated with the current video background
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.Pause(System.Boolean)">
      <summary>
            Turns pausing on or off.
            Pausing will freeze the camera video and all trackables will remain in their current state.
            Autorotation will be disabled during video background freezing.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.GetRecommendedFps(Vuforia.VuforiaRenderer.FpsHint)">
      <summary>
            Query recommended rendering frame rate based on application hints.
            The target rendering frame rate of an AR or VR application is an
            important trade-off between optimal experience and device power usage.
            The choice is influenced by multiple parameters including device type,
            the active Trackers, the camera and/or sensor frame rates. Furthermore
            there are application specific trade offs to consider. These hints can be
            passed to the function as parameters (see FpsHint). For example,
            an application with animated content may need consistent 60 fps rendering
            even on a device that can only deliver poses at 30 fps. GetRecommendedFps 
            considers the device parameters as well as the application specific hints
            and returns a recommended frame rate. The returned value can then be set
            via setTargetFps. Note that GetRecommendedFps may return different values
            tuned to the active CameraDevice.CameraDeviceMode and active Trackers. 
            Thus it is recommended to call this API after the application has completed 
            the camera and tracker setup as well as when an application transitions
            between modes (For example when transitioning between AR to VR modes)
            </summary>
      <param name="flags">Bitfield of FpsHint flags</param>
    </member>
    <member name="M:Vuforia.VuforiaRenderer.GetRendererAPI">
      <summary>
            Query the native rendering API.
            Currently supported: OpenGL ES 2.0, Metal or DirectX3D11
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Vuforia.VuforiaRuntimeUtilities">
      <summary>
            A utility class containing various helper methods
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.GetStoragePath(System.String,Vuforia.VuforiaUnity.StorageType)">
      <summary>
            Based on the storage type and current platform returns to the caller the correct path
            for a given platform.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.StripFileNameFromPath(System.String)">
      <summary>
            Returns the file name without the path.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.StripStreamingAssetsFromPath(System.String)">
      <summary>
            Returns the file path without the first two elements of the path for
            example it would remove '*/StreamingAssets'.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.StripExtensionFromPath(System.String)">
      <summary>
            Returns the extension without the path.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaRuntimeUtilities.ScreenOrientation">
      <summary>
            Wrapper for Screen.orientation to enable correct handling in Editor
            and on devices that do not support all orientations.
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaRuntimeUtilities.IsLandscapeOrientation">
      <summary>
            returns true of ScreenOrientation is in ANY landscape mode
            </summary>
    </member>
    <member name="P:Vuforia.VuforiaRuntimeUtilities.IsPortraitOrientation">
      <summary>
            returns true if ScreenOrientation is in ANY portrait mode
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.ForceDisableTrackables">
      <summary>
            Disables all TrackableBehaviours. Used when an GL or orientation error is detected in a sample.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.IsPlayMode">
      <summary>
            returns ONLY true if we are running in Play Mode
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.IsWSARuntime">
      <summary>
            returns ONLY true if we are in any one of the WSA modes
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.IsVuforiaEnabled">
      <summary>
            returns true if we have access to Vuforia (on a mobile device OR in the emulator in Unity Pro with a webcam connected)
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.IsWebCamUsed">
      <summary>
            If the web cam is enabled.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.ScreenSpaceToCameraFrameCoordinates(UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,Vuforia.CameraDevice.VideoModeData)">
      <summary>
            Calculates a position in camera frame coordinates based on the current orientation and background config for a given screen-space position
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.CameraFrameToScreenSpaceCoordinates(UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,Vuforia.CameraDevice.VideoModeData)">
      <summary>
            Calculates a position in screen space coordinates based on the current orientation and background config for a given screen-space position
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.CameraFrameToScreenSpaceCoordinates(Vuforia.OrientedBoundingBox,UnityEngine.Rect,System.Boolean,Vuforia.CameraDevice.VideoModeData)">
      <summary>
            Calculates the screen space parameters for an oriented bounding box (center, half extents, rotation) specified in camera frame coordinates.
            The calculation is based on the current screen orientation.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.SelectRectTopLeftAndBottomRightForLandscapeLeft(UnityEngine.Rect,System.Boolean,UnityEngine.Vector2@,UnityEngine.Vector2@)">
      <summary>
            Selects the top left and bottom right corners from a rect, where "top", "left", "bottom" and "right" are in respect to landscape left orientation
            Used for region of interest calculations for text tracking
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.CalculateRectFromLandscapeLeftCorners(UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean)">
      <summary>
            Creates a rect from given corner points, where "top", "left", "bottom" and "right" are in respect to landscape left orientation
            Used for region of interest calculations for text tracking
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.DisableSleepMode">
      <summary>
            The device screen stays turned on and bright 
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.ResetSleepMode">
      <summary>
            Reset the sleep mode to the system settings.
            </summary>
    </member>
    <member name="M:Vuforia.VuforiaRuntimeUtilities.MatrixIsNaN(UnityEngine.Matrix4x4)">
      <summary>
            Check if a matrix is NaN. return true if any element is NaN, false otherwise.
            </summary>
    </member>
    <member name="T:Vuforia.SurfaceUtilities">
      <summary>
            This class publicly exposes native methods that are related to surface management.
            These methods are used by the Unity Extension and usually should not be used in application code.
            </summary>
    </member>
    <member name="M:Vuforia.SurfaceUtilities.OnSurfaceCreated">
      <summary>
            Signals native that the rendering surface has been created by Unity
            </summary>
    </member>
    <member name="M:Vuforia.SurfaceUtilities.OnSurfaceDeinit">
      <summary>
            Signals native that the rendering surface should be deinitialized
            </summary>
    </member>
    <member name="M:Vuforia.SurfaceUtilities.HasSurfaceBeenRecreated">
      <summary>
            Checks if the GLSurface has been recreated
            </summary>
    </member>
    <member name="M:Vuforia.SurfaceUtilities.OnSurfaceChanged(System.Int32,System.Int32)">
      <summary>
            Signals native that the screen size has changed (device rotation)
            </summary>
    </member>
    <member name="M:Vuforia.SurfaceUtilities.SetSurfaceOrientation(UnityEngine.ScreenOrientation)">
      <summary>
            Sets a new orientation
            </summary>
    </member>
    <member name="M:Vuforia.SurfaceUtilities.GetSurfaceOrientation">
      <summary>
            Gets the current  orientation
            </summary>
    </member>
    <member name="T:Vuforia.TargetFinder">
      <summary>
            This class represents a service that retrieves targets using cloud-based recognition
            </summary>
    </member>
    <member name="T:Vuforia.TargetFinder.InitState">
      <summary>
            Status codes returned by the init() function
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.InitState.INIT_DEFAULT">
      <summary>
            Initialization has not started
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.InitState.INIT_RUNNING">
      <summary>
            Initialiation is running
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.InitState.INIT_SUCCESS">
      <summary>
            Initialization completed successfully
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.InitState.INIT_ERROR_NO_NETWORK_CONNECTION">
      <summary>
            No network connection
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.InitState.INIT_ERROR_SERVICE_NOT_AVAILABLE">
      <summary>
            Service is not available
            </summary>
    </member>
    <member name="T:Vuforia.TargetFinder.UpdateState">
      <summary>
            Status codes returned by the updateSearchResults() function
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_NO_MATCH">
      <summary>
            No matches since the last update
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_NO_REQUEST">
      <summary>
            No recognition request since the last update
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_RESULTS_AVAILABLE">
      <summary>
            New search results have been found
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_AUTHORIZATION_FAILED">
      <summary>
            Credentials are wrong or outdated
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_PROJECT_SUSPENDED">
      <summary>
            The specified project was suspended.
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_NO_NETWORK_CONNECTION">
      <summary>
            Device has no network connection
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_SERVICE_NOT_AVAILABLE">
      <summary>
            Server not found, down or overloaded.
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_BAD_FRAME_QUALITY">
      <summary>
            Low-frame quality has been continuously observed
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_UPDATE_SDK">
      <summary>
            SDK Version outdated.
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_TIMESTAMP_OUT_OF_RANGE">
      <summary>
            Client/Server clocks too far away.
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.UpdateState.UPDATE_ERROR_REQUEST_TIMEOUT">
      <summary>
            No response to network request after timeout.
            </summary>
    </member>
    <member name="T:Vuforia.TargetFinder.FilterMode">
      <summary>
            Filter modes to be passed into updateSearchResults() function
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.FilterMode.FILTER_NONE">
      <summary>
            No results are filtered, all successful queries are returned
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.FilterMode.FILTER_CURRENTLY_TRACKED">
      <summary>
            Filter out targets that are currently active (Most Common)
            </summary>
    </member>
    <member name="T:Vuforia.TargetFinder.TargetSearchResult">
      <summary>
            This struct contains all known data of a specific search result
            </summary>
    </member>
    <member name="F:Vuforia.TargetFinder.TargetSearchResult.TargetSize">
            width of the target (in 3D scene units)
        </member>
    <member name="F:Vuforia.TargetFinder.TargetSearchResult.TrackingRating">
            The tracking rating represents a 5-star rating describing the
            suitability of this target for tracking on a scale from 0 to 5. A low
            tracking rating may result in poor tracking or unstable augmentation.
        </member>
    <member name="M:Vuforia.TargetFinder.StartInit(System.String,System.String)">
      <summary>
             Starts initialization of the cloud-based recognition system.
            
             Initialization of the cloud-based recognition system may take significant
             time and is thus handled in a background process. Use GetInitState() to
             query the initialization progress and result. Pass in the user/password
             for authenticating with the cloud reco server.
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.GetInitState">
      <summary>
             Returns the current state of the initialization process
            
             Returns INIT_SUCCESS if the cloud-based recognition system was
             initialized successfully. Initialization requires a network connection
             to be available on the device, otherwise INIT_ERROR_NO_NETWORK_CONNECTION
             is returned. If the cloud-based recognition service is not available this
             function will return INIT_ERROR_SERVICE_NOT_AVAILABLE. Returns
             INIT_DEFAULT if initialization has not been started. Returns INIT_RUNNING
             if the initialization process has not completed.
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.Deinit">
      <summary>
            Deinitializes the cloud-based recognition system
            </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.StartRecognition">
      <summary>
             Starts cloud recognition
            
             Starts continuous recognition of Targets from the cloud.
             Use updateSearchResult() and getResult() to retrieve search matches.
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.Stop">
      <summary>
            Stops cloud recognition
            </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.IsRequesting">
      <summary>
             Returns true if the TargetFinder is in 'requesting' mode
            
             When in 'requesting' mode the TargetFinder has issued a search 
             query to the recognition server and is waiting for the results.
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.Update">
      <summary>
             Update cloud reco results
            
             Clears and rebuilds the list of target search results with results found
             since the last call to updateSearchResults().
             Also refreshes the IsRequesting flag. 
             Returns the status code  UPDATE_RESULTS_AVAILABLE if new search results have been found.
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.Update(Vuforia.TargetFinder.FilterMode)">
      <summary>
             Update cloud reco results
            
             Clears and rebuilds the list of target search results with results found
             since the last call to updateSearchResults().
             Also refreshes the IsRequesting flag. 
             Returns the status code  UPDATE_RESULTS_AVAILABLE if new search results have been found.
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.GetResults">
      <summary>
             Returns new search results
            
             Earlier search result instances are destroyed when UpdateSearchResults
             is called. 
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.EnableTracking(Vuforia.TargetFinder.TargetSearchResult,System.String)">
      <summary>
             Enable this search result for tracking
            
             Creates an ImageTarget for local detection and tracking of this target
             and returns a new ImageTargetBehaviour attached to a new game object with the given name.
             Note that this call may result in an earlier ImageTarget that was enabled for
             tracking to be destroyed, including its ImageTargetBehaviour. 
             Thus it is not advised to hold a pointer to an
             ealier created ImageTarget after calling enableTracking again. Returns
             NULL if the target failed to be enabled for tracking.
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.EnableTracking(Vuforia.TargetFinder.TargetSearchResult,UnityEngine.GameObject)">
      <summary>
             Enable this search result for tracking
            
             Creates an ImageTarget for local detection and tracking of this target.
             If the given game object has no ImageTargetBehaviour, a new one will be created.
             Note that this call may result in an earlier ImageTarget that was enabled for
             tracking to be destroyed, including its ImageTargetBehaviour. 
             Thus it is not advised to hold a pointer to an
             ealier created ImageTarget after calling enableTracking again. Returns
             NULL if the target failed to be enabled for tracking.
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.ClearTrackables(System.Boolean)">
      <summary>
             Clears all targets enabled for tracking
            
             Destroys all ImageTargets that have been created via EnableTracking().
             </summary>
    </member>
    <member name="M:Vuforia.TargetFinder.GetImageTargets">
      <summary>
            Returns the ImageTargets currently enabled for tracking.
            </summary>
    </member>
    <member name="T:Vuforia.TextRecoBehaviour">
      <summary>
            This is the main behaviour class that encapsulates text recognition behaviour.
            It just has to be added to a Vuforia-enabled Unity scene and will initialize the text tracker with the configured word list.
            Events for newly recognized or lost words will be called on registered ITextRecoEventHandlers
            </summary>
    </member>
    <member name="M:Vuforia.TextRecoBehaviour.RegisterTextRecoEventHandler(Vuforia.ITextRecoEventHandler)">
      <summary>
            This method registers a new TextReco event handler.
            These handlers are called after all trackables have been updated for this frame.
            </summary>
    </member>
    <member name="M:Vuforia.TextRecoBehaviour.UnregisterTextRecoEventHandler(Vuforia.ITextRecoEventHandler)">
      <summary>
            This method unregisters a TextReco event handler.
            Returns "false" if event handler does not exist.
            </summary>
    </member>
    <member name="T:Vuforia.TextTracker">
      <summary>
            This class handles Text Tracking and defining the detection and tracking area at runtime
            </summary>
    </member>
    <member name="P:Vuforia.TextTracker.WordList">
      <summary>
            Get the word list used for tracking text
            </summary>
    </member>
    <member name="M:Vuforia.TextTracker.SetRegionOfInterest(UnityEngine.Rect,UnityEngine.Rect)">
      <summary>
            Defines the areas of the image in screen coordinates where text can be detected and tracked.
            </summary>
    </member>
    <member name="M:Vuforia.TextTracker.GetRegionOfInterest(UnityEngine.Rect@,UnityEngine.Rect@)">
      <summary>
            Returns the areas of the image in screen coordinates where text can be detected and tracked.
            </summary>
    </member>
    <member name="T:Vuforia.Trackable">
      <summary>
            The base class behaviour for all trackable types in Vuforia.
            </summary>
    </member>
    <member name="P:Vuforia.Trackable.Name">
      <summary>
            The name of the Trackable
            </summary>
    </member>
    <member name="P:Vuforia.Trackable.ID">
      <summary>
            The runtime Id of the Trackable
            </summary>
    </member>
    <member name="T:Vuforia.TrackableBehaviour">
      <summary>
            The base class for all TrackableBehaviours in Vuforia
            This class serves both as an augmentation definition for a Trackable in the editor
            as well as a tracked Trackable result at runtime
            </summary>
    </member>
    <member name="T:Vuforia.TrackableBehaviour.Status">
      <summary>
            The tracking status of the TrackableBehaviour.
            </summary>
    </member>
    <member name="F:Vuforia.TrackableBehaviour.Status.UNKNOWN">
      <summary>
            The state of the TrackableResult is unknown
            </summary>
    </member>
    <member name="F:Vuforia.TrackableBehaviour.Status.UNDEFINED">
      <summary>
            The state of the TrackableResult is not defined (it does not have a state)
            </summary>
    </member>
    <member name="F:Vuforia.TrackableBehaviour.Status.DETECTED">
      <summary>
            The TrackableResult was detected
            </summary>
    </member>
    <member name="F:Vuforia.TrackableBehaviour.Status.TRACKED">
      <summary>
            The TrackableResult was tracked
            </summary>
    </member>
    <member name="F:Vuforia.TrackableBehaviour.Status.EXTENDED_TRACKED">
      <summary>
            The TrackableResult was tracked while not being visible
            </summary>
    </member>
    <member name="F:Vuforia.TrackableBehaviour.Status.DEGRADED">
      <summary>
            The TrackableResult has a pose of degraded
            quality (only supported for device pose)
            </summary>
    </member>
    <member name="P:Vuforia.TrackableBehaviour.CurrentStatus">
      <summary>
            The tracking status of the TrackableBehaviour
            </summary>
    </member>
    <member name="P:Vuforia.TrackableBehaviour.Trackable">
      <summary>
            The Trackable created at runtime that is augmented by this TrackableBehaviour
            </summary>
    </member>
    <member name="P:Vuforia.TrackableBehaviour.TrackableName">
      <summary>
            The name of the Trackable.
            </summary>
    </member>
    <member name="M:Vuforia.TrackableBehaviour.RegisterTrackableEventHandler(Vuforia.ITrackableEventHandler)">
      <summary>
            This method registers a new Tracker event handler at the Tracker.
            These handlers are called as soon as ALL Trackables have been updated
            in this frame.
            </summary>
    </member>
    <member name="M:Vuforia.TrackableBehaviour.UnregisterTrackableEventHandler(Vuforia.ITrackableEventHandler)">
      <summary>
            This method unregisters a Tracker event handler.
            Returns "false" if event handler does not exist.
            </summary>
    </member>
    <member name="M:Vuforia.TrackableBehaviour.OnTrackerUpdate(Vuforia.TrackableBehaviour.Status)">
      <summary>
            Is triggered by the TrackerBehavior after it has updated.
            </summary>
    </member>
    <member name="M:Vuforia.TrackableBehaviour.OnFrameIndexUpdate(System.Int32)">
      <summary>
            Is triggered by the StateManager after each render frame
            </summary>
      <param name="newFrameIndex">Frame index of processed frame, multiple render frames can have the same frame index</param>
    </member>
    <member name="T:Vuforia.TrackableSource">
      <summary>
            An opaque handle for creating a new Trackable in a DataSet.
            </summary>
    </member>
    <member name="T:Vuforia.Tracker">
      <summary>
            The common base class for all Tracker classes
            </summary>
    </member>
    <member name="M:Vuforia.Tracker.Start">
      <summary>
            Starts the Tracker
            </summary>
    </member>
    <member name="M:Vuforia.Tracker.Stop">
      <summary>
            Stops the Tracker
            </summary>
    </member>
    <member name="P:Vuforia.Tracker.IsActive">
      <summary>
            If the Tracker is currently active
            </summary>
    </member>
    <member name="T:Vuforia.TrackerManager">
      <summary>
            This class serves as a singleton to retrieve the Trackers and the StateManager
            </summary>
    </member>
    <member name="P:Vuforia.TrackerManager.Instance">
      <summary>
            Returns an instance of a TrackerManager (thread safe)
            </summary>
    </member>
    <member name="M:Vuforia.TrackerManager.GetTracker``1">
      <summary>
            Returns the instance of the given tracker type
            See the Tracker base class for a list of available tracker classes.
            This function will return null if the tracker of the given type has
            not been initialized.
            </summary>
    </member>
    <member name="M:Vuforia.TrackerManager.InitTracker``1">
      <summary>
            Initializes the tracker of the given type
            Initializing a tracker must not be done when the CameraDevice
            is initialized or started. This function will return null if the
            CameraDevice is currently initialized.
            </summary>
    </member>
    <member name="M:Vuforia.TrackerManager.DeinitTracker``1">
      <summary>
            Deinitializes the tracker of the given type and frees any resources
            used by the tracker.
            Deinitializing a tracker must not be done when the CameraDevice
            is initialized or started. This function will return false if the
            tracker of the given type has not been initialized or if the
            CameraDevice is currently initialized.
            </summary>
    </member>
    <member name="M:Vuforia.TrackerManager.GetStateManager">
      <summary>
            Returns the state manager instance that can be used to access
            all currently tracked TrackableBehaviours
            </summary>
    </member>
    <member name="M:Vuforia.ITrackerManager.GetTracker``1">
      <summary>
            Returns the instance of the given tracker type
            See the Tracker base class for a list of available tracker classes.
            This function will return null if the tracker of the given type has
            not been initialized.
            </summary>
    </member>
    <member name="M:Vuforia.ITrackerManager.InitTracker``1">
      <summary>
            Initializes the tracker of the given type
            Initializing a tracker must not be done when the CameraDevice
            is initialized or started. This function will return null if the
            CameraDevice is currently initialized.
            </summary>
    </member>
    <member name="M:Vuforia.ITrackerManager.DeinitTracker``1">
      <summary>
            Deinitializes the tracker of the given type and frees any resources
            used by the tracker.
            Deinitializing a tracker must not be done when the CameraDevice
            is initialized or started. This function will return false if the
            tracker of the given type has not been initialized or if the
            CameraDevice is currently initialized.
            </summary>
    </member>
    <member name="M:Vuforia.ITrackerManager.GetStateManager">
      <summary>
            Returns the state manager instance that can be used to access
            all currently tracked TrackableBehaviours
            </summary>
    </member>
    <member name="T:Vuforia.UserDefinedTargetBuildingBehaviour">
      <summary>
            This Component can be used to create new ImageTargets at runtime. It can be configured to start scanning automatically
            or via a call from an external script.
            Registered event handlers will be informed of changes in the frame quality as well as new TrackableSources
            </summary>
    </member>
    <member name="F:Vuforia.UserDefinedTargetBuildingBehaviour.StopTrackerWhileScanning">
      <summary>
            if the tracker should be stopped when scanning is started and resumed when scanning is stopped
            </summary>
    </member>
    <member name="F:Vuforia.UserDefinedTargetBuildingBehaviour.StartScanningAutomatically">
      <summary>
            if this is set to true, scanning will start automatically when this component is activated
            </summary>
    </member>
    <member name="F:Vuforia.UserDefinedTargetBuildingBehaviour.StopScanningWhenFinshedBuilding">
      <summary>
            if scanning should be stopped automatically when a new target is built
            </summary>
    </member>
    <member name="M:Vuforia.UserDefinedTargetBuildingBehaviour.RegisterEventHandler(Vuforia.IUserDefinedTargetEventHandler)">
      <summary>
            Registers an event handler with this UserDefinedTargetBuildingBehaviour which will be called on events
            </summary>
    </member>
    <member name="M:Vuforia.UserDefinedTargetBuildingBehaviour.UnregisterEventHandler(Vuforia.IUserDefinedTargetEventHandler)">
      <summary>
            Unregisters an event handler
            </summary>
    </member>
    <member name="M:Vuforia.UserDefinedTargetBuildingBehaviour.StartScanning">
      <summary>
            Starts scanning the current camera image for features. 
            This will trigger callbacks to the registered event handlers whenever the
            frame quality changes.
            If 'StopTrackerWhileScanning' is set, this will stop the ObjectTracker
            </summary>
    </member>
    <member name="M:Vuforia.UserDefinedTargetBuildingBehaviour.BuildNewTarget(System.String,System.Single)">
      <summary>
            This will start building a new target and report back to the event handlers as soon
            as a new TrackableSource is available.
            </summary>
    </member>
    <member name="M:Vuforia.UserDefinedTargetBuildingBehaviour.StopScanning">
      <summary>
            Stops scanning, event handlers will be informed.
            If 'StopTrackerWhileScanning' is set, this will resume the ObjectTracker
            </summary>
    </member>
    <member name="T:Vuforia.VideoBackgroundBehaviour">
      <summary>
            The VideoBackgroundBehaviour class handles native video background rendering.
            </summary>
    </member>
    <member name="M:Vuforia.VideoBackgroundBehaviour.ResetBackgroundPlane(System.Boolean)">
      <summary>
            This method toggles the mesh renderer of the background plane
            </summary>
    </member>
    <member name="M:Vuforia.VideoBackgroundBehaviour.SetVideoBackgroundMaterial(UnityEngine.Material)">
      <summary>
            Allows for setting the material on the meshrenderer externally.
            </summary>
      <param name="videoBackgroundMaterial">
      </param>
    </member>
    <member name="P:Vuforia.VideoBackgroundManager.VideoBackgroundEnabled">
      <summary>
            Is video background rendering enabled
            </summary>
    </member>
    <member name="P:Vuforia.VideoBackgroundManager.ClippingMode">
      <summary>
            Get the mode for clipping content outside of the video background
            </summary>
    </member>
    <member name="P:Vuforia.VideoBackgroundManager.MatteShader">
      <summary>
            Get the shader used for clipping
            </summary>
    </member>
    <member name="M:Vuforia.VideoBackgroundManager.SetVideoBackgroundEnabled(System.Boolean)">
      <summary>
            Enable or disable rendering the video background
            </summary>
            Calling this method will set the AR/VR-mode and enable or disable all behaviours regarding video background rendering
        </member>
    <member name="M:Vuforia.VideoBackgroundManager.SetClippingMode(Vuforia.HideExcessAreaUtility.CLIPPING_MODE)">
      <summary>
            Set the clipping mode for the augmentation going off the limit of video background due to scaling.
            Clipping is only necessary in stereo mode.
            </summary>
    </member>
    <member name="M:Vuforia.VideoBackgroundManager.SetMatteShader(UnityEngine.Shader)">
      <summary>
            Set the shader for clipping
            </summary>
    </member>
    <member name="M:Vuforia.VideoBackgroundManager.OnVideoBackgroundConfigChanged">
      <summary>
            reset the video background
            </summary>
    </member>
    <member name="T:Vuforia.VirtualButton">
      <summary>
             A virtual button on a trackable
            
             Methods to modify a VirtualButton must not be called while the
             corresponding DataSet is active. The dataset must be deactivated first
             before reconfiguring a VirtualButton.
             </summary>
    </member>
    <member name="T:Vuforia.VirtualButton.Sensitivity">
      <summary>
            The sensitivity of this virtual button. This is a trade off between fast
            detection and robustness again accidental occlusion.
            </summary>
    </member>
    <member name="F:Vuforia.VirtualButton.DEFAULT_SENSITIVITY">
      <summary>
            The standard sensitivity
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButton.Name">
      <summary>
            Returns the name of the button
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButton.ID">
      <summary>
            Returns a unique id for this virtual button.
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButton.Enabled">
      <summary>
            Returns true if the virtual button is active (updates while tracking).
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButton.Area">
      <summary>
            Returns the currently set Area
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButton.SetArea(Vuforia.RectangleData)">
      <summary>
             Defines a new area for the button area in 3D scene units (the
             coordinate system is local to the ImageTarget).
            
             This method must not be called while the corresponding DataSet is
             active or it will return false.
             </summary>
    </member>
    <member name="M:Vuforia.VirtualButton.SetSensitivity(Vuforia.VirtualButton.Sensitivity)">
      <summary>
             Sets the sensitivity of the virtual button
            
             Sensitivity allows deciding between fast and robust button press
             measurements. This method must not be called while the corresponding
             DataSet is active or it will return false.
             </summary>
    </member>
    <member name="M:Vuforia.VirtualButton.SetEnabled(System.Boolean)">
      <summary>
             Enables or disables a virtual button
            
             This method must not be called while the corresponding DataSet is
             active or it will return false.
             </summary>
    </member>
    <member name="T:Vuforia.VirtualButtonBehaviour">
      <summary>
            This behaviour associates a Virtual Button with a game object. Use the
            functionality in ImageTargetBehaviour to create and destroy Virtual Buttons
            at run-time.
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButtonBehaviour.VirtualButtonName">
      <summary>
            The names of this virtual button.
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButtonBehaviour.Pressed">
      <summary>
            Returns true if this button is currently pressed.
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButtonBehaviour.HasUpdatedPose">
      <summary>
            if the pose has been updated once
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButtonBehaviour.UnregisterOnDestroy">
      <summary>
            Unregistering Virtual Buttons should only be done if they have been 
            registered at runtime. This property is automatically set by
            ImageTargetBehaviour on registration.
            </summary>
    </member>
    <member name="P:Vuforia.VirtualButtonBehaviour.VirtualButton">
      <summary>
            The VirtualButton Object created at runtime
            </summary>
    </member>
    <member name="F:Vuforia.VirtualButtonBehaviour.TARGET_OFFSET">
      <summary>
            The vertical offset of the graphic representation of a virtual button in respect to the target
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButtonBehaviour.RegisterEventHandler(Vuforia.IVirtualButtonEventHandler)">
      <summary>
            Registers an event handler with this Virtual Button which will be called
            when a state changed is detected.
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButtonBehaviour.UnregisterEventHandler(Vuforia.IVirtualButtonEventHandler)">
      <summary>
            Registers an event handler with this Virtual Button which will be called
            when a state changed is detected.
            Returns true on success. False otherwise.
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButtonBehaviour.CalculateButtonArea(UnityEngine.Vector2@,UnityEngine.Vector2@)">
      <summary>
            Calculates the 2D button area that the Virtual Button currently occupies
            in the Image Target.
            Returns true if the area was computed successfully. False otherwise.
            Passes out the top left and bottom right position of the rectangle area.
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButtonBehaviour.UpdateAreaRectangle">
      <summary>
            Update the virtual button rect in native
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButtonBehaviour.UpdateSensitivity">
      <summary>
            Update sensitivity in native
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButtonBehaviour.UpdatePose">
      <summary>
            UpdatePose() is called each frame to ensure the virtual button is clamped
            to the image target plane and remains axis-aligned with respect to the
            target. Return true if the defining area of the virtual button has
            changed, false otherwise.
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButtonBehaviour.OnTrackerUpdated(System.Boolean)">
      <summary>
            Called after the VuforiaBehaviour has updated.
            </summary>
    </member>
    <member name="M:Vuforia.VirtualButtonBehaviour.GetImageTargetBehaviour">
      <summary>
            Returns the Image Target that this Virtual Button is associated with.
            </summary>
    </member>
    <member name="T:Vuforia.WebCamARController">
      <summary>
            This MonoBehaviour manages the usage of a webcam for Play Mode in Windows or Mac.
            </summary>
    </member>
    <member name="F:Vuforia.WebCamARController.RenderTextureLayer">
      <summary>
            The layer that will be used to render the background image
            </summary>
    </member>
    <member name="P:Vuforia.WebCamARController.DeviceName">
      <summary>
            The name of the web cam device that is used
            </summary>
    </member>
    <member name="P:Vuforia.WebCamARController.FlipHorizontally">
      <summary>
            If the image from the webcam should be flipped horizontally.
            Some webcams will deliver a mirrored image, in that case 
            </summary>
    </member>
    <member name="P:Vuforia.WebCamARController.IsPlaying">
      <summary>
            If the web cam is currently capturing video
            </summary>
    </member>
    <member name="T:Vuforia.Word">
      <summary>
            A word represents a single element of writing that has been detected.
            It only contains static information about the word which does not change per frame
            </summary>
    </member>
    <member name="P:Vuforia.Word.StringValue">
      <summary>
            Get the string value of the tracked word
            </summary>
    </member>
    <member name="P:Vuforia.Word.Size">
      <summary>
            Returns the size of the tracked word in 3D scene units
            </summary>
    </member>
    <member name="M:Vuforia.Word.GetLetterMask">
      <summary>
            Returns an image representing the bit mask of the letters in the word.
            Each pixel in the image is represented by a byte (8-bit value).
            A value of 255 represents an empty area, i.e. a pixel not covered 
            by any letter of the word.
            If a pixel is covered by a letter, then the pixel value represents 
            the position of that letter in the word, i.e. 0 for the first character,
            1 for the second, 2 for the third, and so on.
            </summary>
    </member>
    <member name="M:Vuforia.Word.GetLetterBoundingBoxes">
      <summary>
            Returns the axis-aligned bounding boxes for all letters of the word. These are defined in the range of [0, 1] which corresponds to the whole bounding box of the word.
            </summary>
    </member>
    <member name="T:Vuforia.WordManager">
      <summary>
            This class is used to manage all word trackables
            </summary>
    </member>
    <member name="M:Vuforia.WordManager.GetActiveWordResults">
      <summary>
            Returns all currently tracked WordResults
            </summary>
    </member>
    <member name="M:Vuforia.WordManager.GetNewWords">
      <summary>
            Returns all words that have been newly detected in the last frame
            </summary>
    </member>
    <member name="M:Vuforia.WordManager.GetLostWords">
      <summary>
            Returns all words that have been lost in the last frame and won't be tracked anymore
            </summary>
    </member>
    <member name="M:Vuforia.WordManager.TryGetWordBehaviour(Vuforia.Word,Vuforia.WordBehaviour@)">
      <summary>
            Get the word behaviour that is associated with a currently tracked word
            </summary>
      <param name="word">trackable</param>
      <param name="behaviour">resulting word behaviour, might be null if specified word is not associated to a behaviour</param>
      <returns>returns true if word behaviour exists for specified word trackable</returns>
    </member>
    <member name="M:Vuforia.WordManager.GetTrackableBehaviours">
      <summary>
            Returns all currently instantiated word behaviours
            </summary>
    </member>
    <member name="M:Vuforia.WordManager.DestroyWordBehaviour(Vuforia.WordBehaviour,System.Boolean)">
      <summary>
            Remove a specific word behaviour from list and optionally destroy game object.
            This might also remove a template, i.e. no further trackables will be augmented for a specific word or for a template
            </summary>
    </member>
    <member name="T:Vuforia.WordResult">
      <summary>
            A WordResult provides the current state of a Word.
            It contains all dynamic information that changes frame-to-frame, 
            i.e. which is based on the current pose of the word
            </summary>
    </member>
    <member name="P:Vuforia.WordResult.Word">
      <summary>
            Get the corresponding Word-object of this trackable
            </summary>
    </member>
    <member name="P:Vuforia.WordResult.Obb">
      <summary>
            Get the oriented 2D bounding box of the word in image space
            </summary>
    </member>
    <member name="P:Vuforia.WordResult.Position">
      <summary>
            Get the position of the current pose of the trackable
            </summary>
    </member>
    <member name="P:Vuforia.WordResult.Orientation">
      <summary>
            Get the rotation of the current pose of the trackable
            </summary>
    </member>
    <member name="P:Vuforia.WordResult.CurrentStatus">
      <summary>
            Get the current status of the trackable
            </summary>
    </member>
    <member name="T:Vuforia.WordTemplateMode">
      <summary>
            Specifies if a word prefab is used as generic template or only for specific words
            </summary>
    </member>
    <member name="T:Vuforia.WordBehaviour">
      <summary>
            This class serves both as an augmentation definition for a Word in the editor
            as well as a tracked Word result at runtime
            </summary>
    </member>
    <member name="P:Vuforia.WordBehaviour.Word">
      <summary>
            The word that this word behaviour augments
            </summary>
    </member>
    <member name="T:Vuforia.WordFilterMode">
      <summary>
            Types of filter modes
            </summary>
    </member>
    <member name="F:Vuforia.WordFilterMode.NONE">
      <summary>
            Word filtering is disabled
            </summary>
    </member>
    <member name="F:Vuforia.WordFilterMode.BLACK_LIST">
      <summary>
            Prevent specific words from being detected
            </summary>
    </member>
    <member name="F:Vuforia.WordFilterMode.WHITE_LIST">
      <summary>
            Enable selected words only to be detected
            </summary>
    </member>
    <member name="T:Vuforia.WordList">
      <summary>
            This class represents a list of words that can be detected and tracked.
            Custom words and filter lists can be defined for a word list.
            
            The WordList represents the set of detectable Words. This list is
            loaded from a binary data file using LoadWordListFile.
            The application may choose to add a small set of additional custom words to
            the WordList using the APIs below.
            The filter list allows an application to specify a subset of Words
            from the WordList that will be detected and tracked. 
            Note that the TextTracker needs to be stopped prior to making modifications
            to the WordList.
            </summary>
    </member>
    <member name="M:Vuforia.WordList.LoadWordListFile(System.String)">
      <summary>
            Loads the word list from a binary file in the StreamingAssets directory
            </summary>
    </member>
    <member name="M:Vuforia.WordList.LoadWordListFile(System.String,Vuforia.VuforiaUnity.StorageType)">
      <summary>
            Loads the word list from a binary file at the specified path and storage
            location
            </summary>
    </member>
    <member name="M:Vuforia.WordList.AddWordsFromFile(System.String)">
      <summary>
            Loads a set of custom words from a plain text in the StreamingAssets directory
            </summary>
    </member>
    <member name="M:Vuforia.WordList.AddWordsFromFile(System.String,Vuforia.VuforiaUnity.StorageType)">
      <summary>
            Loads a set of custom words from a plain text file at the specified 
            path and storage location
            The word list is extended with the custom words in the plain text file.
            No more than 10.000 custom words can be added to the word list. Each word
            must be between 2-45 characters in length. Returns the
            number of loaded custom words. The text file shall be encoded in UTF-8.
            </summary>
      <returns>Number of words that have been added</returns>
    </member>
    <member name="M:Vuforia.WordList.AddWord(System.String)">
      <summary>
            Add a single custom word to the word list
            Use ContainsWord to check if the word is already in the word list prior
            to calling this.
            </summary>
    </member>
    <member name="M:Vuforia.WordList.RemoveWord(System.String)">
      <summary>
            Remove a custom word from the word list
            </summary>
    </member>
    <member name="M:Vuforia.WordList.ContainsWord(System.String)">
      <summary>
            Returns true if the given word is present in the WordList 
            </summary>
    </member>
    <member name="M:Vuforia.WordList.UnloadAllLists">
      <summary>
            Clears the word list as well as the filter list and releases resources.
            </summary>
    </member>
    <member name="M:Vuforia.WordList.GetFilterMode">
      <summary>
            Returns the filter mode
            </summary>
    </member>
    <member name="M:Vuforia.WordList.SetFilterMode(Vuforia.WordFilterMode)">
      <summary>
            Sets the mode for the filter list
            The filter list allows an application to specify a subset of Words
            from the word list that will be detected and tracked. It can do this
            in two modes of operation. In black list mode, any word in the filter
            list will be prevented from being detected. In the white list mode,
            only words in the the filter list can be detected.
            </summary>
    </member>
    <member name="M:Vuforia.WordList.LoadFilterListFile(System.String)">
      <summary>
            Loads the filter list from a plain text file in the StreamingAssets directory
            </summary>
    </member>
    <member name="M:Vuforia.WordList.LoadFilterListFile(System.String,Vuforia.VuforiaUnity.StorageType)">
      <summary>
            Loads the filter list from a plain text file at the specified 
            path and storage location
            </summary>
    </member>
    <member name="M:Vuforia.WordList.AddWordToFilterList(System.String)">
      <summary>
            Add a single word to the filter list 
            </summary>
    </member>
    <member name="M:Vuforia.WordList.RemoveWordFromFilterList(System.String)">
      <summary>
            Remove a word from the filter list 
            </summary>
    </member>
    <member name="M:Vuforia.WordList.ClearFilterList">
      <summary>
            Clear the filter list
            </summary>
    </member>
    <member name="M:Vuforia.WordList.GetFilterListWordCount">
      <summary>
            Query the number of words in the filter list
            </summary>
    </member>
    <member name="M:Vuforia.WordList.GetFilterListWord(System.Int32)">
      <summary>
            Returns the ith element in the filter list
            </summary>
    </member>
    <member name="T:Vuforia.EyewearCalibrationProfileManager">
      <summary>
             Class that provides functionality specific to AR on Eyewear devices.
             </summary>
      <remarks>
        <br />
        <b>This API is only supported in the %Vuforia SDK for Digital %Eyewear.</b>
        <br />
        <br />
            
             The EyewearCalibrationProfileManager allows the user to list the number of calibration
             profiles available on the device and select the active profile to use.
             </remarks>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount">
      <returns>
            Return the number of profile slots provided.
            </returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.getUsedCount">
      <returns>
            Return the number of user calibration profiles stored.
            </returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.isProfileUsed(System.Int32)">
      <param name="profileID">the calibration profile to use, a default of the current active profile is set.</param>
      <returns>Returns true if the specified profile slot contains data.</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.getActiveProfile">
      <summary>
            Get the ID of the active user calibration profile.
            </summary>
      <returns>Return a number between 0 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.setActiveProfile(System.Int32)">
      <summary>
            Set a calibration profile as active.
            </summary>
      <param name="profileID">A number between 1 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</param>
      <returns>Return true if the active profile is changed, false otherwise (e.g. if the specified profile is not valid)</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.getCameraToEyePose(System.Int32,Vuforia.EyewearDevice.EyeID)">
      <summary>
            Get the pose between camera and eye for the specified profile and eye.
            </summary>
      <param name="profileID">A number between 1 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</param>
      <param name="eyeID">the Eye to retrieve the projection matrix for, one of EYEID_MONOCULAR, EYEID_LEFT or EYEID_RIGHT.</param>
      <returns>Return the stored projection matrix, will contain all 0's if no data is stored for the profile.</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.getEyeProjection(System.Int32,Vuforia.EyewearDevice.EyeID)">
      <summary>
            Get the projection matrix for the specified profile and eye.
            </summary>
      <param name="profileID">A number between 1 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</param>
      <param name="eyeID">the Eye to retrieve the projection matrix for, one of EYEID_MONOCULAR, EYEID_LEFT or EYEID_RIGHT.</param>
      <returns>Return the stored projection matrix, will contain all 0's if no data is stored for the profile.</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.setCameraToEyePose(System.Int32,Vuforia.EyewearDevice.EyeID,UnityEngine.Matrix4x4)">
      <summary>
            Store the pose between camera and eye to a calibration profile
            </summary>
      <param name="profileID">A number between 1 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</param>
      <param name="eyeID">the Eye to retrieve the projection matrix for, one of EYEID_MONOCULAR, EYEID_LEFT or EYEID_RIGHT.</param>
      <param name="projectionMatrix">The projection matrix to store</param>
      <returns>Return true if the new projection matrix was stored successfully, false otherwise.</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.setEyeProjection(System.Int32,Vuforia.EyewearDevice.EyeID,UnityEngine.Matrix4x4)">
      <summary>
            Store a projection matrix to a calibration profile
            </summary>
      <param name="profileID">A number between 1 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</param>
      <param name="eyeID">the Eye to retrieve the projection matrix for, one of EYEID_MONOCULAR, EYEID_LEFT or EYEID_RIGHT.</param>
      <param name="projectionMatrix">The projection matrix to store</param>
      <returns>Return true if the new projection matrix was stored successfully, false otherwise.</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.getProfileName(System.Int32)">
      <summary>
            Get the display name associated with a profile
            </summary>
      <param name="profileID">A number between 1 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</param>
      <returns>Return a unicode string, if no display name has been provided for the specified profile an empty string will be returned.</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.setProfileName(System.Int32,System.String)">
      <summary>
            Set a display name associated with a profile.
            </summary>
      <param name="profileID">A number between 1 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</param>
      <param name="name">A unicode string to use as the display name</param>
      <returns>Returns true if the display name was successfully set, false otherwise.</returns>
    </member>
    <member name="M:Vuforia.EyewearCalibrationProfileManager.clearProfile(System.Int32)">
      <summary>
            Delete all stored data for the specified profile.
            </summary>
      <param name="profileID">A number between 1 and <see cref="M:Vuforia.EyewearCalibrationProfileManager.getMaxCount" />.</param>
      <returns>Returns true if the profile was successfully cleared, false otherwise.</returns>
    </member>
    <member name="T:Vuforia.EyewearUserCalibrator">
      <summary>A class for creating custom user calibration procedures for see-through eyewear</summary>
      <remarks>
        <br />
        <b>This API is only supported in the %Vuforia SDK for Digital %Eyewear.</b>
        <br />
        <br />
        <list type="bullet">
          <item>
            <description>
               Users of optical see-through eyewear devices need to perform a calibration
               to determine how to project an augmentation such that it will appear
               registered with the real world.  This calibration is both user and
               device specific.  Vuforia provides a default calibration but to obtain
               the best possible AR experience the user should calibrate Vuforia for
               their own eyes and device.
             </description>
          </item>
          <item>
            <description>
               To write your own calibration app you should draw a calibration shape
               (rectangle) on the display and prompt the user to align the edges of
               of the calibration shape with a Vuforia image target.  This step should
               then be repeated with a different size shape.  A minimum of two steps are
               required for a good result although further steps can be included to get
               an improved calibration result.
             </description>
          </item>
          <item>
            <description>
               If the eyewear device is a stereo then the calibration needs to be
               carried out independently on each eye.
             </description>
          </item>
          <item>
            <description>
               Millimeters must be used as the unit of measurement throughout
               calibration.  The calibration image target used should have its size
               specified in millimetres when initialising this object.  This size
               must match the size specified in the dataset for the target and the
               printed size of the target.
             </description>
          </item>
          <item>
            <description>
               The projection matrix generated by the calibration process includes
               OpenGL clip planes which will cause augmentations very close or far
               from the user to be clipped.
             </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:Vuforia.EyewearUserCalibrator.init(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initialises the eyewear calibrator.</summary>
      <remarks>
             - This function must be called before any other members of this class.
            </remarks>
      <param name="surfaceWidth">The width of the rendering surface that the calibration is running in</param>
      <param name="surfaceHeight">The height of the rendering surface that the calibration is running in</param>
      <param name="targetWidth">The width of the image target being used in millimetres</param>
      <param name="targetHeight">The height of the image target being used in millimetres</param>
      <returns>True if initialisation is successful, false otherwise</returns>
    </member>
    <member name="M:Vuforia.EyewearUserCalibrator.getMinScaleHint">
      <summary>Gets a hint of the minimum size a calibration shape should be drawn</summary>
      <remarks>
             - The smaller a calibration shape is drawn the further the user needs to
             stand away from a target during calibration.  The minimum size that
             can be drawn is device specific and this API provide a hint as to what
             minimum scale shape is practical.
            </remarks>
      <returns>The minimum scale of the shape in the range 0.0 - 1.0</returns>
    </member>
    <member name="M:Vuforia.EyewearUserCalibrator.getMaxScaleHint">
      <summary>Gets a hint of the maximum size a calibration shape should be drawn</summary>
      <remarks>
             - Drawing a large calibration shape means the sides of the shape will
             near to the sides of the display.  Some eyewear devices have
             distortion towards the edge of the display.  This API provides a hint
             as to the maximum size a calibration shape should be drawn.
            </remarks>
      <returns>The maximum scale of the shape in the range 0.0 - 1.0</returns>
    </member>
    <member name="M:Vuforia.EyewearUserCalibrator.isStereoStretched">
      <summary>Checks whether a device stretches the display to create a stereoscopic effect</summary>
      <remarks>
             - When a device enters 3D it may join the displays together to create one
             big display.  If the resolution of the display appears the same then the
             display is effectively stretched
            </remarks>
      <returns>True if the display is stretched, otherwise false</returns>
    </member>
    <member name="M:Vuforia.EyewearUserCalibrator.getProjectionMatrix(Vuforia.EyewearDevice.EyewearCalibrationReading[],UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@)">
      <summary>Gets a projection matrix calibrated for eyewear</summary>
      <remarks>
             - Calculates and returns a calibrated projection matrix.
             - init must be called before calling this function.
            </remarks>
      <param name="readings">An array of calibration readings</param>
      <param name="cameraToEyeMatrix">A rigid transformation that maps a point in camera coordinates into a point 
            in the user's eye coordinates</param>
      <param name="projectionMatrix">A projection that maps a 3D point in user's eye coordinates into a 2D point
            on the display</param>
      <returns>True if the call is successful, otherwise false</returns>
    </member>
    <member name="T:Vuforia.WireframeBehaviour">
      <summary>
            This script renders the mesh from the MeshFilter as wireframe.
            This is mainly supposed to be used for visualization/debugging purpoes. It uses GL.LINES to draw the wireframe,
            which is not very fast for larger meshes.
            In order to draw large wireframe meshes in an app, it is recommended to use 3rd party libraries such as Vectrosity.
            </summary>
    </member>
    <member name="T:Vuforia.WireframeTrackableEventHandler">
      <summary>
            A custom handler that also hides the wireframe-renderer in the smart terrain
            </summary>
    </member>
    <member name="M:Vuforia.WireframeTrackableEventHandler.OnTrackableStateChanged(Vuforia.TrackableBehaviour.Status,Vuforia.TrackableBehaviour.Status)">
      <summary>
            Implementation of the ITrackableEventHandler function called when the
            tracking state changes.
            </summary>
    </member>
  </members>
</doc>